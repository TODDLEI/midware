    /*
     * SQLBOSSHandler.java
     *
     * Created on February 23, 2011, 15:00 
     *
     */

package net.terakeet.soapware.handlers;

import net.terakeet.soapware.*;
import net.terakeet.soapware.security.*;
import net.terakeet.util.MidwareLogger;
import org.apache.log4j.Logger;
import org.dom4j.Element;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import java.text.*;
import java.text.SimpleDateFormat;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import net.terakeet.util.TemplatedMessage;
import net.terakeet.util.ParameterFile;
import net.terakeet.util.MailException;
import net.terakeet.soapware.handlers.report.*;

import org.apache.commons.httpclient.util.URIUtil;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;

import com.google.api.client.googleapis.GoogleHeaders;
import com.google.api.client.googleapis.GoogleTransport;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpResponse;
import com.google.api.client.http.HttpTransport;

import com.google.api.client.json.GenericJson;
import com.google.api.client.json.JsonHttpContent;
import com.google.api.client.json.JsonHttpParser;
import com.google.api.client.util.GenericData;
import com.google.api.client.util.Key;

public class SQLBOSSHandler implements Handler {
    
    private MidwareLogger logger;
    private static final String transConnName
                                            = "auper";
    private RegisteredConnection transconn;
    private SecureSession ss;
    private DecimalFormat cf;
    private LocationMap locationMap;
    private static SimpleDateFormat dateFormat
                                            = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    private static SimpleDateFormat dbDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    /**
     * Creates a new instance of SQLBOSSHandler
     */
    public SQLBOSSHandler() throws HandlerException {
        HandlerUtils.initializeClientKeyManager();
        logger                              = new MidwareLogger(SQLBOSSHandler.class.getName());
        transconn                           = null;
        locationMap                         = null;
        cf                                  = (DecimalFormat) NumberFormat.getInstance(Locale.US);
    }
    
    public void handle(Element toHandle, Element toAppend) throws HandlerException{
        
        String function                     = toHandle.getName();
        String responseNamespace            = (String)SOAPMessage.getURIMap().get("tkmsg");
        
        String clientKey                    = HandlerUtils.getOptionalString(toHandle,"clientKey");
        ss                                  = ClientKeyManager.getSession(clientKey);
        logger                              = new MidwareLogger(SQLBOSSHandler.class.getName(), function);
        logger.debug("SQLBOSSHandler processing method: "+function);
        logger.xml("request: " + toHandle.asXML());
        transconn                           = DatabaseConnectionManager.getNewConnection(transConnName, function + " (SQLBOSSHandler)");
        cf.applyPattern("#.####");
        try {
            // All methods require an admin client key
            if (ss.getLocation() == 0 && ss.getClientId() == 1 && ss.getSecurityLevel().canAdmin()) {
                if ("getSalesPipeline".equals(function)) {
                    getSalesPipeline(toHandle, responseFor(function,toAppend));
                } else if ("getLeadDetails".equals(function)) {
                    getLeadDetails(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateLead".equals(function)) {
                    addUpdateLead(toHandle, responseFor(function, toAppend));
                } else if ("deleteLeads".equals(function)) {
                    deleteLeads(toHandle, responseFor(function, toAppend));
                } else if ("getCustomerList".equals(function)) {
                    getCustomerList(toHandle, responseFor(function,toAppend));
                } else if ("getCustomerDetails".equals(function)) {
                    getCustomerDetails(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateBOSSCustomer".equals(function)) {
                    addUpdateBOSSCustomer(toHandle, responseFor(function, toAppend));
                } else if ("getLocationList".equals(function)) {
                    getLocationList(toHandle, responseFor(function,toAppend));
                } else if ("getBOSSLocationDetails".equals(function)) {
                    getBOSSLocationDetails(toHandle, responseFor(function, toAppend));
                } else if ("getBillingInformation".equals(function)) {
                    getBillingInformation(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateBOSSLocation".equals(function)) {
                    addUpdateBOSSLocation(toHandle, responseFor(function, toAppend));
                } else if ("getChecklist".equals(function)) {
                    getChecklist(toHandle, responseFor(function,toAppend));
                } else if ("updateChecklist".equals(function)) {
                    updateChecklist(toHandle, responseFor(function,toAppend));
                } else if ("getInvoiceDetails".equals(function)) {
                    getInvoiceDetails(toHandle, responseFor(function, toAppend));
                } else if ("updateInvoices".equals(function)) {
                    updateInvoices(toHandle, responseFor(function, toAppend));
                } else if ("getInvoiceList".equals(function)) {
                    getInvoiceList(toHandle, responseFor(function, toAppend));
                } else if ("getLocationInvoice".equals(function)) {
                    getLocationInvoice(toHandle, responseFor(function, toAppend));
                } else if ("receivePayment".equals(function)) {
                    receivePayment(toHandle, responseFor(function, toAppend));
                } else if ("receiveBadDebt".equals(function)) {
                    receiveBadDebt(toHandle, responseFor(function, toAppend));
                } else if ("getBadDebtReport".equals(function)) {
                    getBadDebtReport(toHandle, responseFor(function, toAppend));
                } else if ("getContactInformation".equals(function)) {
                    getContactInformation(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateContactInformation".equals(function)) {
                    addUpdateContactInformation(toHandle, responseFor(function, toAppend));
                } else if ("getReminder".equals(function)) {
                    getReminder(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateReminder".equals(function)) {
                    addUpdateReminder(toHandle, responseFor(function, toAppend));
                } else if ("getBOSSDashBoardReport".equals(function)) {
                    getBOSSDashBoardReport(toHandle, responseFor(function, toAppend));
                } else if ("getSalesAuditData".equals(function)) {
                    getSalesAuditData(toHandle, responseFor(function, toAppend));
                } else if ("addSalesAudit".equals(function)) {
                    addSalesAudit(toHandle, responseFor(function, toAppend));
                } else if ("getSalesAudits".equals(function)) {
                    getSalesAudits(toHandle, responseFor(function, toAppend));
                } else if ("emailSalesAuditDetails".equals(function)) {
                    emailSalesAuditDetails(toHandle, responseFor(function, toAppend));
                } else if ("getSalesAuditDetails".equals(function)) {
                    getSalesAuditDetails(toHandle, responseFor(function, toAppend));
                } else if ("getTierReport".equals(function)) {
                    getTierReport(toHandle, responseFor(function, toAppend));
                } else if ("getUserHistory".equals(function)) {
                    getUserHistory(toHandle, responseFor(function, toAppend));
                } else if ("provisionBevBox".equals(function)) {
                    provisionBevBox(toHandle, responseFor(function, toAppend));
                } else if ("createPackingSlip".equals(function)) {
                    createPackingSlip(toHandle, responseFor(function, toAppend));
                } else if ("getShipmentReport".equals(function)) {
                    getShipmentReport(toHandle, responseFor(function, toAppend));
                } else if ("getShipmentDetails".equals(function)) {
                    getShipmentDetails(toHandle, responseFor(function, toAppend));
                } else if ("getCalibrationValue".equals(function)) {
                    getCalibrationValue(toHandle, responseFor(function, toAppend));
                } else if ("getAccounts".equals(function)) {
                    getAccounts(toHandle, responseFor(function, toAppend));
                } else if ("getAccountsDetails".equals(function)) {
                    getAccountsDetails(toHandle, responseFor(function, toAppend));
                } else if ("getAccountTransactions".equals(function)) {
                    getAccountTransactions(toHandle, responseFor(function, toAppend));
                } else if ("getLocationTransactions".equals(function)) {
                    getLocationTransactions(toHandle, responseFor(function, toAppend));
                } else if ("getAccountStatement".equals(function)) {
                    getAccountStatement(toHandle, responseFor(function, toAppend));
                } else if ("getPaymentDetails".equals(function)) {
                    getPaymentDetails(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateAccounts".equals(function)) {
                    addUpdateAccounts(toHandle, responseFor(function, toAppend));
                } else if ("deleteAccounts".equals(function)) {
                    deleteAccounts(toHandle, responseFor(function, toAppend));
                } else if ("getAccountLocations".equals(function)) {
                    getAccountLocations(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateTransferLocationAccounts".equals(function)) {
                    addUpdateTransferLocationAccounts(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateDeleteAccountEmails".equals(function)) {
                    addUpdateDeleteAccountEmails(toHandle, responseFor(function, toAppend));
                } else if ("getAccountCredits".equals(function)) {
                    getAccountCredits(toHandle, responseFor(function, toAppend));
                } else if ("addAccountCredit".equals(function)) {
                    addAccountCredit(toHandle, responseFor(function, toAppend));
                } else if ("updateDeleteCredits".equals(function)) {
                    updateDeleteCredits(toHandle, responseFor(function, toAppend));
                } else if ("createInvoices".equals(function)) {
                    createInvoices(toHandle, responseFor(function, toAppend));
                } else if ("createMonthlyInvoices".equals(function)) {
                    createMonthlyInvoices(toHandle, responseFor(function, toAppend));
                } else if ("sendOpenInvoices".equals(function)) {
                    sendOpenInvoices(toHandle, responseFor(function, toAppend));
                } else if ("resendInvoice".equals(function)) {
                    resendInvoice(toHandle, responseFor(function, toAppend));
                } else if ("getReceivablesReport".equals(function)) {
                    getReceivablesReport(toHandle, responseFor(function, toAppend));
                } else if ("getPaymentReport".equals(function)) {
                    getPaymentReport(toHandle, responseFor(function, toAppend));
                } else if ("getRevenueReport".equals(function)) {
                    getRevenueReport(toHandle, responseFor(function, toAppend));
                } else if ("getTransactionReport".equals(function)) {
                    getTransactionReport(toHandle, responseFor(function, toAppend));
                } else if ("getRecurringRevenueReport".equals(function)) {
                    getRecurringRevenueReport(toHandle, responseFor(function, toAppend));
                } else if ("getEquipmentList".equals(function)) {
                    getEquipmentList(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateEquipment".equals(function)) {
                    addUpdateEquipment(toHandle, responseFor(function, toAppend));
                } else if ("transferEquipment".equals(function)) {
                    transferEquipment(toHandle, responseFor(function, toAppend));
                } else if ("getInventoryReport".equals(function)) {
                    getInventoryReport(toHandle, responseFor(function, toAppend));
                } else if ("emailAccountStatement".equals(function)) {
                    emailAccountStatement(toHandle, responseFor(function, toAppend));
                } else if ("getInstallScheduleReport".equals(function)) {
                    getInstallScheduleReport(toHandle, responseFor(function, toAppend));
                } else if ("getVendors".equals(function)) {
                    getVendors(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateVendor".equals(function)) {
                    addUpdateVendor(toHandle, responseFor(function, toAppend));
                } else if ("getPurchaseOrders".equals(function)) {
                    getPurchaseOrders(toHandle, responseFor(function, toAppend));
                } else if ("getPurchaseOrderDetails".equals(function)) {
                    getPurchaseOrderDetails(toHandle, responseFor(function, toAppend));
                } else if ("createPurchaseOrder".equals(function)) {
                    createPurchaseOrder(toHandle, responseFor(function, toAppend));
                } else if ("updatePurchaseOrder".equals(function)) {
                    updatePurchaseOrder(toHandle, responseFor(function, toAppend));
                } else if ("receivePurchaseOrder".equals(function)) {
                    receivePurchaseOrder(toHandle, responseFor(function, toAppend));
                } else if ("sendPurchaseOrders".equals(function)) {
                    sendPurchaseOrders(toHandle, responseFor(function, toAppend));
                } else if ("getTroubleTickets".equals(function)) {
                    getTroubleTickets(toHandle, responseFor(function, toAppend));
                }else if ("getLocationLogsTroubleTickets".equals(function)) {
                    getTroubleTickets(toHandle, responseFor(function, toAppend));
                } else if ("getTroubleTicketDetails".equals(function)) {
                    getTroubleTicketDetails(toHandle, responseFor(function, toAppend));
                } else if ("createTroubleTicket".equals(function)) {
                    createTroubleTicket(toHandle, responseFor(function, toAppend));
                } else if ("updateTroubleTicket".equals(function)) {
                    updateTroubleTicket(toHandle, responseFor(function, toAppend));
                } else if ("reassignTroubleTicket".equals(function)) {
                    reassignTroubleTicket(toHandle, responseFor(function, toAppend));
                } else if ("subscribeTroubleTicket".equals(function)) {
                    subscribeTroubleTicket(toHandle, responseFor(function, toAppend));
                } else if ("getTicketCategory".equals(function)) {
                    getTicketCategory(toHandle, responseFor(function, toAppend));
                } else if ("getTicketResolution".equals(function)) {
                    getTicketResolution(toHandle, responseFor(function, toAppend));
                } else if ("getBOSSUsers".equals(function)) {
                    getBOSSUsers(toHandle, responseFor(function, toAppend));
                } else if ("getLocationContact".equals(function)) {
                    getLocationContact(toHandle, responseFor(function, toAppend));
                } else if ("getPlatforms".equals(function)) {
                    getPlatforms(toHandle, responseFor(function, toAppend));
                } else if ("getDepartments".equals(function)) {
                    getDepartments(toHandle, responseFor(function, toAppend));
                } else if ("getProjects".equals(function)) {
                    getProjects(toHandle, responseFor(function, toAppend));
                } else if ("getProjectDetails".equals(function)) {
                    getProjectDetails(toHandle, responseFor(function, toAppend));
                } else if ("createProject".equals(function)) {
                    createProject(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateProjectDetails".equals(function)) {
                    addUpdateProjectDetails(toHandle, responseFor(function, toAppend));
                } else if ("changeProjectDate".equals(function)) {
                    changeProjectDate(toHandle, responseFor(function, toAppend));
                } else if ("closeProject".equals(function)) {
                    closeProject(toHandle, responseFor(function, toAppend));
                } else if ("getLocationNotes".equals(function)) {
                    getLocationNotes(toHandle, responseFor(function, toAppend));
                } else if ("addUpdateLocationNotes".equals(function)) {
                    addUpdateLocationNotes(toHandle, responseFor(function, toAppend));
                } else if ("getInvoiceItems".equals(function)) {
                    getInvoiceItems(toHandle, responseFor(function, toAppend));
                } else if ("getLocationInvoiceItems".equals(function)) {
                    getLocationInvoiceItems(toHandle, responseFor(function, toAppend));
                } else if ("addDeleteLocationInvoiceItems".equals(function)) {
                    addDeleteLocationInvoiceItems(toHandle, responseFor(function, toAppend));
                } else if ("getBrewStyleLogo".equals(function)) {
                    getBrewStyleLogo(toHandle, responseFor(function, toAppend));
                } else if ("updateBrewStyleLogo".equals(function)) {
                    updateBrewStyleLogo(toHandle, responseFor(function, toAppend));
                } else if ("getLogoRequest".equals(function)) {
                    getLogoRequest(toHandle, responseFor(function, toAppend));
                } else if ("addLogoRequest".equals(function)) {
                    addLogoRequest(toHandle, responseFor(function, toAppend));
                } else if ("getErrorLogs".equals(function)) {
                    getErrorLogs(toHandle, responseFor(function, toAppend));
                }  else if ("closeErrorLogs".equals(function)) {
                    closeErrorLogs(toHandle, responseFor(function, toAppend));
                } else if ("addBOSSArchive".equals(function)) {
                    addBOSSArchive(toHandle, responseFor(function, toAppend));
                } else if ("addBossDashboardArchive".equals(function)) {
                    addBossDashboardArchive(toHandle, responseFor(function, toAppend));
                } else if ("addBossRecurringArchive".equals(function)) {
                    addBossRecurringArchive(toHandle, responseFor(function, toAppend));
                } else if ("addBossAccountRecivableArchive".equals(function)) {
                    addBossAccountRecivableArchive(toHandle, responseFor(function, toAppend));
                } else if ("addBossCashReciptArchive".equals(function)) {
                    addBossCashReciptArchive(toHandle, responseFor(function, toAppend));
                } else if ("addBossSalesArchive".equals(function)) {
                    addBossSalesArchive(toHandle, responseFor(function, toAppend));
                } else if ("addBossTransactionArchive".equals(function)) {
                    addBossTransactionArchive(toHandle, responseFor(function, toAppend));
                } else if ("addBossInventoryArchive".equals(function)) {
                    addBossInventoryArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossArchive".equals(function)) {
                    getBossArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossDashboardArchive".equals(function)) {
                    getBossDashboardArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossRecurringArchive".equals(function)) {
                    getBossRecurringArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossAccountRecivableArchive".equals(function)) {
                    getBossAccountRecivableArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossCashReciptArchive".equals(function)) {
                    getBossCashReciptArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossSalesArchive".equals(function)) {
                    getBossSalesArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossTransactionArchive".equals(function)) {
                    getBossTransactionArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossInventoryArchive".equals(function)) {
                    getBossInventoryArchive(toHandle, responseFor(function, toAppend));
                } else if ("getRateCard".equals(function)) {
                    getRateCard(toHandle, responseFor(function, toAppend));
                } else if ("addBossBadDebtArchive".equals(function)) {
                    addBossBadDebtArchive(toHandle, responseFor(function, toAppend));
                } else if ("getBossBadDebtArchive".equals(function)) {
                    getBossBadDebtArchive(toHandle, responseFor(function, toAppend));
                } else if ("calibrateLines".equals(function)) {
                    calibrateLines(toHandle, responseFor(function, toAppend));
                } else if ("getRegionSet".equals(function)) {
                    getRegionSet(toHandle, responseFor(function, toAppend));
                } else if ("getPackingSlip".equals(function)) {
                    getPackingSlip(toHandle, responseFor(function, toAppend));
                }else if ("getPackingSlipDetails".equals(function)) {
                    getPackingSlipDetails(toHandle, responseFor(function, toAppend));
                } else if ("getPackingSlipLocationDetails".equals(function)) {
                    getPackingSlipLocationDetails(toHandle, responseFor(function, toAppend));
                } else if ("updatePackingSlip".equals(function)) {
                    updatePackingSlip(toHandle, responseFor(function, toAppend));
                } else if ("sendPackingSlipEmail".equals(function)) {
                    sendPackingSlipEmail(toHandle, responseFor(function, toAppend));
                } else if ("getBBTV".equals(function)) {
                    getBBTV(toHandle, responseFor(function, toAppend));
                } else if ("addBBTV".equals(function)) {
                    addBBTV(toHandle, responseFor(function, toAppend));
                } else if ("updateBBTV".equals(function)) {
                    updateBBTV(toHandle, responseFor(function, toAppend));
                } else if ("provisionBBTV".equals(function)) {
                    provisionBBTV(toHandle, responseFor(function, toAppend));
                } else if ("getBevManagerMobileAppReport".equals(function)) {
                    getBevManagerMobileAppReport(toHandle, responseFor(function, toAppend));
                } else if ("upgradeBevBox".equals(function)) {
                    upgradeBevBox(toHandle, responseFor(function, toAppend));
                } else if ("getBOSSProjectUsers".equals(function)) {
                    getBOSSProjectUsers(toHandle, responseFor(function, toAppend));
                } else if ("getProjectDepartments".equals(function)) {
                    getProjectDepartments(toHandle, responseFor(function, toAppend));
                } else if ("sendInvoicesEmail".equals(function)) {
                    sendInvoicesEmail(toHandle, responseFor(function, toAppend));
                } else if ("getBOSSUnApprovedProducts".equals(function)) {
                    getBOSSUnApprovedProducts(toHandle, responseFor(function, toAppend));
                } else if ("getUnApprovedProductDetails".equals(function)) {
                    getUnApprovedProductDetails(toHandle, responseFor(function, toAppend));
                } else if ("sendProductClarification".equals(function)) {
                    sendProductClarification(toHandle, responseFor(function, toAppend));
                } else if ("getInstallationImage".equals(function)) {
                    getInstallationImage(toHandle, responseFor(function, toAppend));
                } else if ("addInstallationImage".equals(function)) {
                    addInstallationImage(toHandle, responseFor(function, toAppend));
                } else if ("sendLocationUpdateEmail".equals(function)) {
                    sendLocationUpdateEmail(toHandle, responseFor(function, toAppend));
                } else if ("sendWeeklyTicketSummary".equals(function)) {
                    sendWeeklyTicketSummary(toHandle, responseFor(function, toAppend));
                } else if ("sendPastInvoices".equals(function)) {
                    sendPastInvoices(toHandle, responseFor(function, toAppend));
                } else if ("getShippedEquipment".equals(function)) {
                    getShippedEquipment(toHandle, responseFor(function, toAppend));
                } else if ("getCleanupProducts".equals(function)) {
                    getCleanupProducts(toHandle, responseFor(function, toAppend));
                } else if ("updateCleanupProduct".equals(function)) {
                    updateCleanupProduct(toHandle, responseFor(function, toAppend));
                } else if ("getKnowledgeBaseCategory".equals(function)) {
                    getKnowledgeBaseCategory(toHandle, responseFor(function, toAppend));
                } else if ("getKnowledgeBaseBug".equals(function)) {
                    getKnowledgeBaseBug(toHandle, responseFor(function, toAppend));
                } else if ("getProblemResolution".equals(function)) {
                    getProblemResolution(toHandle, responseFor(function, toAppend));
                } else if ("createKnowledgeBaseBug".equals(function)) {
                    createKnowledgeBaseBug(toHandle, responseFor(function, toAppend));
                } else if ("addProblemResolution".equals(function)) {
                    addProblemResolution(toHandle, responseFor(function, toAppend));
                } else if ("updateMultiProject".equals(function)) {
                    updateMultiProject(toHandle, responseFor(function, toAppend));
                }      else {
                    logger.generalWarning("Unknown function '" + function + "'.");
                }
            } else {
                // access violation
                addErrorDetail(toAppend, "Access violation: This method is not available with your client key");
                logger.portalAccessViolation("Tried to call '"+function+"' with key "+ss.toString());
            }
        } catch (Exception e) {
            if (e instanceof HandlerException) {
                throw (HandlerException) e;
            } else {
                logger.midwareError("Non-handler exception thrown in ReportHandler: "+e.toString());
                logger.midwareError("XML: " + toHandle.asXML());
                throw new HandlerException(e);
            }
        } finally {
            // Log database use
            int queryCount                  = transconn.getQueryCount();
            logger.dbAction("Executed " + queryCount + " report quer" + (queryCount == 1 ? "y" : "ies"));

            transconn.close();
        }
        
        logger.xml("response: " + toAppend.asXML());
        
    }
    
    private Element responseFor(String s, Element e) {
        String responseNamespace = (String)SOAPMessage.getURIMap().get("tkmsg");
        return e.addElement("m:"+s+"Response",responseNamespace);
    }
    
    
    private String nullToEmpty(String s) {
        return (null == s) ? "" : s;
    }
    
    private void close(Statement s) {
        if (s != null) {
            try { s.close(); } catch (SQLException sqle) { }
        }
    }
    private void close(ResultSet rs) {
        if (rs != null) {
            try { rs.close(); } catch (SQLException sqle) { }
        }
    }
    private void close(Connection c) {
        if (c != null) {
            try { c.close(); } catch (SQLException sqle) { }
        }
    }
    private void close(RegisteredConnection c) {
        c.close();
    }
    
    private void addErrorDetail(Element toAppend, String message) {
        toAppend.addElement("error").addElement("detail").addText(message);
    }
    private int getCallerId(Element toHandle) throws HandlerException {
        return HandlerUtils.getRequiredInteger(HandlerUtils.getRequiredElement(toHandle,"caller"),"callerId");
    }
    
    private boolean checkForeignKey(String table, int value) throws SQLException, HandlerException {
        return checkForeignKey(table,"id",value);
    }
    
    private boolean checkForeignKey(String table, String field, int value) throws SQLException, HandlerException {
        
        PreparedStatement stmt = null;
        ResultSet rs = null;
        boolean result = false;
        
        String select = "SELECT " + field + " FROM " + table +
                " WHERE " + field + " = ?";
        
        stmt = transconn.prepareStatement(select);
        stmt.setInt(1, value);
        rs = stmt.executeQuery();
        result = rs.next();
        
        close(rs);
        close(stmt);
        return result;
    }

    private boolean verifyDepartment(int user, int value) throws SQLException, HandlerException {

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        boolean result                      = false;

        String select                       = "SELECT id FROM userDepartmentMap WHERE user = ? AND department = ?";

        stmt                                = transconn.prepareStatement(select);
        stmt.setInt(1, user);
        stmt.setInt(1, value);
        rs                                  = stmt.executeQuery();
        result                              = rs.next();

        close(rs);
        close(stmt);
        return result;
    }
     
   private void getSalesPipeline(Element toHandle, Element toAppend) throws HandlerException {
       
        int callerId                        = getCallerId(toHandle);
        int leadStatus                      = HandlerUtils.getRequiredInteger(toHandle, "leadStatus");
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        
        String sql                          = "SELECT id, Customer, Region, Contact_name, N_Units, Status, DateModified, Title1, Contact_Phone, Contact_Email FROM t_Pipeline " +
                                            " WHERE LeadClosed = ? ";
        if (null != searchString) {
            sql                             += " AND (Customer like '%" + searchString.replaceAll("'", "\'") + "%' OR LeadStatus like '%" + searchString.replaceAll("'", "\'") +
                                            "%' OR ConceptType like '%" + searchString.replaceAll("'", "\'") +  "%' OR Region like '%" + searchString.replaceAll("'", "\'") +
                                            "%' OR Contact_name like '%" + searchString.replaceAll("'", "\'") +  "%' OR N_Units like '%" + searchString.replaceAll("'", "\'") +
                                            "%' OR Status like '%" + searchString.replaceAll("'", "\'") +  "%' OR POS_System like '%" + searchString.replaceAll("'", "\'") +  "%') ";
        }
        sql                                 += " ORDER BY Customer; ";
        
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,leadStatus);
            rs                              = stmt.executeQuery();
            getSalesPipelineXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getSalesPipelineXML(Element toAppend, ResultSet rs) throws SQLException {

        while (rs.next()) {
            int colCount                    = 1;
            Element salesPipelineEl         = toAppend.addElement("pipeline");
            salesPipelineEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            salesPipelineEl.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("region").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contactName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("locationCount").addText(String.valueOf(rs.getInt(colCount++)));
            salesPipelineEl.addElement("status").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("dateModified").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact1Title").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact1Phone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact1Email").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void getLeadDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT Customer, Contact_Name, Title1, Contact_Phone, Contact_Email, Contact_Name2, Title2, Contact_Phone2, Contact_Email2, LeadStatus, " +
                                            " LeadType, ConceptType, RestaurantType, Tier, N_Units, Lead_Source, USBN_Rep, Region, POS_System, Status, REPLACE(Notes,'\r\n','--'), " +
                                            " REPLACE(SalesTools,'\r\n','---'), Date_Entered, DateModified FROM t_Pipeline WHERE id = ? ";

        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,id);
            rs                              = stmt.executeQuery();
            getLeadDetailsXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getLeadDetailsXML(Element toAppend, ResultSet rs) throws SQLException {

        while (rs.next()) {
            int colCount                    = 1;
            Element salesPipelineEl         = toAppend.addElement("leadDetails");
            salesPipelineEl.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact1Name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact1Title").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact1Phone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact1Email").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact2Name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact2Title").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact2Phone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("contact2Email").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("leadStatus").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("leadType").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("conceptType").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("restaurantType").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("tier").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("locationCount").addText(String.valueOf(rs.getInt(colCount++)));
            salesPipelineEl.addElement("leadSource").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("usbnRep").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("region").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("pos").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("status").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("notes").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("details").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("Date_Entered").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            salesPipelineEl.addElement("DateModified").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }


    private void addUpdateLead(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");
        String customerName                 = HandlerUtils.getRequiredString(toHandle, "customerName");
        String contact1Name                 = HandlerUtils.getRequiredString(toHandle, "contact1Name");
        String contact1Title                = HandlerUtils.getOptionalString(toHandle, "contact1Title");
        String contact1Phone                = HandlerUtils.getOptionalString(toHandle, "contact1Phone");
        String contact1Email                = HandlerUtils.getOptionalString(toHandle, "contact1Email");
        String contact2Name                 = HandlerUtils.getOptionalString(toHandle, "contact2Name");
        String contact2Title                = HandlerUtils.getOptionalString(toHandle, "contact2Title");
        String contact2Phone                = HandlerUtils.getOptionalString(toHandle, "contact2Phone");
        String contact2Email                = HandlerUtils.getOptionalString(toHandle, "contact2Email");
        String leadStatus                   = HandlerUtils.getRequiredString(toHandle, "leadStatus");
        String leadType                     = HandlerUtils.getRequiredString(toHandle, "leadType");
        String conceptType                  = HandlerUtils.getRequiredString(toHandle, "conceptType");
        String restaurantType               = HandlerUtils.getRequiredString(toHandle, "restaurantType");
        String tier                         = HandlerUtils.getOptionalString(toHandle, "tier");
        int locationCount                   = HandlerUtils.getOptionalInteger(toHandle, "locationCount");
        String leadSource                   = HandlerUtils.getOptionalString(toHandle, "leadSource");
        String usbnRep                      = HandlerUtils.getRequiredString(toHandle, "usbnRep");
        String region                       = HandlerUtils.getRequiredString(toHandle, "region");
        String pos                          = HandlerUtils.getOptionalString(toHandle, "pos");
        String status                       = HandlerUtils.getOptionalString(toHandle, "status");
        String notes                        = HandlerUtils.getOptionalString(toHandle, "notes");
        String details                      = HandlerUtils.getOptionalString(toHandle, "details");
        Date timestamp                      = new Date();
        SimpleDateFormat newDateFormat      = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String insertLead                   = "INSERT INTO t_Pipeline (Customer, Contact_Name, Title1, Contact_Phone, Contact_Email, Contact_Name2, Title2, Contact_Phone2, Contact_Email2, " +
                                            " LeadStatus, LeadType, ConceptType, RestaurantType, Tier, N_Units, Lead_Source, USBN_Rep, Region, POS_System, Status, Notes, SalesTools, Date_Entered, DateModified) " +
                                            " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
        String updateLead                   = "UPDATE t_Pipeline SET Customer = ?, Contact_Name = ?, Title1 = ?, Contact_Phone = ?, Contact_Email = ?, Contact_Name2 = ?, Title2 = ?, " +
                                            " Contact_Phone2 = ?, Contact_Email2 = ?, LeadStatus = ?, LeadType = ?, ConceptType = ?, RestaurantType = ?, Tier = ?, N_Units = ?,  " +
                                            " Lead_Source = ?, USBN_Rep = ?, Region = ?, POS_System = ?, Status = ?, Notes = ?, SalesTools = ?, DateModified = ? WHERE id = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        logger.portalAction("addUpdateLead");

        try {
            // If no lead Id was provided, we need to make a new lead
            int colCount                    = 1;
            if (id <= 0) {
                stmt                        = transconn.prepareStatement(insertLead);
                stmt.setString(colCount++, customerName);
                stmt.setString(colCount++, contact1Name);
                stmt.setString(colCount++, contact1Title);
                stmt.setString(colCount++, contact1Phone);
                stmt.setString(colCount++, contact1Email);
                stmt.setString(colCount++, contact2Name);
                stmt.setString(colCount++, contact2Title);
                stmt.setString(colCount++, contact2Phone);
                stmt.setString(colCount++, contact2Email);
                stmt.setString(colCount++, leadStatus);
                stmt.setString(colCount++, leadType);
                stmt.setString(colCount++, conceptType);
                stmt.setString(colCount++, restaurantType);
                stmt.setString(colCount++, tier);
                stmt.setInt(colCount++, locationCount);
                stmt.setString(colCount++, leadSource);
                stmt.setString(colCount++, usbnRep);
                stmt.setString(colCount++, region);
                stmt.setString(colCount++, pos);
                stmt.setString(colCount++, status);
                stmt.setString(colCount++, notes);
                stmt.setString(colCount++, details);
                stmt.setString(colCount++, newDateFormat.format(timestamp));
                stmt.setString(colCount++, newDateFormat.format(timestamp));
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                logger.debug("Created a new lead");

                if (rs.next()) {
                    id                      = rs.getInt(1);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addLead failed to return a result");
                    throw new HandlerException("Database Error");
                }

                toAppend.addElement("leadId").addText(String.valueOf(id));
                String logMessage           = "Created lead for '" + customerName + "'";
                logger.portalDetail(callerId, "addLead", 0, "lead", id, logMessage, transconn);
            } else {
                stmt                        = transconn.prepareStatement(updateLead);
                stmt.setString(colCount++, customerName);
                stmt.setString(colCount++, contact1Name);
                stmt.setString(colCount++, contact1Title);
                stmt.setString(colCount++, contact1Phone);
                stmt.setString(colCount++, contact1Email);
                stmt.setString(colCount++, contact2Name);
                stmt.setString(colCount++, contact2Title);
                stmt.setString(colCount++, contact2Phone);
                stmt.setString(colCount++, contact2Email);
                stmt.setString(colCount++, leadStatus);
                stmt.setString(colCount++, leadType);
                stmt.setString(colCount++, conceptType);
                stmt.setString(colCount++, restaurantType);
                stmt.setString(colCount++, tier);
                stmt.setInt(colCount++, locationCount);
                stmt.setString(colCount++, leadSource);
                stmt.setString(colCount++, usbnRep);
                stmt.setString(colCount++, region);
                stmt.setString(colCount++, pos);
                stmt.setString(colCount++, status);
                stmt.setString(colCount++, notes);
                stmt.setString(colCount++, details);
                stmt.setString(colCount++, newDateFormat.format(timestamp));
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();

                logger.debug("Update lead");
                
                String logMessage           = "Updated lead for '" + customerName + "'";
                logger.portalDetail(callerId, "updateLead", 0, "lead", id, logMessage, transconn);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void deleteLeads(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String select                       = " SELECT Customer FROM t_Pipeline WHERE id = ? ";
        String delete                       = " DELETE FROM t_Pipeline WHERE id = ? ";

        Iterator i                          = toHandle.elementIterator("leads");
        try {
            while (i.hasNext()) {
                Element prod                = (Element) i.next();
                int leadId                  = HandlerUtils.getRequiredInteger(prod, "leadId");
                stmt                        = transconn.prepareStatement(select);
                stmt.setInt(1,leadId);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    stmt                    = transconn.prepareStatement(delete);
                    stmt.setInt(1,leadId);
                    stmt.executeUpdate();

                    String logMessage       = "Delete lead for '" + rs.getString(1) + "'";
                    logger.portalDetail(callerId, "deleteLeads", 0, "lead", leadId, logMessage, transconn);
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

   private void getCustomerList(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString");
        int customerType                    = HandlerUtils.getOptionalInteger(toHandle, "customerType");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT BC.id, usbn_customer, Customer_Name, Contact_Name, OfficePhone, Email, Date_Created, rateCard,(SELECT u.name from accountIncharge a LEFT JOIN user u ON u.id= a.user WHERE a.customer = BC.id LIMIT 1)  FROM BOSS_Customer BC";
        if (null != searchString && searchString.length() > 0) {
            sql                             += " WHERE (Customer_Name like '%" + searchString.replaceAll("'", "\'") + "%' OR Contact_Name like '%" + searchString.replaceAll("'", "\'") +
                                            "%' OR Street like '%" + searchString.replaceAll("'", "\'") +  "%' OR City like '%" + searchString.replaceAll("'", "\'") +
                                            "%' OR Zip like '%" + searchString.replaceAll("'", "\'") +  "%' OR State like '%" + searchString.replaceAll("'", "\'") +
                                            "%' OR Email like '%" + searchString.replaceAll("'", "\'") +  "%' OR Billing_Contact like '%" + searchString.replaceAll("'", "\'") +  "%') ";
        }
        sql                                 += " ORDER BY Customer_Name; ";
        try {
            stmt                            = transconn.prepareStatement(sql);
            rs                              = stmt.executeQuery();
            getCustomerListXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getCustomerListXML(Element toAppend, ResultSet rs) throws SQLException {

        while (rs.next()) {
            int colCount                    = 1;
            Element customerListEl          = toAppend.addElement("customerList");
            customerListEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            customerListEl.addElement("usbnid").addText(String.valueOf(rs.getInt(colCount++)));
            customerListEl.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerListEl.addElement("contactName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerListEl.addElement("contactPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerListEl.addElement("contactEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerListEl.addElement("dateCreated").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerListEl.addElement("rateCard").addText(String.valueOf(rs.getInt(colCount++)));
            customerListEl.addElement("accountIncharge").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void getCustomerDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT id, rateCard, Customer_Name, Contact_Name, Contact_Title, OfficePhone, CellPhone, Email, Fax, Street, City, Zip, State, " +
                                            " REPLACE(Notes,'\r\n','---'), usbn_customer FROM BOSS_Customer WHERE id = ? ";

        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,id);
            rs                              = stmt.executeQuery();
            getCustomerDetailsXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getCustomerDetailsXML(Element toAppend, ResultSet rs) throws SQLException {
         PreparedStatement stmt              = null;
         ResultSet customerRS                = null;
         try {
        while (rs.next()) {
            int colCount                    = 1;
            Element customerDetailsEl          = toAppend.addElement("customerDetails");
            customerDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            customerDetailsEl.addElement("rateCard").addText(String.valueOf(rs.getInt(colCount++)));
            customerDetailsEl.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactTitle").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactCellPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactFax").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactStreet").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactCity").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactZip").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("contactState").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            customerDetailsEl.addElement("notes").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            
            stmt                        = transconn.prepareStatement("SELECT GROUP_CONCAT(user) FROM accountIncharge WHERE customer=?");
            stmt.setInt(1,rs.getInt(1));
            customerRS                  = stmt.executeQuery();
            if (customerRS.next()) {
                customerDetailsEl.addElement("accountIncharge").addText(HandlerUtils.nullToEmpty(customerRS.getString(1)));
            }
            
            int customerId                  = rs.getInt(colCount++);            
            stmt                        = transconn.prepareStatement("SELECT id,name FROM regionSet WHERE customer=?");
            stmt.setInt(1,customerId);
            customerRS                  = stmt.executeQuery();
            while (customerRS.next()) {
                Element regionDetailsEl          = customerDetailsEl.addElement("regionSet");
                regionDetailsEl.addElement("regionId").addText(String.valueOf(customerRS.getInt(1)));
                regionDetailsEl.addElement("regionName").addText(HandlerUtils.nullToEmpty(customerRS.getString(2)));
            }
                
        }
          } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new SQLException(sqle);
        } finally {
            close(customerRS);
            close(stmt);
        }
    }


    private void addUpdateBOSSCustomer(Element toHandle, Element toAppend) throws HandlerException {
        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");
        int rateCard                        = HandlerUtils.getRequiredInteger(toHandle, "rateCard");
        String customerName                 = HandlerUtils.getRequiredString(toHandle, "customerName");
        String contactName                  = HandlerUtils.getRequiredString(toHandle, "contactName");
        String contactTitle                 = HandlerUtils.getOptionalString(toHandle, "contactTitle");
        String contactPhone                 = HandlerUtils.getOptionalString(toHandle, "contactPhone");
        String contactCellPhone             = HandlerUtils.getOptionalString(toHandle, "contactCellPhone");
        String contactEmail                 = HandlerUtils.getOptionalString(toHandle, "contactEmail");
        String contactFax                   = HandlerUtils.getOptionalString(toHandle, "contactFax");
        String contactStreet                = HandlerUtils.getRequiredString(toHandle, "contactStreet");
        String contactCity                  = HandlerUtils.getRequiredString(toHandle, "contactCity");
        String contactZip                   = HandlerUtils.getRequiredString(toHandle, "contactZip");
        String contactState                 = HandlerUtils.getRequiredString(toHandle, "contactState");
        String notes                        = HandlerUtils.getOptionalString(toHandle, "notes");
        String incharge                     = HandlerUtils.getOptionalString(toHandle, "accountIncharge");

        String insertCustomer               = "INSERT INTO customer (name) VALUES (?)";
        String insertBOSSCustomer           = "INSERT INTO BOSS_Customer (usbn_customer, rateCard, Customer_Name, Contact_Name, Contact_Title, OfficePhone, CellPhone, Email, Fax, Street, City, Zip, State, " +
                                            " Notes, Date_Created) " +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
        String updateBOSSCustomer           = "UPDATE BOSS_Customer SET rateCard = ?, Customer_Name = ?, Contact_Name = ?, Contact_Title = ?, OfficePhone = ?, CellPhone = ?, Email = ?, Fax = ?, " +
                                            " Street = ?, City = ?, Zip = ?, State = ?, Notes = ? WHERE id = ? ";
        String selectCustomer               = "SELECT usbn_customer FROM BOSS_Customer WHERE id = ?";
        String updateCustomer               = "UPDATE customer SET name = ? WHERE id = ?";
        String updateBOSSLocations          = "UPDATE locationAccountMap lAM LEFT JOIN BOSS_Location BL ON BL.id = lAM.location SET lAM.rateCard = ? WHERE BL.customer_id = ?";
        String closeLead                    = "UPDATE t_Pipeline SET LeadClosed = 1 WHERE id = ?";
        String getLastId                    = "SELECT LAST_INSERT_ID()";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        
        if(incharge==null||incharge.equals("")) {
            incharge                         = "0";
        }

        logger.portalAction("addUpdateBOSSCustomer");

        try {
            // If no customer Id was provided, we need to make a new customer
            int colCount                    = 1;
            int customerId                  = 0;
            if (id <= 0) {
                Date timestamp              = new Date();
                SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

              //  int salesPipelineId         = HandlerUtils.getRequiredInteger(toHandle, "salesPipelineId");
                
                stmt                        = transconn.prepareStatement(insertCustomer);
                stmt.setString(1, customerName);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                logger.debug("Created a new lead");

                if (rs.next()) {
                    customerId              = rs.getInt(1);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addUpdateBOSSCustomer failed to return a result for adding usbn customer");
                    throw new HandlerException("Database Error");
                }

                stmt                        = transconn.prepareStatement(insertBOSSCustomer);
                stmt.setInt(colCount++, customerId);
                stmt.setInt(colCount++, rateCard);
                stmt.setString(colCount++, customerName);
                stmt.setString(colCount++, contactName);
                stmt.setString(colCount++, contactTitle);
                stmt.setString(colCount++, contactPhone);
                stmt.setString(colCount++, contactCellPhone);
                stmt.setString(colCount++, contactEmail);
                stmt.setString(colCount++, contactFax);
                stmt.setString(colCount++, contactStreet);
                stmt.setString(colCount++, contactCity);
                stmt.setString(colCount++, contactZip);
                stmt.setString(colCount++, contactState);
                stmt.setString(colCount++, notes);
                stmt.setString(colCount++, newDateFormat.format(timestamp));
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    id                      = rs.getInt(1);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addBOSSCustomer failed to return a result");
                    throw new HandlerException("Database Error");
                }

                //stmt                        = transconn.prepareStatement(closeLead);
                //stmt.setInt(1, salesPipelineId);
                //stmt.executeUpdate();
                
                stmt                    = transconn.prepareStatement("SELECT id,name from user WHERE id IN("+incharge+");");
                 rs                      = stmt.executeQuery();                    
                 while (rs.next()) {
                     stmt                    = transconn.prepareStatement("INSERT INTO accountIncharge (customer,user) VALUES (?, ?) ");
                     stmt.setInt(1, id);
                     stmt.setInt(2, rs.getInt(1));
                     stmt.executeUpdate();
                 }

                logger.debug("Created a new BOSS Customer");

                toAppend.addElement("customerId").addText(String.valueOf(id));
                String logMessage           = "Created BOSS customer for '" + customerName + "'";
                logger.portalDetail(callerId, "addBOSSCustomer", 0, "BOSS_Customer", id, logMessage, transconn);
                
                
                Iterator i = toHandle.elementIterator("regionSet");
                addRegionSet(customerId,i,toAppend);
            } else {
                stmt                        = transconn.prepareStatement(updateBOSSCustomer);
                stmt.setInt(colCount++, rateCard);
                stmt.setString(colCount++, customerName);
                stmt.setString(colCount++, contactName);
                stmt.setString(colCount++, contactTitle);
                stmt.setString(colCount++, contactPhone);
                stmt.setString(colCount++, contactCellPhone);
                stmt.setString(colCount++, contactEmail);
                stmt.setString(colCount++, contactFax);
                stmt.setString(colCount++, contactStreet);
                stmt.setString(colCount++, contactCity);
                stmt.setString(colCount++, contactZip);
                stmt.setString(colCount++, contactState);
                stmt.setString(colCount++, notes);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(selectCustomer);
                stmt.setInt(1, id);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(updateCustomer);
                    stmt.setString(1, customerName);
                    stmt.setInt(2, rs.getInt(1));
                    customerId              = rs.getInt(1);
                    stmt.executeUpdate();
                }

                stmt                        = transconn.prepareStatement(updateBOSSLocations);
                stmt.setInt(1, rateCard);
                stmt.setInt(2, id);
                stmt.executeUpdate();
                
                stmt                    = transconn.prepareStatement("DELETE FROM accountIncharge WHERE customer = ?");
                stmt.setInt(1, id);
                stmt.executeUpdate();
                
                stmt                    = transconn.prepareStatement("SELECT id,name from user WHERE id IN("+incharge+");");
                rs                      = stmt.executeQuery();                    
                while (rs.next()) {
                    stmt                    = transconn.prepareStatement("INSERT INTO accountIncharge (customer,user) VALUES (?, ?) ");
                    stmt.setInt(1, id);
                    stmt.setInt(2, rs.getInt(1));
                    stmt.executeUpdate();
                    }
                
                Iterator i = toHandle.elementIterator("regionSet");
                addRegionSet(customerId,i,toAppend);

                logger.debug("Update BOSS Customer");

                String logMessage           = "Updated BOSS Customer for '" + customerName + "'";
                logger.portalDetail(callerId, "updateBOSSCustomer", 0, "BOSS_Customer", id, logMessage, transconn);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
     private void addRegionSet(int customer, Iterator i, Element toAppend) throws HandlerException {
          PreparedStatement stmt = null;
        ResultSet rs = null;        

        try {
            String regionIds        = "0";
            while (i.hasNext()) {
                Element region = (Element) i.next();
                int regionId                = HandlerUtils.getRequiredInteger(region, "regionId");
                String regionName           = HandlerUtils.getRequiredString(region, "regionName");
                regionIds                   +=","+regionId;               
                if (regionId == 0) {                   
                    String selectRegionSetName = " SELECT id FROM regionSet WHERE name = ? AND customer = ? ";
                    stmt = transconn.prepareStatement(selectRegionSetName);
                    stmt.setString(1, regionName.trim());
                    stmt.setInt(2, customer);
                    rs = stmt.executeQuery();
                    if (!rs.next()) {
                        String insertNewProductSet = " INSERT INTO regionSet (name, customer) VALUES (?,?) ";
                        stmt = transconn.prepareStatement(insertNewProductSet);
                        stmt.setString(1, regionName.trim());
                        stmt.setInt(2, customer);
                        stmt.executeUpdate();
                        
                          stmt                        = transconn.prepareStatement("SELECT LAST_INSERT_ID()");
                          rs                          = stmt.executeQuery();
                          logger.debug("Created a new Region");
                          if (rs.next()) {
                              regionId              = rs.getInt(1);
                              regionIds                   +=","+regionId;
                          }
                    } else {
                        
                    }
                }else {
                    
                    String updateRegionSet = " UPDATE regionSet SET name=? WHERE id=?";
                    stmt = transconn.prepareStatement(updateRegionSet);
                    stmt.setString(1, regionName.trim());
                    stmt.setInt(2, regionId);
                    stmt.executeUpdate();
                }
            }
            stmt = transconn.prepareStatement("DELETE FROM regionSet WHERE customer = ? AND id NOT IN("+regionIds+")");
            stmt.setInt(1, customer);
            stmt.executeUpdate();
      } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
     }
     
     
     private void getRegionSet(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "customerId");        
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        int usbnCustomerId                  = 0;

       
        
        try {
            if (id > 0) {
               stmt                    = transconn.prepareStatement("SELECT usbn_customer FROM BOSS_Customer  WHERE id=?;");
                stmt.setInt(1, id);
                rs                      = stmt.executeQuery();
                if (rs.next()) {
                    usbnCustomerId      = rs.getInt(1);                    
                }
                
            } 
            stmt                        = transconn.prepareStatement("SELECT id,name FROM regionSet WHERE customer=?");
            stmt.setInt(1,usbnCustomerId);
            rs                  = stmt.executeQuery();
            while (rs.next()) {
                Element regionDetailsEl          = toAppend.addElement("regionSet");
                regionDetailsEl.addElement("regionId").addText(String.valueOf(rs.getInt(1)));
                regionDetailsEl.addElement("regionName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
    

    private void getLocationList(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString");
        int customerId                      = HandlerUtils.getOptionalInteger(toHandle, "customerId");
        int departmentType                  = HandlerUtils.getRequiredInteger(toHandle, "departmentType");
        int locationState                   = HandlerUtils.getOptionalInteger(toHandle, "locationState");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        String sql                          = "SELECT BL.id, BL.usbn_location, BC.id,BC.Customer_Name,BC.usbn_customer, BL.location_name, BL.location_contact, BL.location_ph, " +
                                            " IFNULL(IF(? = 0, IC.scheduledDate, IC.installDate), '2005-01-01'), BC.rateCard FROM BOSS_Location BL LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id " +
                                            " LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " LEFT JOIN Installation_Checklist IC ON IC.location_id = BL.id ";

        switch (departmentType) {
            case 0:
                sql                         += " WHERE lD.active = 1 ";
                switch(locationState) {
                    case 0:
                        sql                 += " AND lD.preInstall = 1 AND lD.scheduled = 0 AND lD.billing = 0 ";
                        break;
                    case 1:
                        sql                 += " AND lD.preInstall = 1 AND lD.scheduled = 1 AND lD.billing = 0 ";
                        break;
                    case 2:
                        sql                 += " AND lD.preInstall = 1 AND lD.scheduled = 1 AND lD.billing = 1 ";
                        break;
                }
                break;
            case 1:
                sql                         += " WHERE BL.customer_id > 0 ";
                break;
            case 2:
                sql                         += " WHERE lD.active = 1 ";
                switch(locationState) {
                    case 0:
                        sql                 += " AND lD.preInstall = 1 AND lD.pouredUp = 0 AND lD.billing = 0 AND BC.usbn_customer <> 205 ";
                        break;
                    case 1:
                        sql                 += " AND lD.preInstall = 1 AND lD.pouredUp = 1 AND lD.billing = 0 ";
                        break;
                    case 2:
                        sql                 += " AND lD.preInstall = 1 AND lD.pouredUp = 1 AND lD.billing = 1 ";
                        break;
                }
                break;
            case 3:
                sql                         += " WHERE lD.active = 1 ";
                switch(locationState) {
                    case 0:
                        sql                 += " AND lD.preInstall = 1 AND lD.soldUp = 0 AND lD.billing = 0 AND BC.usbn_customer <> 205 ";
                        break;
                    case 1:
                        sql                 += " AND lD.preInstall = 1 AND lD.soldUp = 1 AND lD.billing = 0 ";
                        break;
                    case 2:
                        sql                 += " AND lD.preInstall = 1 AND lD.billing = 1 ";
                        break;
                }
                break;
            case 4:
                sql                         +=  " WHERE lD.active = 1 AND lD.preInstall = 1 AND lD.scheduled = 1 AND lD.pouredUp = 1 AND lD.billing = " + locationState;
                break;
        }
        if (null != searchString && searchString.length() > 0) {
            sql                             += " AND (BC.Customer_Name like '%" + searchString.replaceAll("'", "\'") + "%' OR BL.location_name like '%"     + searchString.replaceAll("'", "\'") +
                                            "%' OR BL.location_contact like '%" + searchString.replaceAll("'", "\'") + "%' OR BL.location_street like '%"   + searchString.replaceAll("'", "\'") +
                                            "%' OR BL.location_city like '%"    + searchString.replaceAll("'", "\'") + "%' OR BL.location_zip like '%"      + searchString.replaceAll("'", "\'") +
                                            "%' OR BL.location_state like '%"   + searchString.replaceAll("'", "\'") + "%' OR BL.location_market like '%"   + searchString.replaceAll("'", "\'") +
                                            "%' OR BL.POS_SystemType like '%"   + searchString.replaceAll("'", "\'") + "%') ";
        }
        if (customerId > 0) {
            sql                             += " AND BL.customer_id = ? ";
        }
        sql                                 += " ORDER BY BL.location_name; ";
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1, locationState);
            if (customerId > 0) {
                stmt.setInt(2, customerId);
            }
            rs                              = stmt.executeQuery();
            getLocationListXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getLocationListXML(Element toAppend, ResultSet rs) throws SQLException {

        while (rs.next()) {
            int colCount                    = 1;
            Element locationListEl          = toAppend.addElement("locationList");
            locationListEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            locationListEl.addElement("usbnid").addText(String.valueOf(rs.getInt(colCount++)));
            locationListEl.addElement("customerId").addText(String.valueOf(rs.getInt(colCount++)));
            locationListEl.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            locationListEl.addElement("usbnCustomerId").addText(String.valueOf(rs.getInt(colCount++)));
            locationListEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            locationListEl.addElement("contactName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            locationListEl.addElement("locationPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            locationListEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            locationListEl.addElement("rateCard").addText(String.valueOf(rs.getInt(colCount++)));
        }
    }

    private void getBOSSLocationDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");        
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = " SELECT l.id,usbn_location, customer_id, location_name, location_market, location_street, location_city, location_zip, location_state, " +
                                            " location_contact, location_contact_title, location_ph, location_cell_ph, location_email, location_fax, location_setup_doc, lineCount, Data_Rights, " +
                                            " IT_Company, IT_Contact, IT_Phone, IT_Email, POS_Company, POS_Contact, POS_Phone, POS_Email, POS_SystemType, POS_ServiceType, POS_Setup, " +
                                            " draft_ins_contact, draft_ins_phone, draft_ins_email, cat5_ins_contact, cat5_ins_phone, cat5_ins_email, " +
                                            " contractDate, startDate, endDate, REPLACE(Notes,'\r\n','---'), dateCreated, active, sendToInstall, r.name, bbtvBoxCount,(SELECT u.name from accountIncharge a LEFT JOIN user u ON u.id= a.user WHERE a.customer = customer_id LIMIT 1) FROM BOSS_Location l LEFT JOIN regionSet r ON r.id =l.region " ;

        try {
            if (id <= 0) {
                sql                         += " WHERE usbn_location = ? ";
                id                          = HandlerUtils.getRequiredInteger(toHandle, "usbnId");
                
            } else {
                sql                         += " WHERE l.id = ? ";                
            }
            
            stmt                            = transconn.prepareStatement(sql);            
            stmt.setInt(1,id);
            rs                              = stmt.executeQuery();
            getBOSSLocationDetailsXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
     
    

    private void getBOSSLocationDetailsXML(Element toAppend, ResultSet rs) throws HandlerException {

        PreparedStatement stmt              = null;
        ResultSet customerRS                = null;
        ResultSet locationRS                = null;
        try {
            while (rs.next()) {
                String eof                  = "0.0";
                String region               = "";
                stmt                        = transconn.prepareStatement("SELECT easternOffset, boardname FROM location WHERE id = ?");
                stmt.setInt(1, rs.getInt(2));
                locationRS                  = stmt.executeQuery();
                String bbtvName             =  "";
                if (locationRS.next()) {
                    eof                     = locationRS.getString(1);
                    bbtvName                = locationRS.getString(2);
                }
                
                int colCount                = 1;
                Element locationDetailsEl   = toAppend.addElement("locationDetails");
                int id                      = rs.getInt(colCount++);
                locationDetailsEl.addElement("usbnid").addText(String.valueOf(rs.getInt(colCount++)));
                locationDetailsEl.addElement("customerid").addText(String.valueOf(rs.getInt(colCount++)));
                locationDetailsEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("bbtvName").addText(bbtvName);                
                locationDetailsEl.addElement("locationMarket").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationStreet").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationCity").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationZip").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationState").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationContact").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));


                locationDetailsEl.addElement("locationContactTitle").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationCellPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationFax").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("locationSetupDoc").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("lineCount").addText(String.valueOf(rs.getInt(colCount++)));
                locationDetailsEl.addElement("dataRights").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("ITCompany").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("ITContact").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("ITPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("ITEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("POSCompany").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("POSContact").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("POSPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("POSEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("POSSystemType").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("POSServiceType").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("POSSetup").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("draftInsContact").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("draftInsPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("draftInsEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("cat5InsContact").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("cat5InsPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("cat5InsEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("contractDate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("startDate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("endDate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("notes").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("easternOffset").addText(HandlerUtils.nullToEmpty(eof));
                locationDetailsEl.addElement("dateCreated").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("active").addText(String.valueOf(rs.getInt(colCount++)));
                locationDetailsEl.addElement("sendToInstall").addText(String.valueOf(rs.getInt(colCount++)));
                locationDetailsEl.addElement("region").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                locationDetailsEl.addElement("bbtvBoxCount").addText(String.valueOf(rs.getInt(colCount++)));
                locationDetailsEl.addElement("accountIncharge").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                
                stmt                        = transconn.prepareStatement("SELECT Contact_Name, OfficePhone, CellPhone, Email FROM BOSS_Customer WHERE id = ?");
                stmt.setInt(1,rs.getInt(3));
                customerRS                  = stmt.executeQuery();
                if (customerRS.next()) {
                    Element customerContactEl
                                            = toAppend.addElement("customerContact");
                    customerContactEl.addElement("contactName").addText(HandlerUtils.nullToEmpty(customerRS.getString(1)));
                    customerContactEl.addElement("phone").addText(HandlerUtils.nullToEmpty(customerRS.getString(2)));
                    customerContactEl.addElement("cellPhone").addText(HandlerUtils.nullToEmpty(customerRS.getString(3)));
                    customerContactEl.addElement("email").addText(HandlerUtils.nullToEmpty(customerRS.getString(4)));
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(locationRS);
            close(stmt);
        }
    }

    private void getBillingInformation(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");

        String selectBillingAmount          = "SELECT id, rateCard, monthlyDiscount, setupDiscount, amount, setup, period, status, account FROM locationAccountMap WHERE location = ?";
        String selectAccountInfo            = "SELECT A.name, A.addrStreet, A.addrCity, A.addrState, A.addrZip, A.method, A.delivery, A.cycle FROM accounts A" +
                                            " WHERE A.id = ? ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, emailRS = null;

        try {
            stmt                            = transconn.prepareStatement(selectBillingAmount);
            stmt.setInt(1,locationId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int colCount                = 1;
                Element billingInfoEl       = toAppend.addElement("billingInfo");
                billingInfoEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                billingInfoEl.addElement("rateCard").addText(String.valueOf(rs.getInt(colCount++)));
                billingInfoEl.addElement("monthlyDiscount").addText(String.valueOf(rs.getDouble(colCount++)));
                billingInfoEl.addElement("setupDiscount").addText(String.valueOf(rs.getDouble(colCount++)));
                billingInfoEl.addElement("amount").addText(String.valueOf(rs.getDouble(colCount++)));
                billingInfoEl.addElement("setup").addText(String.valueOf(rs.getDouble(colCount++)));
                billingInfoEl.addElement("period").addText(String.valueOf(rs.getInt(colCount++)));
                billingInfoEl.addElement("status").addText(String.valueOf(rs.getInt(colCount++)));
                int accountId               = rs.getInt(colCount++);
                billingInfoEl.addElement("accountId").addText(String.valueOf(accountId));
                
                stmt                        = transconn.prepareStatement(selectAccountInfo);
                stmt.setInt(1,accountId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    colCount                = 1;
                    billingInfoEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    billingInfoEl.addElement("addrStreet").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    billingInfoEl.addElement("addrCity").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    billingInfoEl.addElement("addrState").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    billingInfoEl.addElement("addrZip").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    billingInfoEl.addElement("method").addText(String.valueOf(rs.getInt(colCount++)));
                    billingInfoEl.addElement("delivery").addText(String.valueOf(rs.getInt(colCount++)));
                    billingInfoEl.addElement("cycle").addText(String.valueOf(rs.getInt(colCount++)));
                }

                stmt                        = transconn.prepareStatement("SELECT id, contact, email, fax FROM accountEmailMap WHERE account = ?");
                stmt.setInt(1,accountId);
                emailRS                     = stmt.executeQuery();
                while (emailRS.next()) {
                    Element emailEl         = billingInfoEl.addElement("emails");
                    emailEl.addElement("id").addText(String.valueOf(emailRS.getInt(1)));
                    emailEl.addElement("contact").addText(HandlerUtils.nullToEmpty(emailRS.getString(2)));
                    emailEl.addElement("email").addText(HandlerUtils.nullToEmpty(emailRS.getString(3)));
                    emailEl.addElement("fax").addText(HandlerUtils.nullToEmpty(emailRS.getString(4)));
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(emailRS);
            close(stmt);
        }
    }

    private void addUpdateBOSSLocation(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");
        String locationName                 = HandlerUtils.getRequiredString(toHandle, "locationName");
        String bbtvName                     = HandlerUtils.getOptionalString(toHandle, "bbtvName");
        String locationMarket               = HandlerUtils.getOptionalString(toHandle, "locationMarket");
        String locationStreet               = HandlerUtils.getOptionalString(toHandle, "locationStreet");
        String locationCity                 = HandlerUtils.getOptionalString(toHandle, "locationCity");
        String locationZip                  = HandlerUtils.getOptionalString(toHandle, "locationZip");
        String locationState                = HandlerUtils.getOptionalString(toHandle, "locationState");
        String address                      = locationStreet+ ", " +locationCity+ ", " +locationZip+ ", " +locationState+ ", USA";
        String locationContact              = HandlerUtils.getOptionalString(toHandle, "locationContact");
        String locationContactTitle         = HandlerUtils.getOptionalString(toHandle, "locationContactTitle");
        String locationPhone                = HandlerUtils.getOptionalString(toHandle, "locationPhone");
        String locationCellPhone            = HandlerUtils.getOptionalString(toHandle, "locationCellPhone");
        String locationEmail                = HandlerUtils.getOptionalString(toHandle, "locationEmail");
        String locationFax                  = HandlerUtils.getOptionalString(toHandle, "locationFax");
        String locationSetupDoc             = HandlerUtils.getOptionalString(toHandle, "locationSetupDoc");
        int lineCount                       = HandlerUtils.getRequiredInteger(toHandle, "lineCount");
        String dataRightsString             = HandlerUtils.getOptionalString(toHandle, "dataRights");
        String ITCompany                    = HandlerUtils.getOptionalString(toHandle, "ITCompany");
        String ITContact                    = HandlerUtils.getOptionalString(toHandle, "ITContact");
        String ITPhone                      = HandlerUtils.getOptionalString(toHandle, "ITPhone");
        String ITEmail                      = HandlerUtils.getOptionalString(toHandle, "ITEmail");
        String POSCompany                   = HandlerUtils.getOptionalString(toHandle, "POSCompany");
        String POSContact                   = HandlerUtils.getOptionalString(toHandle, "POSContact");
        String POSPhone                     = HandlerUtils.getOptionalString(toHandle, "POSPhone");
        String POSEmail                     = HandlerUtils.getOptionalString(toHandle, "POSEmail");
        String POSSystemType                = HandlerUtils.getOptionalString(toHandle, "POSSystemType");
        String POSServiceType               = HandlerUtils.getOptionalString(toHandle, "POSServiceType");
        String POSSetup                     = HandlerUtils.getOptionalString(toHandle, "POSSetup");
        String draftInsContact              = HandlerUtils.getOptionalString(toHandle, "draftInsContact");
        String draftInsPhone                = HandlerUtils.getOptionalString(toHandle, "draftInsPhone");
        String draftInsEmail                = HandlerUtils.getOptionalString(toHandle, "draftInsEmail");
        String cat5InsContact               = HandlerUtils.getOptionalString(toHandle, "cat5InsContact");
        String cat5InsPhone                 = HandlerUtils.getOptionalString(toHandle, "cat5InsPhone");
        String cat5InsEmail                 = HandlerUtils.getOptionalString(toHandle, "cat5InsEmail");
        String contractDate                 = HandlerUtils.getOptionalString(toHandle, "contractDate");
        int active                          = HandlerUtils.getRequiredInteger(toHandle, "active");
        String notes                        = HandlerUtils.getOptionalString(toHandle, "notes");
        Double easternOffset                = Double.valueOf(HandlerUtils.getOptionalString(toHandle, "easternOffset"));
        boolean isConcessions               = HandlerUtils.getRequiredBoolean(toHandle, "isConcessions");        
        int custType                        = isConcessions ? 2 : 1;
        int dataRight                       = dataRightsString.equalsIgnoreCase("yes") ? 1 : 0;
        int sendToInstall                   = HandlerUtils.getRequiredInteger(toHandle, "sendToInstall");
        int bbtvBoxCount                    = HandlerUtils.getOptionalInteger(toHandle, "bbtvBoxCount");
        String region                       = HandlerUtils.getOptionalString(toHandle, "region");
        int regionId                        = 0;

        String selectCustomer               = "SELECT usbn_customer, Customer_Name FROM BOSS_Customer WHERE id = ?";
        String selectLocation               = "SELECT usbn_location FROM BOSS_Location WHERE id = ?";
        String getLastId                    = "SELECT LAST_INSERT_ID()";

        String insertBOSSLocation           = "INSERT INTO BOSS_Location (customer_id, location_name, location_market, location_street, location_city, location_zip, " +
                                            " location_state, location_contact, location_contact_title, location_ph, location_cell_ph, location_email, location_fax, location_setup_doc, " +
                                            " lineCount, Data_Rights, IT_Company, IT_Contact, IT_Phone, IT_Email, POS_Company, POS_Contact, POS_Phone, POS_Email, POS_SystemType, POS_ServiceType, " +
                                            " POS_Setup, draft_ins_contact, draft_ins_phone, draft_ins_email, cat5_ins_contact, cat5_ins_phone, cat5_ins_email, " +
                                            " contractDate, Notes, dateCreated, active, sendToInstall,region, bbtvBoxCount) " +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
        String closeLead                    = "UPDATE t_Pipeline SET LeadClosed = 1 WHERE id = ?";
        String updateUSBNLocationId         = "UPDATE BOSS_Location SET usbn_location = ? WHERE id = ?";
        
        String insertLocation               = "INSERT INTO location (name, boardname, addrStreet, addrCity, addrState, addrZip, easternOffset, customer, latitude, longitude, type, region) " +
                                            " VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ";
        String insertBar                    = "INSERT INTO bar (name,location) VALUES ('Main Bar',?)";
        String insertLocationDetails        = "INSERT INTO locationDetails (location, active, data,beerboard) VALUES (?, ?, ?,1)";
        String insertInstallationCheckList  = "INSERT INTO Installation_Checklist (location_id,lineCount,AccountID,view_state,pre_install_state,notes,scheduledDate) VALUES (?, ?, ?, 'New', 0,?,ADDDATE(DATE(now()),INTERVAL 30 DAY))";
        String insertITCheckList            = "INSERT INTO ITChecklist (location_id,AccountID,view_state,it_state,I48_configuration) VALUES (?, ?, 'New', 0, 'DHCP') ";
        String insertBevBox                 = "INSERT INTO bevBox (location, name, totalSystems, startSystem, version) VALUES (?,?,3,0,'5.01') ";
        
        String updateBOSSLocation           = "UPDATE BOSS_Location SET location_name = ?, location_market = ?, location_street = ?, location_city = ?, location_zip = ?, " +
                                            " location_state = ?, location_contact = ?, location_contact_title = ?, location_ph = ?, location_cell_ph = ?, location_email = ?, " +
                                            " location_fax = ?, location_setup_doc = ?, lineCount = ?, Data_Rights = ?, IT_Company = ?, IT_Contact = ?, IT_Phone = ?, IT_Email = ?, POS_Company = ?, " +
                                            " POS_Contact = ?, POS_Phone = ?, POS_Email = ?, POS_SystemType = ?, POS_ServiceType = ?, POS_Setup = ?, draft_ins_contact = ?, " +
                                            " draft_ins_phone = ?, draft_ins_email = ?, cat5_ins_contact = ?, cat5_ins_phone = ?, cat5_ins_email = ?, contractDate = ?, active = ?, sendToInstall = ?, Notes = ?, region =?, bbtvBoxCount = ? " +
                                            " WHERE id = ? ";
        String updateLocation               = "UPDATE location SET name = ?, addrStreet = ?, addrCity = ?, addrState = ?, addrZip = ?, easternOffset = ?, latitude = ?, " +
                                            " longitude = ?, type = ?, boardname = ?, region= ? WHERE id = ?";
        String updateLocationDetails        = "UPDATE locationDetails SET active = ?, data = ? WHERE location = ?";
        String updateBevBox                 = "UPDATE bevBox SET active = ? WHERE location = ?";
        String checkChanges                 = "SELECT POS_SystemType, lineCount, bbtvBoxCount FROM BOSS_Location WHERE id = ?";
        String checkLog                     = "SELECT id FROM  locationUpdateLog WHERE date=DATE(now()) AND location= ?";
        String insertLog                    = "INSERT INTO  locationUpdateLog (location,POSSystem,lineCount,bbtvCount, date)  VALUES (?, ?, ?, ?, DATE(now()));";
        String updateLog                    = "UPDATE  locationUpdateLog SET POSSystem = ?, lineCount = ?, bbtvCount = ? WHERE id = ?;";
        String insertBBTVMap                = "INSERT INTO  locationBeerBoardMap (location,wifi) VALUES(?,1);";
        
        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        logger.portalAction("addUpdateBOSSLocation");

        try {
            
            String url                      = "http://maps.googleapis.com/maps/api/geocode/json?address="+address+"&sensor=true";
            String data                     = getHttpData(new URL(URIUtil.encodeQuery(url)));            
            JSONObject json                 = new JSONObject(data);
            JSONArray ja1                   = json.getJSONArray("results");
            double latitude                 = 0.0, longitude = 0.0;
            for(int i=0;i<ja1.length();i++) {
                JSONObject geo              = ja1.getJSONObject(i).getJSONObject("geometry");
                JSONObject loc              = geo.getJSONObject("location");
                 //logger.debug("loc:"+loc);
                latitude                    = Double.valueOf(loc.getString("lat"));
                longitude                   = Double.valueOf(loc.getString("lng"));
            }
            
            // If no location Id was provided, we need to make a new location
            int colCount                    = 1, locationId = 0, usbnCustomerId = 0;
            String usbnCustomerName         = "";
            stmt                            = transconn.prepareStatement("SELECT id FROM BOSS_Location WHERE id = ? AND sendToInstall = 1");
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            if (!rs.next()) {
                Date timestamp              = new Date();
                SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                int customerId              = HandlerUtils.getRequiredInteger(toHandle, "customerId");
                stmt                    = transconn.prepareStatement(selectCustomer);
                stmt.setInt(1, customerId);
                rs                      = stmt.executeQuery();
                if (rs.next()) {
                    usbnCustomerId      = rs.getInt(1);
                    usbnCustomerName    = rs.getString(2);
                }
                if(region!=null && !region.equals("")){
                    regionId                        = getRegion(region,usbnCustomerId);
                }
                logger.debug(region+":"+regionId+":"+customerId);
                if (id <= 0) {
                    stmt                    = transconn.prepareStatement(insertBOSSLocation);
                    stmt.setInt(colCount++, customerId);
                    stmt.setString(colCount++, locationName);
                    stmt.setString(colCount++, locationMarket);
                    stmt.setString(colCount++, locationStreet);
                    stmt.setString(colCount++, locationCity);
                    stmt.setString(colCount++, locationZip);
                    stmt.setString(colCount++, locationState);
                    stmt.setString(colCount++, locationContact);
                    stmt.setString(colCount++, locationContactTitle);
                    stmt.setString(colCount++, locationPhone);
                    stmt.setString(colCount++, locationCellPhone);
                    stmt.setString(colCount++, locationEmail);
                    stmt.setString(colCount++, locationFax);
                    stmt.setString(colCount++, locationSetupDoc);
                    stmt.setInt(colCount++, lineCount);
                    stmt.setString(colCount++, dataRightsString);
                    stmt.setString(colCount++, ITCompany);
                    stmt.setString(colCount++, ITContact);
                    stmt.setString(colCount++, ITPhone);
                    stmt.setString(colCount++, ITEmail);
                    stmt.setString(colCount++, POSCompany);
                    stmt.setString(colCount++, POSContact);
                    stmt.setString(colCount++, POSPhone);
                    stmt.setString(colCount++, POSEmail);
                    stmt.setString(colCount++, POSSystemType);
                    stmt.setString(colCount++, POSServiceType);
                    stmt.setString(colCount++, POSSetup);
                    stmt.setString(colCount++, draftInsContact);
                    stmt.setString(colCount++, draftInsPhone);
                    stmt.setString(colCount++, draftInsEmail);
                    stmt.setString(colCount++, cat5InsContact);
                    stmt.setString(colCount++, cat5InsPhone);
                    stmt.setString(colCount++, cat5InsEmail);
                    stmt.setString(colCount++, contractDate);
                    stmt.setString(colCount++, notes);
                    stmt.setString(colCount++, newDateFormat.format(timestamp));
                    stmt.setInt(colCount++, active);
                    stmt.setInt(colCount++, sendToInstall);  
                    stmt.setInt(colCount++, regionId); 
                    stmt.setInt(colCount++, bbtvBoxCount); 
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(getLastId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        id                  = rs.getInt(1);
                        toAppend.addElement("locationId").addText(String.valueOf(id));
                    } else {
                        logger.dbError("first call to LAST_INSERT_ID in addBOSSLocation failed to return a result");
                        throw new HandlerException("Database Error");
                    }
                    
                    
                    stmt                    = transconn.prepareStatement(closeLead);
                    stmt.setInt(1, customerId);
                    stmt.executeUpdate();                    
                    
                } else {
                    String prePOS           = "";
                    int preLineCount        = 0, preBBTVCount = 0;
                    stmt                    = transconn.prepareStatement(checkChanges);
                    stmt.setInt(1, id);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        prePOS              = HandlerUtils.nullToEmpty(rs.getString(1));
                        preLineCount        = rs.getInt(2);
                        preBBTVCount        = rs.getInt(3);
                        
                    }
                    if(!prePOS.equals(POSSystemType) || preLineCount!=lineCount || preBBTVCount != bbtvBoxCount) {
                        int logId           = 0;
                          stmt                    = transconn.prepareStatement(checkLog);
                          stmt.setInt(1, id);
                          rs                      = stmt.executeQuery();
                          if (rs.next()) {
                              logId         = rs.getInt(1);
                              if(!prePOS.equals(POSSystemType)){
                                  stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET POSSystem = ? WHERE id = ?;");                              
                                  stmt.setString(1, prePOS);
                                  stmt.setInt(2, logId);
                                  stmt.executeUpdate();
                              }
                              if(preLineCount!=lineCount){
                                  stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET lineCount = ? WHERE id = ?;");                              
                                  stmt.setInt(1, preLineCount);
                                  stmt.setInt(2, logId);
                                  stmt.executeUpdate();
                              }
                              if( preBBTVCount != bbtvBoxCount){
                                  stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET bbtvCount = ? WHERE id = ?;");                              
                                  stmt.setInt(1, preBBTVCount);
                                  stmt.setInt(2, logId);
                                  stmt.executeUpdate();
                              }
                              
                          } else {
                              stmt                    = transconn.prepareStatement(insertLog);
                              stmt.setInt(1, id);
                              stmt.setString(2, prePOS);
                              stmt.setInt(3, preLineCount);
                              stmt.setInt(4, preBBTVCount);
                              stmt.executeUpdate();
                               
                              
                          }
                    }
                    stmt                    = transconn.prepareStatement(updateBOSSLocation);
                    stmt.setString(colCount++, locationName);
                    stmt.setString(colCount++, locationMarket);
                    stmt.setString(colCount++, locationStreet);
                    stmt.setString(colCount++, locationCity);
                    stmt.setString(colCount++, locationZip);
                    stmt.setString(colCount++, locationState);
                    stmt.setString(colCount++, locationContact);
                    stmt.setString(colCount++, locationContactTitle);
                    stmt.setString(colCount++, locationPhone);
                    stmt.setString(colCount++, locationCellPhone);
                    stmt.setString(colCount++, locationEmail);
                    stmt.setString(colCount++, locationFax);
                    stmt.setString(colCount++, locationSetupDoc);
                    stmt.setInt(colCount++, lineCount);
                    stmt.setString(colCount++, dataRightsString);
                    stmt.setString(colCount++, ITCompany);
                    stmt.setString(colCount++, ITContact);
                    stmt.setString(colCount++, ITPhone);
                    stmt.setString(colCount++, ITEmail);
                    stmt.setString(colCount++, POSCompany);
                    stmt.setString(colCount++, POSContact);
                    stmt.setString(colCount++, POSPhone);
                    stmt.setString(colCount++, POSEmail);
                    stmt.setString(colCount++, POSSystemType);
                    stmt.setString(colCount++, POSServiceType);
                    stmt.setString(colCount++, POSSetup);
                    stmt.setString(colCount++, draftInsContact);
                    stmt.setString(colCount++, draftInsPhone);
                    stmt.setString(colCount++, draftInsEmail);
                    stmt.setString(colCount++, cat5InsContact);
                    stmt.setString(colCount++, cat5InsPhone);
                    stmt.setString(colCount++, cat5InsEmail);
                    stmt.setString(colCount++, contractDate);
                    stmt.setInt(colCount++, active);
                    stmt.setInt(colCount++, sendToInstall);
                    stmt.setString(colCount++, notes); 
                    stmt.setInt(colCount++, regionId); 
                    stmt.setInt(colCount++, bbtvBoxCount); 
                    stmt.setInt(colCount++, id);
                    stmt.executeUpdate();
                    toAppend.addElement("locationId").addText(String.valueOf(id));                    
                    
                }
                
                if (sendToInstall > 0) {
                    stmt                    = transconn.prepareStatement(selectCustomer);
                    stmt.setInt(1, customerId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        usbnCustomerId      = rs.getInt(1);
                        usbnCustomerName    = rs.getString(2);
                    }

                    colCount                = 1;
                    stmt                    = transconn.prepareStatement(insertLocation);
                    stmt.setString(colCount++, locationName);
                    stmt.setString(colCount++, bbtvName);
                    stmt.setString(colCount++, locationStreet);
                    stmt.setString(colCount++, locationCity);
                    stmt.setString(colCount++, locationState);
                    stmt.setString(colCount++, locationZip);
                    stmt.setDouble(colCount++, easternOffset);
                    stmt.setInt(colCount++, usbnCustomerId);
                    stmt.setDouble(colCount++, latitude);
                    stmt.setDouble(colCount++, longitude);
                    stmt.setInt(colCount++, custType);
                    stmt.setInt(colCount++, regionId);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(getLastId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        locationId          = rs.getInt(1);
                    } else {
                        logger.dbError("first call to LAST_INSERT_ID in addUpdateBOSSLocation failed to return a result for adding usbn location");
                        throw new HandlerException("Database Error");
                    }

                    stmt                    = transconn.prepareStatement(updateUSBNLocationId);
                    stmt.setInt(1, locationId);
                    stmt.setInt(2, id);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(insertBar);
                    stmt.setInt(1, locationId);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(insertLocationDetails);
                    stmt.setInt(1, locationId);
                    stmt.setInt(2, active);
                    stmt.setInt(3, dataRight);
                    stmt.executeUpdate();
                    stmt                    = transconn.prepareStatement(insertBBTVMap);
                    stmt.setInt(1, locationId);                    
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement("SELECT install_Counter, SUBSTRING(install_year,3) FROM InstallationCounter");
                    rs                      = stmt.executeQuery();
                    String AccountID        = locationState + "";
                    if (rs.next()) {
                        AccountID           = locationState + rs.getString(1) + rs.getString(2);
                    }

                    stmt                    = transconn.prepareStatement(insertInstallationCheckList);
                    stmt.setInt(1, id);
                    stmt.setInt(2, lineCount);
                    stmt.setString(3, AccountID);
                    stmt.setString(4, notes);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(insertITCheckList);
                    stmt.setInt(1, id);
                    stmt.setString(2, AccountID);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(insertBevBox);
                    stmt.setInt(1, locationId);
                    stmt.setString(2, locationName);
                    stmt.executeUpdate();

                    StringBuilder newLocationEmail
                                            = new StringBuilder();
                    String subjectLine      = "A new Location " + locationName + " with Account ID " + AccountID + " for Customer " + usbnCustomerName + " has been created";
                    newLocationEmail.append("<tr style=font-size:small height=30><td colspan=4>A New Location has been added to the back office system</td></tr>");
                    newLocationEmail.append("<tr style=height: 15px><td colspan=10></td></tr>");
                    newLocationEmail.append("<tr style=font-size:small height=10px><td>Customer Name: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(usbnCustomerName)); // Customer Name
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Location Name: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(locationName)); // Location Name
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Location Contact: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(locationContact)); // Location Contact
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Location Contact Title: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(locationContactTitle)); // Location Contact Title
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Location Phone: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(locationPhone)); // End Time
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Location Email: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(locationEmail)); // Location Contact Title
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>IT Contact: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(ITContact)); // Location Contact Title
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>IT Phone: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(ITPhone)); // Location Contact Title
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>POS System Type: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(POSSystemType)); // Location Contact Title
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>POS Contact: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(POSContact)); // Location Contact Title
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Draft Installer Contact: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(draftInsContact)); // Location Contact Title
                    newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>CAT5 Installer Contact: </td><td colspan=3>");
                    newLocationEmail.append(HandlerUtils.nullToEmpty(cat5InsContact)); // Location Contact Title
                    newLocationEmail.append("</td></tr>");

                    stmt                    = transconn.prepareStatement("SELECT email FROM user WHERE customer = 0 AND notifyOnLocationStatus = 1");
                    rs                      = stmt.executeQuery();
                    while (rs.next()) {
                        sendMail("USBN New Location Alert", "tech@usbeveragenet.com", rs.getString(1), "support@usbeveragenet.com", subjectLine, "sendMail", newLocationEmail, false);
                    }
                }
                //logger.debug("Created a new BOSS Location");
                toAppend.addElement("locationId").addText(String.valueOf(id));
                String logMessage           = "Created BOSS Location for '" + locationName + "'";
                logger.portalDetail(callerId, "addBOSSLocation", 0, "BOSS_Location", id, logMessage, transconn);
                
            } else {
                
                 String prePOS           = "";
                    int preLineCount        = 0, preBBTVCount = 0;
                    stmt                    = transconn.prepareStatement(checkChanges);
                    stmt.setInt(1, id);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        prePOS              = HandlerUtils.nullToEmpty(rs.getString(1));
                        preLineCount        = rs.getInt(2);
                        preBBTVCount        = rs.getInt(3);
                        
                    }
                    if(!prePOS.equals(POSSystemType) || preLineCount!=lineCount || preBBTVCount != bbtvBoxCount) {
                        int logId           = 0;
                          stmt                    = transconn.prepareStatement(checkLog);
                          stmt.setInt(1, id);
                          rs                      = stmt.executeQuery();
                          if (rs.next()) {
                              logId         = rs.getInt(1);                              
                              if(!prePOS.equals(POSSystemType)){
                                  stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET POSSystem = ? WHERE id = ?;");                              
                                  stmt.setString(1, prePOS);
                                  stmt.setInt(2, logId);
                                  stmt.executeUpdate();
                              }
                              if(preLineCount!=lineCount){
                                  stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET lineCount = ? WHERE id = ?;");                              
                                  stmt.setInt(1, preLineCount);
                                  stmt.setInt(2, logId);
                                  stmt.executeUpdate();
                              }
                              if( preBBTVCount != bbtvBoxCount){
                                  stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET bbtvCount = ? WHERE id = ?;");                              
                                  stmt.setInt(1, preBBTVCount);
                                  stmt.setInt(2, logId);
                                  stmt.executeUpdate();
                              }
                          } else {
                              stmt                    = transconn.prepareStatement(insertLog);
                              stmt.setInt(1, id);
                              stmt.setString(2, prePOS);
                              stmt.setInt(3, preLineCount);
                              stmt.setInt(4, preBBTVCount);
                              stmt.executeUpdate();
                               
                              
                          }
                    }
                
                stmt                        = transconn.prepareStatement("SELECT bC.usbn_customer FROM BOSS_Location bL LEFT  JOIN BOSS_Customer bC ON bC.id=customer_id  WHERE bL.id=?;");
                stmt.setInt(1, id);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    usbnCustomerId          = rs.getInt(1);
                }

                if(region!=null && !region.equals("")){
                    regionId                = getRegion(region,usbnCustomerId);
                }
                //logger.debug(region+":"+regionId+":"+usbnCustomerId);
                stmt                        = transconn.prepareStatement(updateBOSSLocation);
                stmt.setString(colCount++, locationName);
                stmt.setString(colCount++, locationMarket);
                stmt.setString(colCount++, locationStreet);
                stmt.setString(colCount++, locationCity);
                stmt.setString(colCount++, locationZip);
                stmt.setString(colCount++, locationState);
                stmt.setString(colCount++, locationContact);
                stmt.setString(colCount++, locationContactTitle);
                stmt.setString(colCount++, locationPhone);
                stmt.setString(colCount++, locationCellPhone);
                stmt.setString(colCount++, locationEmail);
                stmt.setString(colCount++, locationFax);
                stmt.setString(colCount++, locationSetupDoc);
                stmt.setInt(colCount++, lineCount);
                stmt.setString(colCount++, dataRightsString);
                stmt.setString(colCount++, ITCompany);
                stmt.setString(colCount++, ITContact);
                stmt.setString(colCount++, ITPhone);
                stmt.setString(colCount++, ITEmail);
                stmt.setString(colCount++, POSCompany);
                stmt.setString(colCount++, POSContact);
                stmt.setString(colCount++, POSPhone);
                stmt.setString(colCount++, POSEmail);
                stmt.setString(colCount++, POSSystemType);
                stmt.setString(colCount++, POSServiceType);
                stmt.setString(colCount++, POSSetup);
                stmt.setString(colCount++, draftInsContact);
                stmt.setString(colCount++, draftInsPhone);
                stmt.setString(colCount++, draftInsEmail);
                stmt.setString(colCount++, cat5InsContact);
                stmt.setString(colCount++, cat5InsPhone);
                stmt.setString(colCount++, cat5InsEmail);
                stmt.setString(colCount++, contractDate);
                stmt.setInt(colCount++, active);
                stmt.setInt(colCount++, sendToInstall);
                stmt.setString(colCount++, notes);
                stmt.setInt(colCount++, regionId);
                stmt.setInt(colCount++, bbtvBoxCount); 
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                toAppend.addElement("locationId").addText(String.valueOf(id));

                stmt                        = transconn.prepareStatement(selectLocation);
                stmt.setInt(1, id);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(updateLocation);
                    stmt.setString(1, locationName);
                    stmt.setString(2, locationStreet);
                    stmt.setString(3, locationCity);
                    stmt.setString(4, locationState);
                    stmt.setString(5, locationZip);
                    stmt.setDouble(6, easternOffset);
                    stmt.setDouble(7, latitude);
                    stmt.setDouble(8, longitude);
                    stmt.setInt(9, custType);
                    stmt.setString(10, bbtvName);
                    stmt.setInt(11, regionId);
                    stmt.setInt(12, rs.getInt(1));                    
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(updateLocationDetails);
                    stmt.setInt(1, active);
                    stmt.setInt(2, dataRight);
                    stmt.setInt(3, rs.getInt(1));
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(updateBevBox);
                    stmt.setInt(1, active);
                    stmt.setInt(2, rs.getInt(1));
                    stmt.executeUpdate();
                }
                
                //logger.debug("Update BOSS Location");
                String logMessage           = "Updated BOSS Location for '" + locationName + "'";
                logger.portalDetail(callerId, "updateBOSSLocation", 0, "BOSS_Location", id, logMessage, transconn);
            }
        } catch (SQLException sqle) {            
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } catch (Exception e) {
            logger.debug(e.getMessage());
            logger.dbError("JSON/URI error: " + e.getMessage());
            throw new HandlerException(e);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
    private int getRegion(String region,int customer) throws HandlerException {

        PreparedStatement stmt              = null;
        ResultSet rs                = null;
        int regionId                = 0;
        try {
            logger.debug(region+":"+customer);
            String selectProductSetName = " SELECT id FROM regionSet WHERE name = ? AND customer =? ";
            stmt = transconn.prepareStatement(selectProductSetName);
            stmt.setString(1, region.trim());
            stmt.setInt(2,customer);
            rs = stmt.executeQuery();
            if (!rs.next()) {
                String insertNewRegionSet = " INSERT INTO regionSet (name,customer) VALUES (?,?) ";
                stmt = transconn.prepareStatement(insertNewRegionSet);
                stmt.setString(1, region.trim());
                stmt.setInt(2, customer);
                stmt.executeUpdate();
                
                stmt = transconn.prepareStatement("SELECT LAST_INSERT_ID()");
                rs = stmt.executeQuery();
                if (rs.next()) {
                    regionId = rs.getInt(1);
                }
            } else {
                regionId = rs.getInt(1);
            }
            
         } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
        return regionId;
    }

    private void getChecklist(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        boolean installChecklist            = HandlerUtils.getOptionalBoolean(toHandle, "installChecklist");
        boolean itChecklist                 = HandlerUtils.getOptionalBoolean(toHandle, "itChecklist");
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sqlInstallChecklist          = " SELECT IFNULL(plu_obtained,'No'), lineCount, IFNULL(CAT_5_installed,'No'), beer_tube_diameter, scheduledDate, " +
                                            " IFNULL(enter_inv,'No'), IFNULL(3_day_sales_audit,'No'), harpagon_required, turbine_collectors, " +
                                            " IFNULL(installer_complete,'No'), installDate, installer_org, installer_name, installer_phone, installer_email, " +
                                            " installer_fax, REPLACE(notes,'\r\n','---') FROM Installation_Checklist WHERE location_id = ? ";
        String sqlITChecklist               = " SELECT IFNULL(java_installed,'No'), IFNULL(access_ip_address,'No'), IFNULL(tcp_port_open,'No'), IFNULL(gateway_download,'No'), " +
                                            " IFNULL(gateway_installed,'No'), IFNULL(sales_export_activity,'No'), IFNULL(sales_exp_act_verified,'No'), IFNULL(sch_task_setup,'No'), " +
                                            " REPLACE(notes,'\r\n','---') FROM ITChecklist WHERE location_id = ? ";

        try {
            if (installChecklist) {
                stmt                        = transconn.prepareStatement(sqlInstallChecklist);
                stmt.setInt(1,locationId);
                rs                          = stmt.executeQuery();
                getInstallChecklistXML(toAppend, rs);
            }
            if (itChecklist) {
                stmt                        = transconn.prepareStatement(sqlITChecklist);
                stmt.setInt(1,locationId);
                rs                          = stmt.executeQuery();
                getITChecklistXML(toAppend, rs);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getInstallChecklistXML(Element toAppend, ResultSet rs) throws SQLException {

        while (rs.next()) {
            int colCount                    = 1;
            Element installChecklistEl      = toAppend.addElement("installChecklist");
            installChecklistEl.addElement("pluObtained").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("metersQuantity").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("cat5Installed").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("tubeDiameter").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("scheduledDate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("inventory").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("salesAudit").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("bevBoxCount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("tcCount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("installComplete").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("installDate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("installerCompany").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("installerName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("installerPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("installerEmail").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("installerFax").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            installChecklistEl.addElement("notes").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void getITChecklistXML(Element toAppend, ResultSet rs) throws SQLException {

        while (rs.next()) {
            int colCount                    = 1;
            Element itChecklistEl           = toAppend.addElement("itChecklist");
            itChecklistEl.addElement("javaInstalled").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("accessToIP").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("portOpen").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("dnsAccess").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("gatewayInstalled").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("exportSetup").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("exportSetupVerified").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("restartTask").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            itChecklistEl.addElement("notes").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void updateChecklist(Element toHandle, Element toAppend) throws HandlerException {
        
        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        Iterator i                          = toHandle.elementIterator("installChecklist");
        Iterator it                         = toHandle.elementIterator("itChecklist");
        boolean itChecklistComplete         = false, installChecklistComplete = false;
        while (i.hasNext()) {
            Element installChecklist        = (Element) i.next();
            installChecklistComplete        = updateInstallChecklist(callerId, locationId, installChecklist, toAppend);
        }        
        while (it.hasNext()) {
            Element itChecklist             = (Element) it.next();
            itChecklistComplete             = updateITChecklist(callerId, locationId, itChecklist, toAppend);
        }        


        PreparedStatement stmt              = null;

        if (itChecklistComplete) {
            String sqlLocationDetails       = " UPDATE locationDetails lD LEFT JOIN BOSS_Location BL ON BL.usbn_location = lD.location " +
                                            " SET soldUp = 1 WHERE BL.id = ?";
            try {
                stmt                        = transconn.prepareStatement(sqlLocationDetails);
                stmt.setInt(1,locationId);
                stmt.executeUpdate();                 
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
                throw new HandlerException(sqle);
            } finally {
                close(stmt);
            }
        }

        if (installChecklistComplete) {
            ResultSet rs                    = null;

            String updateLocationDetails    = " UPDATE locationDetails lD LEFT JOIN BOSS_Location BL ON BL.usbn_location = lD.location " +
                                            " SET preInstall = 1, scheduled = 1, pouredUp = 1, billing = 1 WHERE BL.id = ? ";
            try {
                stmt                        = transconn.prepareStatement(updateLocationDetails);
                stmt.setInt(1,locationId);
                stmt.executeUpdate();
                                
                
                stmt                        = transconn.prepareStatement("SELECT id FROM Bill WHERE location_id = ?");
                stmt.setInt(1,locationId);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {
                    stmt                    = transconn.prepareStatement("SELECT DATE_FORMAT(installDate, '%m/%d/%Y') FROM Installation_Checklist WHERE location_id = ?");
                    stmt.setInt(1,locationId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        createSecondInvoice(locationId, rs.getString(1));
                    }

                    Date timestamp          = new Date();
                    SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String sqlBillChecklist = " INSERT INTO Bill (location_id, Bill_State, date_created) VALUES(?, 1, ?) ";
                    stmt                    = transconn.prepareStatement(sqlBillChecklist);
                    stmt.setInt(1,locationId);
                    stmt.setString(2, newDateFormat.format(timestamp));
                    stmt.executeUpdate();

                    StringBuilder newLocationEmail
                                            = new StringBuilder();
                    String subjectLine      = "";
                    stmt                    = transconn.prepareStatement("SELECT BC.Customer_Name, BL.location_name, a.name, lAD.amount, lAD.setup FROM BOSS_Location BL " +
                                            " LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN locationAccountMap lAD on lAD.location = BL.id " +
                                            " LEFT JOIN accounts a ON a.id = lAD.account WHERE BL.id = ?;");
                    stmt.setInt(1,locationId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        newLocationEmail.append("<tr style=font-size:small height=30><td colspan=4>A New Location has been added to the back office system</td></tr>");
                        newLocationEmail.append("<tr style=height: 15px><td colspan=10></td></tr>");
                        newLocationEmail.append("<tr style=font-size:small height=10px><td>Customer Name: </td><td colspan=3>");
                        newLocationEmail.append(HandlerUtils.nullToEmpty(rs.getString(1))); // Customer Name
                        newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Location Name: </td><td colspan=3>");
                        newLocationEmail.append(HandlerUtils.nullToEmpty(rs.getString(2))); // Location Name
                        newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Account: </td><td colspan=3>");
                        newLocationEmail.append(HandlerUtils.nullToEmpty(rs.getString(3))); // Account Name
                        newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Monthly Service Fee: </td><td colspan=3>");
                        newLocationEmail.append(HandlerUtils.nullToEmpty(rs.getString(4))); // Monthly Service Fee
                        newLocationEmail.append("</td></tr><tr style=font-size:small height=10px><td>Setup Fee: </td><td colspan=3>");
                        newLocationEmail.append(HandlerUtils.nullToEmpty(rs.getString(5))); // Setup Fee
                        newLocationEmail.append("</td></tr>");
                        subjectLine  = "A new Location " + rs.getString(2) + " for Customer " + rs.getString(1) + " has entered into the Billing Phase";
                        sendMail("USBN New Billing Alert", "tech@usbeveragenet.com", "newbilling@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", newLocationEmail, false);
                    }
                }
                
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
                throw new HandlerException(sqle);
            } finally {
                close(stmt);
                close(rs);
            }
        }
        String logMessage                   = "Updated checklist for '" + locationId + "'";
        logger.portalDetail(callerId, "updateChecklist", 0, "BOSS_Location", locationId, logMessage, transconn);
    }

    private void reviseLocationAmount(int locationId, int lineCounts) throws HandlerException {

        String getLocationRates             = "SELECT rC.minimum, rC.amount, rC.setup, rC.amountIncrement, rC.setupIncrement, rC.multiples, " +
                                            " lAM.monthlyDiscount, lAM.setupDiscount FROM locationAccountMap lAM LEFT JOIN rateCard rC ON rC.id = lAM.rateCard " +
                                            " WHERE lAM.location = ? ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            double actualAmount             = 0.0, actualSetup = 0.0;
            stmt                            = transconn.prepareStatement(getLocationRates);
            stmt.setInt(1,locationId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int counter                 = 1;
                int minimumLines            = rs.getInt(counter++);
                double startingAmount       = rs.getDouble(counter++);
                double startingSetup        = rs.getDouble(counter++);
                double amountIncrement      = rs.getDouble(counter++);
                double setupIncrement       = rs.getDouble(counter++);
                int multiples               = rs.getInt(counter++);
                double monthlyDiscount      = rs.getDouble(counter++);
                double setupDiscount        = rs.getDouble(counter++);                
                if (lineCounts > minimumLines) {
                    int totalAdditionalLines= lineCounts - minimumLines;
                    int lineExcess          = totalAdditionalLines % multiples;
                    actualAmount            = startingAmount + (amountIncrement * (totalAdditionalLines - lineExcess));
                    actualSetup             = startingSetup + (setupIncrement * (totalAdditionalLines - lineExcess));
                    if (lineExcess > 0) {
                        actualAmount        += amountIncrement * multiples;
                        actualSetup         += setupIncrement * multiples;
                    }
                } else {
                    actualAmount            = startingAmount;
                    actualSetup             = startingSetup;
                }
                actualAmount                = actualAmount - monthlyDiscount;
                actualSetup                 = actualSetup - setupDiscount;
                
                
                stmt                        = transconn.prepareStatement("UPDATE locationAccountMap SET amount = ?, setup = ? WHERE location = ?");
                stmt.setDouble(1, actualAmount);
                stmt.setDouble(2, actualSetup);
                stmt.setInt(3, locationId);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement("UPDATE locationInvoiceItems SET amount = ? WHERE location = ? AND item = 1");
                stmt.setDouble(1, actualAmount);
                stmt.setInt(2, locationId);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement("UPDATE locationInvoiceItems SET amount = ? WHERE location = ? AND item IN (2, 3)");
                stmt.setDouble(1, actualSetup / 2);
                stmt.setInt(2, locationId);
                stmt.executeUpdate();
                
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void createSecondInvoice(int locationId, String date) throws HandlerException {

        String getNextInvoiceNumber         = "SELECT invoiceNumber FROM invoice ORDER BY invoiceNumber DESC LIMIT 1";
        String selectAccounts               = "SELECT A.id, A.name, A.delivery, A.cycle, BL.location_name, lAM.amount, lAM.setup FROM accounts A " +
                                            " LEFT JOIN locationAccountMap lAM ON lAM.account = A.id LEFT JOIN BOSS_Location BL ON BL.id = lAM.location " +
                                            " WHERE BL.id = ? ";
        String selectAccountCredits         = "SELECT aC.id, aC.amount, aC.details FROM accountCredit aC WHERE aC.active = 1 AND aC.account = ? AND aC.location = ?";
        String selectInvoiceSetupPayment    = "SELECT amount FROM invoiceDetails WHERE item = 2 AND location = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        String insertInvoice                = "INSERT INTO invoice (account, invoiceNumber, date, delivery) VALUES (?, ?, ?, ?) ";
        String insertInvoiceDetails         = "INSERT INTO invoiceDetails (invoice, location, item, amount, details) VALUES (?, ?, ?, ?, ?) ";
        String updateAccountCredit          = "UPDATE accountCredit SET active = 0 WHERE id = ? ";

        StringBuilder invoiceListHeader     = new StringBuilder();
        StringBuilder invoiceList           = new StringBuilder();
        StringBuilder tempInvoiceList       = new StringBuilder();

        invoiceListHeader.append("<tr style=font-size:small height=30><td style='width=30%; border-bottom-style: solid; border-bottom-width: thin'>Location</td>");
        invoiceListHeader.append("<td align=center style='width=50%; border-bottom-style: solid; border-bottom-width: thin'>Item</td>");
        invoiceListHeader.append("<td align=right style='width=20%; border-bottom-style: solid; border-bottom-width: thin'>Amount</td></tr>");

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, invoiceRS = null;

        try {
            int invoiceNumber               = 0;
            double invoiceTotalAmount       = 0.0;
            int invoiceId                   = 0;

            stmt                            = transconn.prepareStatement(getNextInvoiceNumber);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                invoiceNumber               = rs.getInt(1) + 1;
            }

            stmt                            = transconn.prepareStatement(selectAccounts);
            stmt.setInt(1,locationId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int accountId               = rs.getInt(1);
                String accountName          = rs.getString(2);
                int delivery                = rs.getInt(3);
                int cycle                   = rs.getInt(4);
                String locationName         = rs.getString(5);
                double monthly              = rs.getDouble(6);
                double setup                = rs.getDouble(7);

                // Creating a new invoice
                SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd");
                Calendar dateCal            = Calendar.getInstance();

                stmt                        = transconn.prepareStatement(insertInvoice);
                stmt.setInt(1, accountId);
                stmt.setInt(2, invoiceNumber);
                stmt.setString(3, newDateFormat.format(dateCal.getTime()));
                stmt.setInt(4, delivery);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                invoiceRS                   = stmt.executeQuery();
                if (invoiceRS.next()) {
                    invoiceId               = invoiceRS.getInt(1);

                } else {
                    logger.dbError("first call to LAST_INSERT_ID in createSecondInvoice failed to return a result");
                    throw new HandlerException("Database Error");
                }

                double firstCharge          = 0.0;
                stmt                        = transconn.prepareStatement(selectInvoiceSetupPayment);
                stmt.setInt(1, locationId);
                invoiceRS                   = stmt.executeQuery();
                while (invoiceRS.next()) {
                    firstCharge             += invoiceRS.getDouble(1);
                }
                
                double secondSetup          = setup - firstCharge;
                
                // Inserting second setup fee details
                if (secondSetup > 0.0) {
                    stmt                    = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, locationId);
                    stmt.setInt(3, 3);
                    stmt.setDouble(4, secondSetup);
                    stmt.setString(5, getItemDescription(3, cycle, date));
                    stmt.executeUpdate();
                    invoiceTotalAmount      += secondSetup;

                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                    tempInvoiceList.append(String.valueOf(locationName)); // Location Name
                    tempInvoiceList.append("</td><td align=center>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(getItemDescription(3, cycle, date))); // Second Setup Fee
                    tempInvoiceList.append("</td><td align=right>");

                    tempInvoiceList.append(nf.format(secondSetup)); // Amount
                    tempInvoiceList.append("</td></tr>");
                }

                // Inserting second setup fee details
                String proratedValues       = calculateProrateAmount(locationId, monthly, cycle);
                double prorateAmount        = Double.valueOf(proratedValues.split("\\|")[1]);
                if (prorateAmount > 0.0) {

                    stmt                    = transconn.prepareStatement("UPDATE locationInvoiceItems SET amount = ? WHERE location = ? AND item = 4;");
                    stmt.setDouble(1, prorateAmount);
                    stmt.setInt(2, locationId);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, locationId);
                    stmt.setInt(3, 4);
                    stmt.setDouble(4, prorateAmount);
                    stmt.setString(5, getItemDescription(4, cycle, proratedValues.split("\\|")[0]));
                    stmt.executeUpdate();
                    invoiceTotalAmount      += prorateAmount;

                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(locationName)); // Location Name
                    tempInvoiceList.append("</td><td align=center>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(getItemDescription(4, cycle, proratedValues.split("\\|")[0]))); // Prorate Period
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(nf.format(prorateAmount)); // Amount
                    tempInvoiceList.append("</td></tr>");
                }
                boolean sendNextMonthInvoice=false;

                Calendar today              = Calendar.getInstance();
                int todayMonth              = today.getTime().getMonth() + 1;
                switch (cycle){
                    case 1:
                        sendNextMonthInvoice=true;
                        break;
                    case 2:
                        if ((12 - todayMonth) == 0) {
                            sendNextMonthInvoice=true;
                        } else if ((3 - todayMonth) >= 0) {
                            sendNextMonthInvoice=true;
                        } else if ((6 - todayMonth) >= 0) {
                            sendNextMonthInvoice=true;
                        } else if ((7 - todayMonth) >= 0) {
                            sendNextMonthInvoice=true;
                        }
                        break;
                    case 3:
                        if ((12 - todayMonth) >= 0) {
                            sendNextMonthInvoice=true;
                        } else if ((6 - todayMonth) >= 0) {
                            sendNextMonthInvoice=true;
                        }
                        break;
                    case 4:
                        break;
                }

                double nextCycleAmount      = calculateMonthlyAmount(monthly, cycle);
                if (sendNextMonthInvoice) {
                    // Inserting next monthly fee
                    stmt                    = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, locationId);
                    stmt.setInt(3, 1);
                    stmt.setDouble(4, nextCycleAmount);
                    stmt.setString(5, getItemDescription(1, cycle, date));
                    stmt.executeUpdate();
                    invoiceTotalAmount      += nextCycleAmount;

                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(locationName)); // Location Name
                    tempInvoiceList.append("</td><td align=center>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(getItemDescription(1, cycle, date))); // Monthly Period
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(nf.format(nextCycleAmount)); // Amount
                    tempInvoiceList.append("</td></tr>");
                }

                stmt                        = transconn.prepareStatement(selectAccountCredits);
                stmt.setInt(1, accountId);
                stmt.setInt(2, locationId);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    int creditId            = rs.getInt(1);

                    double creditAmount     = rs.getDouble(2);
                    String creditDetails    = rs.getString(3);

                    stmt                    = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, locationId);
                    stmt.setInt(3, 6);
                    stmt.setDouble(4, creditAmount);
                    stmt.setString(5, creditDetails);
                    stmt.executeUpdate();

                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(locationName));
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(creditDetails)); // Date
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(nf.format(creditAmount)); // Amount
                    tempInvoiceList.append("</td></tr>");

                    stmt                    = transconn.prepareStatement(updateAccountCredit);
                    stmt.setInt(1, creditId);
                    stmt.executeUpdate();

                    invoiceTotalAmount      += creditAmount;
                }

                //Updating the invoice with the total invoice amount
                stmt                        = transconn.prepareStatement("UPDATE invoice SET amount = ?, outstanding = ? WHERE id = ?");
                stmt.setDouble(1, invoiceTotalAmount);
                stmt.setDouble(2, invoiceTotalAmount);
                stmt.setInt(3, invoiceId);
                stmt.executeUpdate();

                if (tempInvoiceList.length() != 0) {
                    invoiceList.append("<tr style='font-size:small;' height=15><td colspan=2>Account : ");
                    invoiceList.append(HandlerUtils.nullToEmpty(accountName)); // Account Name
                    invoiceList.append("</td></tr>");
                    invoiceList.append("<tr style='font-size:small;' height=15><td colspan=2>Invoice Number : ");
                    invoiceList.append(String.valueOf(invoiceNumber)); // Invoice Number
                    invoiceList.append("</td></tr>");
                    invoiceList.append("<tr style='font-size:small;' height=15><td colspan=2>Total Invoice amount : ");
                    invoiceList.append(nf.format(invoiceTotalAmount)); // Pico Version
                    invoiceList.append("</td></tr>");
                    invoiceList.append("");
                    invoiceList.append(invoiceListHeader);
                    invoiceList.append(tempInvoiceList);
                    invoiceList.append("<tr><td colspan=4 style='border-bottom-style: solid; border-bottom-width: thin;'></td></tr>");
                }
            }

            String subjectLine              = "New Invoices are Pending Approval";
            sendMail("USBN New Invoice Alert", "billing@usbeveragenet.com", "newinvoices@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", invoiceList, false);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(invoiceRS);
            close(rs);
            close(stmt);
        }
    }

    private boolean updateInstallChecklist(int callerId, int locationId, Element toHandle, Element toAppend) throws HandlerException {
        boolean installChecklistComplete    = false;
        int installScheduled                = HandlerUtils.getRequiredInteger(toHandle, "installScheduled");
        String pluObtained                  = HandlerUtils.getRequiredString(toHandle, "pluObtained");
        int lineCount                       = HandlerUtils.getRequiredInteger(toHandle, "metersQuantity");
        String cat5Installed                = HandlerUtils.getRequiredString(toHandle, "cat5Installed");
        String tubeDiameter                 = HandlerUtils.getOptionalString(toHandle, "tubeDiameter");
        String scheduledDate                = HandlerUtils.getOptionalString(toHandle, "scheduledDate");
        String inventory                    = HandlerUtils.getRequiredString(toHandle, "inventory");
        String salesAudit                   = HandlerUtils.getRequiredString(toHandle, "salesAudit");
        int bevBoxCount                  = HandlerUtils.getOptionalInteger(toHandle, "bevBoxCount");
        String tcCount                      = HandlerUtils.getOptionalString(toHandle, "tcCount");
        String installDate                  = HandlerUtils.getOptionalString(toHandle, "installDate");
        String installerCompany             = HandlerUtils.getOptionalString(toHandle, "installerCompany");
        String installerName                = HandlerUtils.getOptionalString(toHandle, "installerName");
        String installerPhone               = HandlerUtils.getOptionalString(toHandle, "installerPhone");
        String installerEmail               = HandlerUtils.getOptionalString(toHandle, "installerEmail");
        String installerFax                 = HandlerUtils.getOptionalString(toHandle, "installerFax");
        String installComplete              = HandlerUtils.getOptionalString(toHandle, "installComplete");
        String notes                        = HandlerUtils.getOptionalString(toHandle, "notes");
        String[] boolCheck                  = new String[5], nullCheck = new String[10];

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        String sqlInstallChecklist          = " UPDATE Installation_Checklist SET installScheduled=?, plu_obtained=?, lineCount=?, CAT_5_installed=?, " +
                                            " beer_tube_diameter=?, scheduledDate=?, enter_inv=?, 3_day_sales_audit=?, harpagon_required=?, turbine_collectors=?, " +
                                            " installDate=?, installer_org=?, installer_name=?, installer_phone=?, installer_email=?, installer_fax=?, " +
                                            "installer_complete=?, notes = ? WHERE location_id = ? ";
        String updateLocationDates          = " UPDATE BOSS_Location BL LEFT JOIN locationAccountMap lAM ON lAM.location = BL.id " +
                                            " SET BL.startDate = ?, BL.endDate = ADDDATE(?, INTERVAL lAM.period DAY) WHERE BL.id = ? ";
        String checkLog                     = "SELECT id FROM  locationUpdateLog WHERE date=DATE(now()) AND location= ?";
        String insertLog                    = "INSERT INTO  locationUpdateLog (location,bevBoxCount, date)  VALUES (?, ?, DATE(now()));";
        
        try {

            stmt                            = transconn.prepareStatement("SELECT lineCount,harpagon_required FROM Installation_Checklist WHERE location_id = ?");
            stmt.setInt(1,locationId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int oldLineCount            = rs.getInt(1);
                int oldBevBoxCount          = rs.getInt(2);
                logger.debug("Old Line Count: " + oldLineCount);
                if (lineCount != oldLineCount) {
                    logger.debug("new Line Count: " + lineCount);
                    reviseLocationAmount(locationId, lineCount);
                }
                if(bevBoxCount <0){
                    bevBoxCount             = 0;
                }
                if (bevBoxCount != oldBevBoxCount) {
                    stmt                    = transconn.prepareStatement(checkLog);
                    stmt.setInt(1, locationId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        int logId           = rs.getInt(1);
                        stmt                = transconn.prepareStatement("UPDATE  locationUpdateLog SET bevBoxCount = ? WHERE id = ?;");                              
                          stmt.setInt(1, oldBevBoxCount);                              
                          stmt.setInt(2, logId);
                          stmt.executeUpdate();                          
                    } else {
                        stmt                = transconn.prepareStatement(insertLog);
                        stmt.setInt(1, locationId);
                        stmt.setDouble(2, oldBevBoxCount);
                        stmt.executeUpdate();                        
                    }
                
                }
            }
            
            int colCount                    = 1;
            stmt                            = transconn.prepareStatement(sqlInstallChecklist);
            stmt.setInt(colCount++,installScheduled);
            stmt.setString(colCount++, pluObtained);     boolCheck[0] = pluObtained;
            stmt.setInt(colCount++, lineCount);          
            stmt.setString(colCount++, cat5Installed);   boolCheck[1] = cat5Installed;
            stmt.setString(colCount++, tubeDiameter);    nullCheck[0] = tubeDiameter;
            stmt.setString(colCount++, scheduledDate);   nullCheck[1] = scheduledDate;
            stmt.setString(colCount++, inventory);       boolCheck[2] = inventory;
            stmt.setString(colCount++, salesAudit);      boolCheck[3] = salesAudit;
            stmt.setInt(colCount++, bevBoxCount);        nullCheck[2] = String.valueOf(bevBoxCount);
            stmt.setString(colCount++, tcCount);         nullCheck[3] = tcCount;
            stmt.setString(colCount++, installDate);     nullCheck[4] = installDate;
            stmt.setString(colCount++, installerCompany);nullCheck[5] = installerCompany;
            stmt.setString(colCount++, installerName);   nullCheck[6] = installerName;
            stmt.setString(colCount++, installerPhone);  nullCheck[7] = installerPhone;
            stmt.setString(colCount++, installerEmail);  nullCheck[8] = installerEmail;
            stmt.setString(colCount++, installerFax);    nullCheck[9]= installerFax;
            stmt.setString(colCount++, installComplete); boolCheck[4] = installComplete;
            stmt.setString(colCount++, notes);
            stmt.setInt(colCount++,locationId);
            stmt.executeUpdate();

            stmt                            = transconn.prepareStatement(updateLocationDates);
            stmt.setString(1, installDate);
            stmt.setString(2, installDate);
            stmt.setInt(3,locationId);
            stmt.executeUpdate();

            if (installScheduled > 0) {
                String updateLocationDetails= " UPDATE locationDetails lD LEFT JOIN BOSS_Location BL ON BL.usbn_location = lD.location " +
                                            " SET scheduled = 1 WHERE BL.id = ? ";
                stmt                        = transconn.prepareStatement(updateLocationDetails);
                stmt.setInt(1,locationId);
                stmt.executeUpdate();
            }

            installChecklistComplete        = checkCompletion(boolCheck, nullCheck);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            return installChecklistComplete;
        }
    }
    
    private boolean updateITChecklist(int callerId, int locationId, Element toHandle, Element toAppend) throws HandlerException {
        boolean itChecklistComplete         = false;
        String javaInstalled                = HandlerUtils.getRequiredString(toHandle, "javaInstalled");
        String accessToIP                   = HandlerUtils.getRequiredString(toHandle, "accessToIP");
        String portOpen                     = HandlerUtils.getRequiredString(toHandle, "portOpen");
        String dnsAccess                    = HandlerUtils.getRequiredString(toHandle, "dnsAccess");
        String gatewayInstalled             = HandlerUtils.getRequiredString(toHandle, "gatewayInstalled");
        String exportSetup                  = HandlerUtils.getRequiredString(toHandle, "exportSetup");
        String exportSetupVerified          = HandlerUtils.getRequiredString(toHandle, "exportSetupVerified");
        String restartTask                  = HandlerUtils.getRequiredString(toHandle, "restartTask");
        String notes                        = HandlerUtils.getOptionalString(toHandle, "notes");
        String[] boolCheck                  = new String[8], nullCheck = new String[0];
        
        PreparedStatement stmt              = null;

        String sqlITChecklist               = " UPDATE ITChecklist SET java_installed=?, access_ip_address=?, tcp_port_open=?, gateway_download=?, " +
                                            " gateway_installed=?, sales_export_activity=?, sales_exp_act_verified=?, sch_task_setup=?, notes=? WHERE location_id = ? ";
        try {
            int colCount                    = 1;
            stmt                            = transconn.prepareStatement(sqlITChecklist);
            stmt.setString(colCount++, javaInstalled);      boolCheck[0] = javaInstalled;
            stmt.setString(colCount++, accessToIP);         boolCheck[1] = accessToIP;
            stmt.setString(colCount++, portOpen);           boolCheck[2] = portOpen;
            stmt.setString(colCount++, dnsAccess);          boolCheck[3] = dnsAccess;
            stmt.setString(colCount++, gatewayInstalled);   boolCheck[4] = gatewayInstalled;
            stmt.setString(colCount++, exportSetup);        boolCheck[5] = exportSetup;
            stmt.setString(colCount++, exportSetupVerified);boolCheck[6] = exportSetupVerified;
            stmt.setString(colCount++, restartTask);        boolCheck[7] = restartTask;
            stmt.setString(colCount++, notes);
            stmt.setInt(colCount++,locationId);
            stmt.executeUpdate();

            itChecklistComplete             = checkCompletion(boolCheck, nullCheck);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            return itChecklistComplete;
        }
    }



    private boolean checkCompletion(String[] boolCheck, String[] nullCheck) throws HandlerException {
        boolean checklistComplete           = true;

        for (int i = 0; i < boolCheck.length; i++) {
            if (!boolCheck[i].equalsIgnoreCase("Yes")) {
                checklistComplete           = false;
                return checklistComplete;
            }
        }

        for (int i = 0; i < nullCheck.length; i++) {
            if (nullCheck[i].length() < 1) {
                checklistComplete           = false;
                return checklistComplete;
            }
        }

        return checklistComplete;
    }

    private void getInvoiceDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int active                          = HandlerUtils.getRequiredInteger(toHandle, "active");
        int accountId                       = HandlerUtils.getOptionalInteger(toHandle, "accountId");
        int type                            = HandlerUtils.getOptionalInteger(toHandle, "type");
        int iType                           = HandlerUtils.getOptionalInteger(toHandle, "iType");
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT i.id, a.name, i.invoiceNumber, i.amount, i.outstanding, i.date, i.received, i.approved, i.type FROM invoice i " +
                                            " LEFT JOIN accounts a ON a.id = i.account WHERE i.active = ? ";
        String selectOutstanding            = "SELECT DISTINCT p.id, p.outstanding, p.received, p.details FROM payment p LEFT JOIN accounts a ON a.id = p.account " +
                                            " LEFT JOIN invoice i ON i.account = a.id WHERE p.outstanding<>0 ";
        if (accountId >= 0) {
            sql                             += " AND a.id = ? ";
            selectOutstanding               += " AND a.id = ? ";
        }
        if (type > 0) {
            sql                             += " AND i.type = ? ";
        }
        switch (iType) {
            case 1:
                sql                         += " AND i.approved = 0 ";
                break;
            case 2:
                sql                         += " AND i.approved = 1 AND i.received IS NULL ";
                break;
            case 3:
                sql                         += " AND i.approved = 1 AND i.received IS NOT NULL ";
                break;
            case 4:
                sql                         += " AND i.approved = 1 ";
                break;
        }
        if (null != searchString && searchString.length() > 0) {
            sql                             += " AND ((a.name like '%" + searchString.replaceAll("'", "\'") +  "%') OR (i.invoiceNumber like '%" + searchString.replaceAll("'", "\'") +  "%')) ";
            selectOutstanding               += " AND ((a.name like '%" + searchString.replaceAll("'", "\'") +  "%') OR (i.invoiceNumber like '%" + searchString.replaceAll("'", "\'") +  "%')) ";
        }
        sql                                 += " ORDER BY a.name, i.date";
        selectOutstanding                   += " ORDER BY p.outstanding";        
        
        try {
            int colCount                    = 1;
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(colCount++,active);
            if (accountId >= 0) {
                stmt.setInt(colCount++,accountId);
            }
            if (type > 0) {
                stmt.setInt(colCount++,type);
            }
            rs                              = stmt.executeQuery();
            getInvoiceDetailsXML(toAppend, rs);
            
            stmt                            = transconn.prepareStatement(selectOutstanding);
            if (accountId >= 0) {
                stmt.setInt(1,accountId);
            }
            rs                              = stmt.executeQuery();
            getOutstandingXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getInvoiceDetailsXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element invoiceDetailsEl        = toAppend.addElement("invoiceDetails");
            invoiceDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("outstanding").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("approved").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
        }
    }
    
    
    private void getOutstandingXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element invoiceDetailsEl        = toAppend.addElement("outstandingDetails");
            invoiceDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("outstanding").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("details").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void updateInvoices(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            Iterator updateInvoices         = toHandle.elementIterator("updateInvoice");
            while (updateInvoices.hasNext()) {
                Element invoice             = (Element) updateInvoices.next();
                int id                      = HandlerUtils.getRequiredInteger(invoice, "id");

                String updateInvoiceItems   = " UPDATE invoiceDetails SET amount=? WHERE id = ? ";

                Iterator invoiceItems       = invoice.elementIterator("details");
                while (invoiceItems.hasNext()) {
                    int colCount            = 1;
                    Element invoiceItem     = (Element) invoiceItems.next();
                    int item                = HandlerUtils.getRequiredInteger(invoiceItem, "id");
                    double amount           = HandlerUtils.getRequiredDouble(invoiceItem, "amount");

                    stmt                        = transconn.prepareStatement(updateInvoiceItems);
                    stmt.setDouble(colCount++, amount);
                    stmt.setInt(colCount++, item);
                    stmt.executeUpdate();

                }

                String selectInvoiceTotal   = " SELECT SUM(amount) FROM invoiceDetails WHERE invoice = ? ";
                stmt                        = transconn.prepareStatement(selectInvoiceTotal);
                stmt.setInt(1,id);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    String updateInvoice    = " UPDATE invoice SET amount = ?, outstanding = ? WHERE id = ? ";
                    stmt                    = transconn.prepareStatement(updateInvoice);
                    stmt.setDouble(1, rs.getDouble(1));
                    stmt.setDouble(2, rs.getDouble(1));
                    stmt.setInt(3, id);
                    stmt.executeUpdate();
                    String logMessage       = "Updated invoice '" + id + "'";
                    logger.portalDetail(callerId, "updateInvoice", 0, "Invoices_Due", id, logMessage, transconn);
                }
            }

            Iterator approveInvoices        = toHandle.elementIterator("approveInvoice");
            while (approveInvoices.hasNext()) {
                Element invoice             = (Element) approveInvoices.next();
                int id                      = HandlerUtils.getRequiredInteger(invoice, "id");
                String approval             = HandlerUtils.getRequiredString(invoice, "approvalDate");

                String updateInvoice        = " UPDATE invoice SET approved=1, approvalDate= ? WHERE id = ? ";

                stmt                        = transconn.prepareStatement(updateInvoice);
                stmt.setString(1, approval);
                stmt.setInt(2, id);
                stmt.executeUpdate();
                String logMessage           = "Approved invoice '" + id + "'";
                logger.portalDetail(callerId, "approveInvoice", 0, "invoice", id, logMessage, transconn);
            }

            Iterator deleteInvoices         = toHandle.elementIterator("deleteInvoice");
            while (deleteInvoices.hasNext()) {
                Element invoice             = (Element) deleteInvoices.next();
                int id                      = HandlerUtils.getRequiredInteger(invoice, "id");

                String updateInvoice        = " UPDATE invoice SET active=0 WHERE id = ? ";

                stmt                        = transconn.prepareStatement(updateInvoice);
                stmt.setInt(1, id);
                stmt.executeUpdate();
                String logMessage           = "Approved invoice '" + id + "'";
                logger.portalDetail(callerId, "approveInvoice", 0, "invoice", id, logMessage, transconn);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } catch(Exception e ) { 
            logger.dbError("Database error: "+e.toString());
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getInvoiceList(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int invoice                         = HandlerUtils.getRequiredInteger(toHandle, "invoice");

        PreparedStatement stmt              = null;
        ResultSet invoiceRS                 = null, detailsRS = null, paymentRS = null;

        String selectInvoiceInfo            = "SELECT a.name, a.addrStreet, a.addrCity, a.addrState, a.addrZip, a.cycle, i.invoiceNumber, i.amount, i.outstanding, " +
                                            " DATE_FORMAT(i.date, '%m/%d/%Y') FROM invoice i LEFT JOIN accounts a ON a.id = i.account WHERE i.id = ? ";
        String selectInvoiceDetails         = "SELECT iD.id, BL.location_name, iD.item, iD.quantity, iD.amount, iD.details FROM invoiceDetails iD " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = iD.location WHERE iD.invoice = ? ORDER BY iD.item";
        String selectInvoicePayments        = "SELECT pIM.id, DATE_FORMAT(p.received, '%m/%d/%Y'), pIM.amount, p.details FROM paymentInvoiceMap pIM LEFT JOIN payment p ON p.id = pIM.payment " +
                                            " WHERE pIM.invoice = ? ";

        try {
            stmt                            = transconn.prepareStatement(selectInvoiceInfo);
            stmt.setInt(1,invoice);
            invoiceRS                       = stmt.executeQuery();

            stmt                            = transconn.prepareStatement(selectInvoiceDetails);
            stmt.setInt(1,invoice);
            detailsRS                       = stmt.executeQuery();

            stmt                            = transconn.prepareStatement(selectInvoicePayments);
            stmt.setInt(1,invoice);
            paymentRS                       = stmt.executeQuery();
            
            getInvoiceListXML(toAppend, invoiceRS, detailsRS, paymentRS);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(invoiceRS);
            close(detailsRS);
            close(stmt);
        }
    }

    private void getInvoiceListXML(Element toAppend, ResultSet invoiceRS, ResultSet detailsRS, ResultSet paymentRS) throws SQLException {
        int colCount                        = 1, cycle = 0;
        String invoiceDate                  = "";
        if (invoiceRS.next()) {
            Element invoiceInfoEl           = toAppend.addElement("invoiceInfo");
            invoiceInfoEl.addElement("name").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            invoiceInfoEl.addElement("street").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            invoiceInfoEl.addElement("city").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            invoiceInfoEl.addElement("state").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            invoiceInfoEl.addElement("zip").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            cycle                           = invoiceRS.getInt(colCount++);
            invoiceInfoEl.addElement("invoice").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            invoiceInfoEl.addElement("amount").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            invoiceInfoEl.addElement("outstanding").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
            invoiceDate                     = invoiceRS.getString(colCount++);
            invoiceInfoEl.addElement("date").addText(HandlerUtils.nullToEmpty(invoiceDate));
        }
        while (detailsRS.next()) {
            colCount                        = 1;
            Element invoiceListEl           = toAppend.addElement("invoiceList");

            invoiceListEl.addElement("id").addText(String.valueOf(detailsRS.getInt(colCount++)));
            invoiceListEl.addElement("location").addText(HandlerUtils.nullToEmpty(detailsRS.getString(colCount++)));
            int item                        = detailsRS.getInt(colCount++);
            invoiceListEl.addElement("item").addText(String.valueOf(item));
            invoiceListEl.addElement("quantity").addText(String.valueOf(detailsRS.getInt(colCount++)));
            invoiceListEl.addElement("amount").addText(HandlerUtils.nullToEmpty(detailsRS.getString(colCount++)));
            invoiceListEl.addElement("description").addText(HandlerUtils.nullToEmpty((item == 5 ? detailsRS.getString(colCount++) : getItemDescription(item, cycle, invoiceDate))));
        }
        while (paymentRS.next()) {
            colCount                        = 1;
            Element invoicePaymentsEl       = toAppend.addElement("invoicePayment");
            invoicePaymentsEl.addElement("id").addText(String.valueOf(paymentRS.getInt(colCount++)));
            invoicePaymentsEl.addElement("received").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoicePaymentsEl.addElement("amount").addText(String.valueOf(paymentRS.getDouble(colCount++)));
            invoicePaymentsEl.addElement("description").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
        }
    }

    private void getPaymentDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int payment                         = HandlerUtils.getRequiredInteger(toHandle, "payment");

        PreparedStatement stmt              = null;
        ResultSet paymentRS                 = null, detailsRS = null;

        String selectPaymentInfo            = "SELECT a.name, a.addrStreet, a.addrCity, a.addrState, a.addrZip, p.details, p.amount, p.outstanding, DATE_FORMAT(p.received, '%m/%d/%Y') " +
                                            " FROM payment p LEFT JOIN accounts a ON a.id = p.account WHERE p.id = ? ";
        String selectPaymentInvoices        = "SELECT pIM.id, i.invoiceNumber, DATE_FORMAT(i.date, '%m/%d/%Y'), pIM.amount FROM paymentInvoiceMap pIM " +
                                            " LEFT JOIN invoice i ON i.id = pIM.invoice WHERE pIM.payment = ? ";

        try {
            stmt                            = transconn.prepareStatement(selectPaymentInfo);
            stmt.setInt(1,payment);
            paymentRS                       = stmt.executeQuery();

            stmt                            = transconn.prepareStatement(selectPaymentInvoices);
            stmt.setInt(1,payment);
            detailsRS                       = stmt.executeQuery();

            getPaymentDetailsXML(toAppend, paymentRS, detailsRS);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(paymentRS);
            close(detailsRS);
            close(stmt);
        }
    }

    private void getPaymentDetailsXML(Element toAppend, ResultSet paymentRS, ResultSet detailsRS) throws SQLException {
        int colCount                        = 1, cycle = 0;
        String invoiceDate                  = "";
        if (paymentRS.next()) {
            Element invoiceInfoEl           = toAppend.addElement("paymentInfo");
            invoiceInfoEl.addElement("name").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("street").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("city").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("state").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("zip").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("details").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("amount").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("outstanding").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
            invoiceInfoEl.addElement("received").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
        }
        while (detailsRS.next()) {
            colCount                        = 1;
            Element invoiceListEl           = toAppend.addElement("paymentDetails");
            invoiceListEl.addElement("id").addText(String.valueOf(detailsRS.getInt(colCount++)));
            invoiceListEl.addElement("invoice").addText(HandlerUtils.nullToEmpty(detailsRS.getString(colCount++)));
            invoiceListEl.addElement("date").addText(HandlerUtils.nullToEmpty(detailsRS.getString(colCount++)));
            invoiceListEl.addElement("amount").addText(HandlerUtils.nullToEmpty(detailsRS.getString(colCount++)));
        }
    }

    private void getLocationInvoice(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        int active                          = HandlerUtils.getOptionalInteger(toHandle, "active");

        PreparedStatement stmt              = null;
        ResultSet invoiceRS                 = null, accountRS = null;

        String selectInvoiceDetails         = "SELECT iD.id, i.invoiceNumber, i.account, DATE_FORMAT(i.date, '%m/%d/%Y'), iD.item, iD.quantity, iD.amount, iD.details FROM invoiceDetails iD " +
                                            " LEFT JOIN invoice i ON i.id = iD.invoice WHERE i.active = 1 AND i.received IS " + (active > 0 ? "" : " NOT ") + " NULL AND iD.location = ?" +
                                            " ORDER BY i.date";

        try {
            stmt                            = transconn.prepareStatement(selectInvoiceDetails);
            stmt.setInt(1,locationId);
            invoiceRS                       = stmt.executeQuery();
            while (invoiceRS.next()) {
                int colCount                = 1, cycle = 1;

                Element invoiceListEl       = toAppend.addElement("invoiceList");
                invoiceListEl.addElement("id").addText(String.valueOf(invoiceRS.getInt(colCount++)));
                invoiceListEl.addElement("invoice").addText(String.valueOf(invoiceRS.getInt(colCount++)));
                
                int accountId               = invoiceRS.getInt(colCount++);
                String invoiceDate          = invoiceRS.getString(colCount++);
                int item                    = invoiceRS.getInt(colCount++);
                stmt                        = transconn.prepareStatement("SELECT cycle FROM accounts WHERE id = ?");
                stmt.setInt(1,accountId);
                accountRS                   = stmt.executeQuery();
                if (accountRS.next()) {
                    cycle                   = accountRS.getInt(1);
                }
                
                invoiceListEl.addElement("quantity").addText(String.valueOf(invoiceRS.getInt(colCount++)));
                invoiceListEl.addElement("amount").addText(HandlerUtils.nullToEmpty(invoiceRS.getString(colCount++)));
                invoiceListEl.addElement("date").addText(HandlerUtils.nullToEmpty(invoiceDate));
                invoiceListEl.addElement("item").addText((item == 5 ? invoiceRS.getString(colCount++) : getItemDescription(item, cycle, invoiceDate)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(invoiceRS);
            close(accountRS);
            close(stmt);
        }
    }

    public void sendMail(String title, String senderAddr, String emailAddr, String supportEmailAddr, String templateMessageTitle,
            String templateMessage, StringBuilder emailBody, boolean sendBCC) {
        String emailTemplatePath            = HandlerUtils.getSetting("email.templatePath");
        if ((emailTemplatePath == null) || "".equals(emailTemplatePath)) {
            emailTemplatePath               = ".";
        }
        //logger.debug("Packaging Email");
       // logger.debug(""+emailBody);
       /**/ try {
            if ((emailBody != null) && (emailBody.length() > 0)) {
                logger.debug("Loading Template");
                TemplatedMessage poEmail   = new TemplatedMessage(templateMessageTitle, emailTemplatePath, templateMessage);

                poEmail.setSender(senderAddr);
                poEmail.setRecipient(emailAddr);
                if (sendBCC) {
                    poEmail.setRecipientBCC(supportEmailAddr);
                }
                poEmail.setField("TITLE", title);
                poEmail.setField("BODY", emailBody.toString());
                poEmail.send();
            }
        } catch (MailException me) {
            logger.dbError("Error sending message to " + emailAddr + ": " + me.toString());
        }
    }

    private String calculateProrateAmount(int locationId, double monthly, int cycle) throws HandlerException {

        String proratedValues               = "";

        double prorateAmount                = 0.0;
        String selectProratePeriod          = "SELECT DATE_FORMAT(installDate, '%m/%d/%Y'), DATEDIFF(installDate, SUBDATE(DATE_FORMAT(NOW() ,'%Y-%m-01'), INTERVAL ? MONTH)) FROM Installation_Checklist " +
                                            " WHERE location_id = ? ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        int monthCycle                      = 1;
        try {
            Calendar today                  = Calendar.getInstance();
            int todayMonth                  = today.getTime().getMonth();
            int totalMonths                 = 1;
            switch (cycle){
                case 1:
                    monthCycle              = 0;
                    totalMonths             = 1;
                    break;
                case 2:
                    if (todayMonth < 3) {
                        monthCycle          = todayMonth;
                    } else if (todayMonth < 6) {
                        monthCycle          = todayMonth - 3;
                    } else if (todayMonth < 9) {
                        monthCycle          = todayMonth - 6;
                    } else if (todayMonth < 12) {
                        monthCycle          = todayMonth - 9;
                    }
                    totalMonths             = 3;
                    break;
                case 3:
                    if (todayMonth < 3) {
                        monthCycle          = todayMonth;
                    } else if (todayMonth < 9) {
                        monthCycle          = todayMonth - 6;
                    }
                    totalMonths             = 6;
                    break;
                case 4:
                    monthCycle              = -1;
                    totalMonths             = 12;
                    break;
            }
            if (monthCycle >= 0) {
                stmt                        = transconn.prepareStatement(selectProratePeriod);
                stmt.setInt(1,monthCycle);
                stmt.setInt(2,locationId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    proratedValues          = rs.getString(1) + "|";
                    prorateAmount           = ((((totalMonths * 30) - rs.getDouble(2))/(totalMonths * 30)) * (monthly * totalMonths));
                    proratedValues          += String.valueOf(prorateAmount);
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
        return proratedValues;
    }

    private void receivePayment(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int accountId                       = HandlerUtils.getOptionalInteger(toHandle, "accountId");
        int invoice                         = HandlerUtils.getOptionalInteger(toHandle, "invoice");
        int method                          = HandlerUtils.getRequiredInteger(toHandle, "method");
        String received                     = HandlerUtils.getRequiredString(toHandle, "received");
        double amount                       = HandlerUtils.getRequiredDouble(toHandle, "amount");
        String details                      = HandlerUtils.getOptionalString(toHandle, "details");

        int paramsSet                       = 0;
        if (accountId >= 0) {
            paramsSet++;
        }
        if (invoice >= 0) {
            paramsSet++;
        }
        if (paramsSet != 1) {
            throw new HandlerException("Exactly one of the following must be set: accountId invoiceId");
        }

        String selectPayment                = "SELECT id FROM payment WHERE account = ? AND received = ? AND amount = ? AND details = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        String selectInvoice                = "SELECT outstanding FROM invoice WHERE id = ? AND received IS NULL ";

        String insertPayment                = "INSERT INTO payment (account, method, received, amount, details) VALUES (?, ?, ?, ?, ?) ";
        String insertPaymentMap             = "INSERT INTO paymentInvoiceMap (payment, invoice, amount) VALUES (?, ?, ?) ";
        String updateInvoice                = "UPDATE invoice SET outstanding = ?, received = ? WHERE id = ?";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        try {
            
            if(method == 0) {
                Iterator p                  = toHandle.elementIterator("outstanding");
                if (p.hasNext()) {
                    Element payment         = (Element) p.next();
                    int id                  = HandlerUtils.getRequiredInteger(payment, "id");
                    double outstanding      = HandlerUtils.getRequiredDouble(payment, "outstanding");
                    double totalOutstandingAmount
                                            = outstanding;

                    stmt                    = transconn.prepareStatement("SELECT received FROM payment WHERE id = ?");
                    stmt.setInt(1,id);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        received            = rs.getString(1);
                    }

                    Iterator i              = toHandle.elementIterator("invoices");
                    while (i.hasNext()) {
                        if (totalOutstandingAmount > 0.0) {
                            
                            Element prod    = (Element) i.next();
                            int invoiceId   = HandlerUtils.getRequiredInteger(prod, "invoiceId");
                            double invoiceAmount= HandlerUtils.getRequiredDouble(prod, "amount");
                            double invoicePayment
                                            = 0.0;
                            if (invoiceAmount > totalOutstandingAmount) {
                                invoicePayment
                                            = totalOutstandingAmount;
                            } else {
                                invoicePayment
                                            = invoiceAmount;
                            }

                            totalOutstandingAmount
                                            = totalOutstandingAmount - invoicePayment;
                            stmt            = transconn.prepareStatement(insertPaymentMap);
                            stmt.setInt(1, id);
                            stmt.setInt(2, invoiceId);
                            stmt.setDouble(3, invoicePayment);
                            logger.debug("paymentMap "+ invoiceId +" : "+ invoiceAmount);
                            stmt.executeUpdate();

                            double oldAmount= 0.0;
                            stmt            = transconn.prepareStatement(selectInvoice);
                            stmt.setInt(1,invoiceId);
                            rs              = stmt.executeQuery();
                            if (rs.next()) {
                                oldAmount   = rs.getDouble(1);
                            }

                            double newBalance
                                            = oldAmount - invoicePayment;
                            stmt            = transconn.prepareStatement(updateInvoice);
                            stmt.setDouble(1, newBalance);
                            stmt.setString(2, (newBalance == 0.0 ? received : null));
                            stmt.setInt(3,invoiceId);
                            stmt.executeUpdate();
                            logger.debug("UpdateInvoice "+ newBalance +" : "+ (newBalance == 0.0 ? received : null));
                        }
                    }
                    if (totalOutstandingAmount == 0.0) {
                        stmt                = transconn.prepareStatement("UPDATE payment SET outstanding = 0 WHERE id = ?");
                        stmt.setInt(1, id);
                        stmt.executeUpdate();
                        logger.debug("OutStanding " + id + " : " + totalOutstandingAmount);
                    }
                }
            } else {

                if (invoice >= 0) {
                    stmt                    = transconn.prepareStatement("SELECT account FROM invoice WHERE id = ?");
                    stmt.setInt(1,invoice);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        accountId           = rs.getInt(1);
                    }
                }
                
                stmt                        = transconn.prepareStatement(selectPayment);
                stmt.setInt(1,accountId);
                stmt.setString(2,received);
                stmt.setDouble(3,amount);
                stmt.setString(4,details);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {
                    stmt                    = transconn.prepareStatement(insertPayment);
                    stmt.setInt(1,accountId);
                    stmt.setInt(2,method);
                    stmt.setString(3,received);
                    stmt.setDouble(4,amount);
                    stmt.setString(5,details);
                    logger.debug("Payment "+ accountId +" ,Method"+ method+",received ;"+received+",amount:"+amount);
                    stmt.executeUpdate();

                    int paymentId           = -1;
                    stmt                    = transconn.prepareStatement(getLastId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        paymentId           = rs.getInt(1);
                        String logMessage   = "Received Payment '" + accountId + "'";
                        logger.portalDetail(callerId, "receivePayment", 0, "payment", paymentId, logMessage, transconn);
                    } else {
                        logger.dbError("first call to LAST_INSERT_ID in receivePayment failed to return a result");
                        throw new HandlerException("Database Error");
                    }

                    double totalInvoiceAmount
                                            = amount;
                    Iterator i              = toHandle.elementIterator("invoices");
                    while (i.hasNext()) {
                        Element prod        = (Element) i.next();
                        int invoiceId       = HandlerUtils.getRequiredInteger(prod, "invoiceId");
                        double invoiceAmount= HandlerUtils.getRequiredDouble(prod, "amount");
                        double oldAmount    = 0.0;
                        totalInvoiceAmount  -= invoiceAmount;

                        stmt                = transconn.prepareStatement(insertPaymentMap);
                        stmt.setInt(1,paymentId);
                        stmt.setInt(2,invoiceId);
                        stmt.setDouble(3,invoiceAmount);
                        logger.debug("paymentMap "+ invoiceId +" : "+ invoiceAmount);
                        stmt.executeUpdate();

                        stmt                = transconn.prepareStatement(selectInvoice);
                        stmt.setInt(1,invoiceId);
                        rs                  = stmt.executeQuery();
                        if (rs.next()) {
                            oldAmount       = rs.getDouble(1);
                        }

                        double newBalance   = oldAmount - invoiceAmount;
                        stmt                = transconn.prepareStatement(updateInvoice);
                        stmt.setDouble(1,newBalance);
                        stmt.setString(2,(newBalance == 0.0 ? received : null));
                        stmt.setInt(3,invoiceId);
                        logger.debug("UpdateInvoice "+ newBalance +" : "+ (newBalance == 0.0 ? received : null));
                        stmt.executeUpdate();
                    }

                    if (totalInvoiceAmount > 0.0) {
                        stmt                = transconn.prepareStatement("UPDATE payment SET outstanding = ? WHERE id = ?");
                        stmt.setDouble(1, -1*totalInvoiceAmount);
                        stmt.setInt(2, paymentId);
                        logger.debug("Payment-Outstanding "+ paymentId +" : "+ -1*totalInvoiceAmount);
                        stmt.executeUpdate();
                    }
                } else {
                    addErrorDetail(toAppend, "Payment has already been received for this account for the same date.  Please contact IT for support");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
    
     private void getBadDebtReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        boolean byItem                      = HandlerUtils.getOptionalBoolean(toHandle, "byItem");
        boolean byAccount                   = HandlerUtils.getOptionalBoolean(toHandle, "byAccount");
        boolean byDate                      = HandlerUtils.getOptionalBoolean(toHandle, "byDate");
        String groupBy                      = "";

        if (byItem) {
            groupBy                         = " a.type DESC, itemMain ";
        } else if (byAccount) {
            groupBy                         = " a.type DESC, a.name, i.id, itemMain, p.received ";
        } else if (byDate) {
            groupBy                         = " p.received, a.type DESC, a.name, i.id, itemMain ";
        } else {
            groupBy                         = " a.type DESC, itemMain ";
        }

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            String sql                      = "SELECT DISTINCT p.id, p.received, a.name, i.invoiceNumber, pIM.amount, p.received, p.details, a.type type, IFNULL(iD.item, 5) itemMain, i.date FROM badDebt p " +
                                            " LEFT JOIN badDebtInvoiceMap pIM ON pIM.badDebt = p.id LEFT JOIN invoice i ON i.id = pIM.invoice " +
                                            " LEFT JOIN accounts a ON a.id = p.account LEFT JOIN invoiceDetails iD ON iD.invoice=i.id WHERE p.received BETWEEN ? AND ? "
                                            + " GROUP BY " + groupBy + " ORDER BY " + groupBy;
            stmt                            = transconn.prepareStatement(sql);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            rs                              = stmt.executeQuery();
            getBadDebtReportXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getBadDebtReportXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element badDebtDetailsEl        = toAppend.addElement("data");
            badDebtDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            badDebtDetailsEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
            badDebtDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("details").addText(String.valueOf(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("type").addText(String.valueOf(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("item").addText(String.valueOf(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("invoiceDate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    
    private void receiveBadDebt(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int accountId                       = HandlerUtils.getOptionalInteger(toHandle, "accountId");
        int invoice                         = HandlerUtils.getOptionalInteger(toHandle, "invoice");
        int method                          = HandlerUtils.getOptionalInteger(toHandle, "method");
        String received                     = HandlerUtils.getRequiredString(toHandle, "received");
        double amount                       = HandlerUtils.getRequiredDouble(toHandle, "amount");
        String details                      = HandlerUtils.getRequiredString(toHandle, "details");

        int paramsSet                       = 0;
        if (accountId >= 0) {
            paramsSet++;
        }
        if (invoice >= 0) {
            paramsSet++;
        }
        if (paramsSet != 1) {
            throw new HandlerException("Exactly one of the following must be set: accountId invoiceId");
        }

        String selectBadDebt                = "SELECT id FROM badDebt WHERE account = ? AND received = ? AND amount = ? AND details = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        String selectInvoice                = "SELECT outstanding FROM invoice WHERE id = ? AND received IS NULL ";

        String insertBadDebt                = "INSERT INTO badDebt(account, method, received, amount, details) VALUES (?, ?, ?, ?, ?) ";
        String insertBadDebtMap             = "INSERT INTO badDebtInvoiceMap (badDebt, invoice, amount) VALUES (?, ?, ?) ";
        String updateInvoice                = "UPDATE invoice SET outstanding = ?, received = ? WHERE id = ?";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        try {
            if (invoice >= 0) {
                stmt                        = transconn.prepareStatement("SELECT account FROM invoice WHERE id = ?");
                stmt.setInt(1,invoice);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    accountId               = rs.getInt(1);
                }
            }
            
            stmt                            = transconn.prepareStatement(selectBadDebt);
            stmt.setInt(1,accountId);
            stmt.setString(2,received);
            stmt.setDouble(3,amount);
            stmt.setString(4,details);
            rs                              = stmt.executeQuery();
            if (!rs.next()) {
                stmt                        = transconn.prepareStatement(insertBadDebt);
                stmt.setInt(1,accountId);
                stmt.setInt(2,method);
                stmt.setString(3,received);
                stmt.setDouble(4,amount);
                stmt.setString(5,details);
                stmt.executeUpdate();

                int badDebtId               = -1;
                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    badDebtId               = rs.getInt(1);
                    String logMessage       = "Received BadDebt '" + accountId + "'";
                    logger.portalDetail(callerId, "receiveBadDebt", 0, "badDebt", badDebtId, logMessage, transconn);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in receiveBadDebt failed to return a result");
                    throw new HandlerException("Database Error");
                }

                double totalInvoiceAmount   = amount;
                Iterator i                  = toHandle.elementIterator("invoices");
                while (i.hasNext()) {
                    Element prod            = (Element) i.next();
                    int invoiceId           = HandlerUtils.getRequiredInteger(prod, "invoiceId");
                    double invoiceAmount    = HandlerUtils.getRequiredDouble(prod, "amount");
                    double oldAmount        = 0.0;
                    totalInvoiceAmount      -= invoiceAmount;

                    stmt                    = transconn.prepareStatement(insertBadDebtMap);
                    stmt.setInt(1,badDebtId);
                    stmt.setInt(2,invoiceId);
                    stmt.setDouble(3,invoiceAmount);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(selectInvoice);
                    stmt.setInt(1,invoiceId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        oldAmount           = rs.getDouble(1);
                    }
                    
                    double newBalance       = oldAmount - invoiceAmount;
                    stmt                    = transconn.prepareStatement(updateInvoice);
                    stmt.setDouble(1,newBalance);
                    stmt.setString(2,(newBalance == 0.0 ? received : null));
                    stmt.setInt(3,invoiceId);
                    stmt.executeUpdate();
                }

                if (totalInvoiceAmount > 0.0) {
                    stmt                    = transconn.prepareStatement("UPDATE badDebt SET outstanding = ? WHERE id = ?");
                    stmt.setDouble(1, -1*totalInvoiceAmount);
                    stmt.setInt(2, badDebtId);
                    stmt.executeUpdate();
                }
            } else {
                addErrorDetail(toAppend, "badDebt has already been received for this account for the same date.  Please contact IT for support");
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    private void getContactInformation(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int customerId                      = HandlerUtils.getOptionalInteger(toHandle, "customerId");
        int locationId                      = HandlerUtils.getOptionalInteger(toHandle, "locationId");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            if (customerId > 0) {
                String sql                  = "SELECT contact_id, contact_Name, street, city, zip, state, office_phone, cell_phone, email, fax, date_created FROM ContactInformation " +
                                            " WHERE customer_id = ? ";
                stmt                        = transconn.prepareStatement(sql);
                stmt.setInt(1,customerId);
                rs                          = stmt.executeQuery();
                getCorporateContactInformationXML(toAppend, rs);
            }
            if (locationId > 0) {
                String sql                  = "SELECT contact_id, contact_Name, contact_Title, location_contact_ph, loc_contact_cell_phone, location_contact_email, location_contact_fax, " +
                                            " date_created FROM LocationContactInformation WHERE location_id = ?";
                stmt                        = transconn.prepareStatement(sql);
                stmt.setInt(1,locationId);
                rs                          = stmt.executeQuery();
                getLocationContactInformationXML(toAppend, rs);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getCorporateContactInformationXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element contactInfoEl           = toAppend.addElement("CorporateContactInfo");
            contactInfoEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            contactInfoEl.addElement("contactName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("street").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("city").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("zip").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("state").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("phone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("cellPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("email").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("fax").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("date_created").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void getLocationContactInformationXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element contactInfoEl           = toAppend.addElement("LocationContactInfo");
            contactInfoEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            contactInfoEl.addElement("contactName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("contactTitle").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("phone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("cellPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("email").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("fax").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            contactInfoEl.addElement("date_created").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void addUpdateContactInformation(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);

        int customerId                      = HandlerUtils.getOptionalInteger(toHandle, "customerId");
        int locationId                      = HandlerUtils.getOptionalInteger(toHandle, "locationId");
        
       if (customerId > 0) {
           addUpdateCorporateContactInfo(toHandle, toAppend, customerId);
       }

        if (locationId > 0) {
           addUpdateLocationContactInfo(toHandle, toAppend, locationId);
       }
    }

    private void addUpdateCorporateContactInfo(Element toHandle, Element toAppend, int customerId) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            int colCount                    = 1;
            Iterator updateContactInfos     = toHandle.elementIterator("updateContactInfo");
            while (updateContactInfos.hasNext()) {
                Element contactInfo         = (Element) updateContactInfos.next();
                int id                      = HandlerUtils.getRequiredInteger(contactInfo, "id");
                String contactName          = HandlerUtils.getRequiredString(contactInfo, "contactName");
                String street               = HandlerUtils.getRequiredString(contactInfo, "street");
                String city                 = HandlerUtils.getRequiredString(contactInfo, "city");
                String zip                  = HandlerUtils.getRequiredString(contactInfo, "zip");
                String state                = HandlerUtils.getRequiredString(contactInfo, "state");
                String phone                = HandlerUtils.getRequiredString(contactInfo, "phone");
                String cellPhone            = HandlerUtils.getRequiredString(contactInfo, "cellPhone");
                String email                = HandlerUtils.getRequiredString(contactInfo, "email");
                String fax                  = HandlerUtils.getRequiredString(contactInfo, "fax");

                String updateContactInfo    = " UPDATE ContactInformation SET contact_Name=?, street=?, city=?, zip=?, state=?, office_phone=?, cell_phone=?, email=?, fax=?, " +
                                            " WHERE contact_id = ? ";

                stmt                        = transconn.prepareStatement(updateContactInfo);
                stmt.setString(colCount++, contactName);
                stmt.setString(colCount++, street);
                stmt.setString(colCount++, city);
                stmt.setString(colCount++, zip);
                stmt.setString(colCount++, state);
                stmt.setString(colCount++, phone);
                stmt.setString(colCount++, cellPhone);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, fax);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                String logMessage           = "Updated Corporate Contact Info '" + contactName + "'";
                logger.portalDetail(callerId, "updateCorpContact", 0, "ContactInformation", id, logMessage, transconn);
            }

            Iterator addContactInfos        = toHandle.elementIterator("addContactInfo");
            while (addContactInfos.hasNext()) {
                Element contactInfo         = (Element) addContactInfos.next();
                String contactName          = HandlerUtils.getRequiredString(contactInfo, "contactName");
                String street               = HandlerUtils.getRequiredString(contactInfo, "street");
                String city                 = HandlerUtils.getRequiredString(contactInfo, "city");
                String zip                  = HandlerUtils.getRequiredString(contactInfo, "zip");
                String state                = HandlerUtils.getRequiredString(contactInfo, "state");
                String phone                = HandlerUtils.getRequiredString(contactInfo, "phone");
                String cellPhone            = HandlerUtils.getRequiredString(contactInfo, "cellPhone");
                String email                = HandlerUtils.getRequiredString(contactInfo, "email");
                String fax                  = HandlerUtils.getRequiredString(contactInfo, "fax");
                Date timestamp              = new Date();
                SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                String addContactInfo       = " INSERT INTO ContactInformation (customer_id, contact_Name, street, city, zip, state, office_phone, cell_phone, email, fax, date_created) " +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
                String getLastId            = "SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement(addContactInfo);
                stmt.setInt(colCount++, customerId);
                stmt.setString(colCount++, contactName);
                stmt.setString(colCount++, street);
                stmt.setString(colCount++, city);
                stmt.setString(colCount++, zip);
                stmt.setString(colCount++, state);
                stmt.setString(colCount++, phone);
                stmt.setString(colCount++, cellPhone);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, fax);
                stmt.setString(colCount++, newDateFormat.format(timestamp));
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int id                  = rs.getInt(1);
                    String logMessage       = "Added Corporate Contact Info '" + contactName + "'";
                    logger.portalDetail(callerId, "addCorpContact", 0, "ContactInformation", id, logMessage, transconn);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addCorpContactInfo failed to return a result");
                    throw new HandlerException("Database Error");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void addUpdateLocationContactInfo(Element toHandle, Element toAppend, int locationId) throws HandlerException {

        int callerId                        = getCallerId(toHandle);

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            int colCount                    = 1;
            Iterator updateContactInfos     = toHandle.elementIterator("updateContactInfo");
            while (updateContactInfos.hasNext()) {
                Element contactInfo         = (Element) updateContactInfos.next();
                int id                      = HandlerUtils.getRequiredInteger(contactInfo, "id");
                String contactName          = HandlerUtils.getRequiredString(contactInfo, "contactName");
                String contactTitle         = HandlerUtils.getRequiredString(contactInfo, "contactTitle");
                String phone                = HandlerUtils.getRequiredString(contactInfo, "phone");
                String cellPhone            = HandlerUtils.getRequiredString(contactInfo, "cellPhone");
                String email                = HandlerUtils.getRequiredString(contactInfo, "email");
                String fax                  = HandlerUtils.getRequiredString(contactInfo, "fax");

                String updateContactInfo    = " UPDATE LocationContactInformation SET contact_Name=?, contact_Title=?, location_contact_ph=?, loc_contact_cell_phone=?, " +
                                            " location_contact_email=?, location_contact_fax=? WHERE contact_id = ? ";

                stmt                        = transconn.prepareStatement(updateContactInfo);
                stmt.setString(colCount++, contactName);
                stmt.setString(colCount++, contactTitle);
                stmt.setString(colCount++, phone);
                stmt.setString(colCount++, cellPhone);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, fax);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                String logMessage           = "Updated Location Contact Info '" + contactName + "'";
                logger.portalDetail(callerId, "updateLocContact", 0, "LocationContactInformation", id, logMessage, transconn);
            }

            Iterator addContactInfos        = toHandle.elementIterator("addContactInfo");
            while (addContactInfos.hasNext()) {
                Element contactInfo         = (Element) addContactInfos.next();
                String contactName          = HandlerUtils.getRequiredString(contactInfo, "contactName");
                String contactTitle         = HandlerUtils.getRequiredString(contactInfo, "contactTitle");
                String phone                = HandlerUtils.getRequiredString(contactInfo, "phone");
                String cellPhone            = HandlerUtils.getRequiredString(contactInfo, "cellPhone");
                String email                = HandlerUtils.getRequiredString(contactInfo, "email");
                String fax                  = HandlerUtils.getRequiredString(contactInfo, "fax");
                Date timestamp              = new Date();
                SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                String addContactInfo       = " INSERT INTO LocationContactInformation (location_id, contact_Name, contact_Title, location_contact_ph, loc_contact_cell_phone, location_contact_email, location_contact_fax, date_created) " +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?) ";
                String getLastId            = "SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement(addContactInfo);
                stmt.setInt(colCount++, locationId);
                stmt.setString(colCount++, contactName);
                stmt.setString(colCount++, contactTitle);
                stmt.setString(colCount++, phone);
                stmt.setString(colCount++, cellPhone);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, fax);
                stmt.setString(colCount++, newDateFormat.format(timestamp));
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int id                  = rs.getInt(1);
                    String logMessage       = "Added Location Contact Info '" + contactName + "'";
                    logger.portalDetail(callerId, "addLocContact", 0, "LocationContactInformation", id, logMessage, transconn);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addLocContactInfo failed to return a result");
                    throw new HandlerException("Database Error");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getReminder(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int leadId                          = HandlerUtils.getRequiredInteger(toHandle, "leadId");
        boolean expiredReminders            = HandlerUtils.getOptionalBoolean(toHandle, "expiredReminders");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT id, contact, phone, cellPhone, email, dateTime, notes FROM leadReminder WHERE lead = ? ";
        if (!expiredReminders) {
            sql                             += " AND dateTime > Concat(LEFT(NOW(),11),'07:00:00') ";
        }
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,leadId);
            rs                              = stmt.executeQuery();
            getReminderXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getReminderXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element reminderDetailsEl       = toAppend.addElement("reminderDetails");
            reminderDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            reminderDetailsEl.addElement("contact").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            reminderDetailsEl.addElement("phone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            reminderDetailsEl.addElement("cellPhone").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            reminderDetailsEl.addElement("email").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            reminderDetailsEl.addElement("dateTime").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            reminderDetailsEl.addElement("notes").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void addUpdateReminder(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            int colCount                    = 1;
            Iterator updateReminders        = toHandle.elementIterator("updateReminders");
            while (updateReminders.hasNext()) {
                Element reminder            = (Element) updateReminders.next();
                int id                      = HandlerUtils.getRequiredInteger(reminder, "id");
                String contact              = HandlerUtils.getRequiredString(reminder, "contact");
                String phone                = HandlerUtils.getRequiredString(reminder, "phone");
                String cellPhone            = HandlerUtils.getRequiredString(reminder, "cellPhone");
                String email                = HandlerUtils.getRequiredString(reminder, "email");
                String dateTime             = HandlerUtils.getRequiredString(reminder, "dateTime");
                String notes                = HandlerUtils.getRequiredString(reminder, "notes");

                String updateReminder       = " UPDATE leadReminder SET contact=?, phone=?, cellPhone=?, email=?, dateTime=?, notes=? WHERE id = ? ";

                stmt                        = transconn.prepareStatement(updateReminder);
                stmt.setString(colCount++, contact);
                stmt.setString(colCount++, phone);
                stmt.setString(colCount++, cellPhone);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, dateTime);
                stmt.setString(colCount++, notes);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                String logMessage           = "Updated reminder for '" + contact + "'";
                logger.portalDetail(callerId, "updateReminder", 0, "leadReminder", id, logMessage, transconn);
            }

            Iterator addReminders           = toHandle.elementIterator("addReminders");
            while (addReminders.hasNext()) {
                Element reminder            = (Element) addReminders.next();
                int leadId                  = HandlerUtils.getRequiredInteger(reminder, "leadId");
                String contact              = HandlerUtils.getRequiredString(reminder, "contact");
                String phone                = HandlerUtils.getRequiredString(reminder, "phone");
                String cellPhone            = HandlerUtils.getRequiredString(reminder, "cellPhone");
                String email                = HandlerUtils.getRequiredString(reminder, "email");
                String dateTime             = HandlerUtils.getRequiredString(reminder, "dateTime");
                String notes                = HandlerUtils.getRequiredString(reminder, "notes");

                String addReminder          = " INSERT INTO leadReminder (lead, contact, phone, cellPhone, email, dateTime, notes) VALUES (?, ?, ?, ?, ?, ?, ?) ";
                String getLastId            = " SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement(addReminder);
                stmt.setInt(colCount++, leadId);
                stmt.setString(colCount++, contact);
                stmt.setString(colCount++, phone);
                stmt.setString(colCount++, cellPhone);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, dateTime);
                stmt.setString(colCount++, notes);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int id                  = rs.getInt(1);
                    String logMessage       = "Added reminder for '" + contact + "'";
                    logger.portalDetail(callerId, "addReminder", 0, "leadReminder", id, logMessage, transconn);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addReminder failed to return a result");
                    throw new HandlerException("Database Error");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getBOSSDashBoardReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        
        ReportType reportType               = ReportType.instanceOf("Yesterday");
        String reportTypeString             = HandlerUtils.getOptionalString(toHandle, "reportType");
        if (null != reportTypeString) {
            reportType                      = ReportType.instanceOf(HandlerUtils.getOptionalString(toHandle, "reportType"));
        }

        boolean locationStatus              = HandlerUtils.getOptionalBoolean(toHandle, "locationStatus");
        boolean billing                     = HandlerUtils.getOptionalBoolean(toHandle, "billing");
        boolean ticket                      = HandlerUtils.getOptionalBoolean(toHandle, "ticket");
        boolean tier                        = HandlerUtils.getOptionalBoolean(toHandle, "tier");
        boolean sales                       = HandlerUtils.getOptionalBoolean(toHandle, "sales");
        boolean operations                  = HandlerUtils.getOptionalBoolean(toHandle, "operations");

        if (locationStatus) {
            Element statusData              = toAppend.addElement("locationStatus");
            getDashBoardLocationStatus(statusData);
        }

        if (billing) {
            Element billData                = toAppend.addElement("billing");
            getDashBoardBilling(billData);
        }

        if (ticket) {
            Element ticketData              = toAppend.addElement("tickets");
            getDashBoardTickets(ticketData, callerId);
        }

        if (tier) {
            Element tierData                = toAppend.addElement("tier");
            getDashBoardTier(reportType, tierData);
        }

        if (sales) {
            Element salesData               = toAppend.addElement("sales");
            getDashBoardSales(reportType, salesData);
        }

        if (operations) {
            Element operData                = toAppend.addElement("operations");
            getDashBoardOperations(reportType, operData);
        }

    }


    private void getDashBoardLocationStatus(Element statusData) throws HandlerException {

        String selectStatus                 = "(SELECT 1, COUNT(id) FROM locationDetails WHERE active =1 AND preInstall = 1 AND scheduled = 1 AND billing = 1) " +
                                            " UNION " +
                                            " (SELECT 2, COUNT(id) FROM locationDetails WHERE active =1 AND preInstall = 1 AND scheduled = 1 AND billing = 0) " +
                                            " UNION " +
                                            " (SELECT 3, COUNT(id) FROM locationDetails WHERE active =1 AND preInstall = 1 AND scheduled = 0 AND billing = 0) " +
                                            " UNION " +
                                            " (SELECT 4, COUNT(BL.id) FROM BOSS_Location BL LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " WHERE BL.sendToInstall = 0);";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectStatus);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element status              = statusData.addElement("data");
                status.addAttribute("state", rs.getString(1));
                status.addAttribute("count", rs.getString(2));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getDashBoardLocationStatus: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getDashBoardBilling(Element billData) throws HandlerException {

        String selectRecurringRevenue       = " SELECT IFNULL(B.Bill_State,0), ROUND(SUM(lAM.amount * lAM.billMonths)/12,2), SUM(lAM.setup) FROM BOSS_Location BL " +
                                            " LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " LEFT JOIN locationAccountMap lAM ON lAM.location = BL.id LEFT JOIN Bill B ON B.location_id = BL.id " +
                                            " WHERE lD.active = 1 GROUP BY IFNULL(B.Bill_State,0) ORDER BY IFNULL(B.Bill_State,0) ";
        String selectAmountDue              = " SELECT i.type, COUNT(i.id), SUM(i.outstanding) FROM " +
                                            " (SELECT id, outstanding, IF(date < SUBDATE(NOW(), INTERVAL 3 MONTH), 0, 1) AS type " +
                                            " FROM invoice WHERE active = 1 AND received IS NULL) AS i GROUP BY i.type; ";
        String selectCurrentRevenue         = " SELECT SUM(iD.amount) FROM invoice i LEFT JOIN invoiceDetails iD ON iD.invoice = i.id " +
                                            " WHERE i.active = 1 AND i.approved = 1 AND i.date >= DATE_FORMAT(NOW() ,'%Y-%m-01') ";
        String selectUnderContractRevenue   = " SELECT ROUND(SUM(lAM.amount * lAM.billMonths)/12,2), SUM(lAM.setup) FROM BOSS_Location BL " +
                                            " LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN locationAccountMap lAM ON lAM.location = BL.id " + 
                                            " WHERE BL.sendToInstall = 0; ";
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            Element billing                 = billData.addElement("data");
            //Monthly and Expected Revenue
            stmt                            = transconn.prepareStatement(selectRecurringRevenue);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                if (rs.getInt(1) == 0) {
                    billing.addAttribute("expectedRevenue", rs.getString(2));
                    billing.addAttribute("expectedSetupFee", rs.getString(3));
                } else {
                    billing.addAttribute("currentRevenue", rs.getString(2));
                }
            }
            //Amount Due
            double  totalAmountDue          = 0.0;
            stmt                            = transconn.prepareStatement(selectAmountDue);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                if (rs.getInt(1) == 0) {
                    billing.addAttribute("countPastDue", rs.getString(2));
                } 
                totalAmountDue             += rs.getDouble(3);
            }
            billing.addAttribute("amountDue", String.valueOf(totalAmountDue));
            //Current Revenue
            stmt                            = transconn.prepareStatement(selectCurrentRevenue);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                billing.addAttribute("monthlyRevenue", rs.getString(1));
            }
            //Under Contract Revenue
            stmt                            = transconn.prepareStatement(selectUnderContractRevenue);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                billing.addAttribute("underContractRevenue", rs.getString(1));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getDashBoardBilling: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getDashBoardTickets(Element ticketData, int callerId) throws HandlerException {

        String selectOpenTicketCount        = " (SELECT 1, COUNT(id) FROM ticket WHERE category IN (1,2,6,8,9) AND close IS NULL) " +
                                            " UNION " +
                                            " (SELECT 2, COUNT(id) FROM ticket WHERE category IN (1,2,6,8,9) AND close IS NULL AND escalated = 0 AND open < SUBDATE(CONCAT(LEFT(NOW(),11),'07:00:00'),INTERVAL 7 DAY)) " +
                                            " UNION " +
                                            " (SELECT 3, COUNT(id) FROM ticket WHERE close IS NULL AND category = 7) " +
                                            " UNION " +
                                            " (SELECT 4, COUNT(id) FROM ticket WHERE category IN (1,2,6,8,9) AND  close > SUBDATE(CONCAT(LEFT(NOW(),11),'07:00:00'),INTERVAL 7 DAY)) " +
                                            " UNION " +
                                            " (SELECT 5, COUNT(id) FROM ticket WHERE close IS NULL AND assignedTo = ?) ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            Element tickets                 = ticketData.addElement("data");
            //Open Tickets
            stmt                            = transconn.prepareStatement(selectOpenTicketCount);
            stmt.setInt(1, callerId);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                switch (rs.getInt(1)) {
                    case 1:
                        tickets.addAttribute("open", rs.getString(2));
                        break;
                    case 2:
                        tickets.addAttribute("delayed", rs.getString(2));
                        break;
                    case 3:
                        tickets.addAttribute("gateway", rs.getString(2));
                        break;
                    case 4:
                        tickets.addAttribute("closed", rs.getString(2));
                        break;
                    case 5:
                        tickets.addAttribute("caller", rs.getString(2));
                        break;
                }
                
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getDashBoardTickets: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getDashBoardTier(ReportType reportType, Element tierData) throws HandlerException {

        String selectTierCount              = " SELECT t.tier, ROUND(SUM(t.cnt)/COUNT(t.date),0) FROM (SELECT tier, COUNT(id) AS cnt, date FROM tierSummary WHERE date >= LEFT(?,10) " +
                                            " GROUP BY tier, date) AS t GROUP BY t.tier; ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        DateParameter validatedDate         = new DateParameter(reportType.toStartDate());

        try {
            Element tier                    = tierData.addElement("data");
            double totalCount               = 0;
            stmt                            = transconn.prepareStatement(selectTierCount);
            stmt.setString(1, validatedDate.toString());
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                tier.addAttribute("tier" + rs.getInt(1)  + "Count", rs.getString(2));
                if (rs.getInt(1) < 4) {
                    totalCount              += rs.getDouble(2);
                }
            }
            tier.addAttribute("totalCount", String.valueOf(totalCount));
        } catch (SQLException sqle) {
            logger.dbError("Database error in getDashBoardTier: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getDashBoardOperations(ReportType reportType, Element operData) throws HandlerException {
    }

    private void getDashBoardSales(ReportType reportType, Element salesData) throws HandlerException {
    }

    private void getSalesAuditData(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        String pluNumber                    = HandlerUtils.getOptionalString(toHandle, "pluNumber");
        boolean multiBar                    = false;
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String barCount                     = "SELECT COUNT(id) FROM bar WHERE location = ? GROUP BY location";
        String sql                          = "SELECT CONCAT(b.name, ' : ', b.ounces, 'oz - ', s.pluNumber), SUM(s.quantity), s.costCenter " +
                                            " FROM salesNew s LEFT JOIN beverage b ON b.plu = s.pluNumber AND b.location = s.location " +
                                            " WHERE s.location = ? AND s.date BETWEEN ? AND ? ";
        if (null != pluNumber && pluNumber.length() > 0) {
            sql                             += " AND s.pluNumber = " + pluNumber;
        }
        sql                                 += " GROUP BY s.pluNumber, s.costCenter ORDER BY b.name, s.pluNumber, s.costCenter ";
        try {
            stmt                            = transconn.prepareStatement(barCount);
            stmt.setInt(1,locationId);
            rs                              = stmt.executeQuery();
            if (rs.next() && rs.getInt(1) > 1) {
                multiBar                    = true;
            }
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,locationId);
            stmt.setString(2,startDate);
            stmt.setString(3,endDate);
            rs                              = stmt.executeQuery();
            getSalesAuditDataXML(toAppend, rs, locationId, multiBar);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getSalesAuditDataXML(Element toAppend, ResultSet rs, int locationId, boolean multiBar) throws SQLException {
        HashMap<String, String> parameterMap
                                        = new HashMap<String, String>();
        if (multiBar) {
            PreparedStatement stmt      = null;
            ResultSet rsBar             = null;
            String selectBar            = "SELECT c.ccID, b.name FROM bar b LEFT JOIN costCenter c ON c.bar = b.id WHERE c.location = ?";
            try {
                stmt                    = transconn.prepareStatement(selectBar);
                stmt.setInt(1,locationId);
                rsBar                   = stmt.executeQuery();
                while (rsBar.next()) {
                    parameterMap.put(rsBar.getString(1), rsBar.getString(2));
                }
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
            } finally {
                close(rsBar);
                close(stmt);
            }
        }
        
        while (rs.next()) {
            int colCount                    = 1;
            Element auditDataEl             = toAppend.addElement("auditData");
            auditDataEl.addElement("pluNumber").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            auditDataEl.addElement("qty").addText(String.valueOf(rs.getDouble(colCount++)));
            String costCenter               = rs.getString(colCount++);
            if ((costCenter != null) && parameterMap.containsKey(costCenter)) {
                auditDataEl.addElement("bar").addText(parameterMap.get(costCenter));
            } else if (parameterMap.size() > 0) {
                auditDataEl.addElement("bar").addText("Unknown Bar");
            }
        }
    }

    private void addSalesAudit(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        String date                         = HandlerUtils.getRequiredString(toHandle, "date");

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {

            String addSalesAudit            = " INSERT INTO salesAudit (location, date) VALUES (?, ?) ";
            String getLastId                = " SELECT LAST_INSERT_ID()";

            stmt                            = transconn.prepareStatement(addSalesAudit);
            stmt.setInt(1, locationId);
            stmt.setString(2, date);
            stmt.executeUpdate();

            int salesAuditId                 = 0;
            stmt                        = transconn.prepareStatement(getLastId);
            rs                          = stmt.executeQuery();
            if (rs.next()) {
                salesAuditId            = rs.getInt(1);

                String logMessage       = "Added sales audit for '" + locationId + "'";
                logger.portalDetail(callerId, "salesAudit", 0, "location", locationId, logMessage, transconn);
            } else {
                logger.dbError("first call to LAST_INSERT_ID in salesAudit failed to return a result");
                throw new HandlerException("Database Error");
            }

            Iterator addSalesAudits         = toHandle.elementIterator("salesAudit");
            while (addSalesAudits.hasNext()) {
                int colCount                = 1;
                Element salesAudit          = (Element) addSalesAudits.next();
                String bar                  = HandlerUtils.getRequiredString(salesAudit, "bar");
                String pluNumber            = HandlerUtils.getRequiredString(salesAudit, "pluNumber");
                double salesQty             = HandlerUtils.getRequiredDouble(salesAudit, "salesQty");
                double reportQty            = HandlerUtils.getRequiredDouble(salesAudit, "reportQty");
                
                String addSalesAuditDetails = " INSERT INTO salesAuditDetails (salesAudit, bar, pluNumber, salesQty, reportQty) VALUES (?, ?, ?, ?, ?) ";


                stmt                        = transconn.prepareStatement(addSalesAuditDetails);
                stmt.setInt(colCount++, salesAuditId);
                stmt.setString(colCount++, bar);
                stmt.setString(colCount++, pluNumber);
                stmt.setDouble(colCount++, salesQty);
                stmt.setDouble(colCount++, reportQty);
                stmt.executeUpdate();
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getSalesAudits(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");

        String selectSalesAudit             = " SELECT id, date FROM salesAudit WHERE location = ? ";

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            stmt                            = transconn.prepareStatement(selectSalesAudit);
            stmt.setInt(1, locationId);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
            int colCount                    = 1;
                Element auditDataEl         = toAppend.addElement("data");
                auditDataEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                auditDataEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getSalesAuditDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");

        String selectSalesAuditDetails      = "SELECT bar, pluNumber, salesQty, reportQty FROM salesAuditDetails WHERE salesAudit = ? " +
                                            " ORDER BY bar, pluNumber";

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            stmt                            = transconn.prepareStatement(selectSalesAuditDetails);
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
            int colCount                    = 1;
                Element auditDetailsEl      = toAppend.addElement("data");
                auditDetailsEl.addElement("bar").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                auditDetailsEl.addElement("plu").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                auditDetailsEl.addElement("salesQty").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                auditDetailsEl.addElement("reportQty").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void emailSalesAuditDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");
        int user                            = HandlerUtils.getOptionalInteger(toHandle, "user");
        String emailAddress                 = HandlerUtils.getOptionalString(toHandle, "email");

        int paramsSet                       = 0;
        if (user >= 0) {
            paramsSet++;
        }
        if (!(emailAddress == null || emailAddress.equals(""))) {
            paramsSet++;
        }
        if (paramsSet != 1) {
            throw new HandlerException("Only one of the following must be set: User or Email Address.  Please contact IT for support");
        }

        String selectSalesAudit             = "SELECT l.name, sA.date FROM salesAudit sA LEFT JOIN location l ON l.id = sA.location WHERE sA.id = ? ";
        String selectSalesAuditDetails      = "SELECT IFNULL(bar, 'Main Bar'), pluNumber, salesQty, reportQty, (salesQty - reportQty) FROM salesAuditDetails WHERE salesAudit = ? " +
                                            " ORDER BY bar, pluNumber";

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            if (user >= 0) {
                stmt                        = transconn.prepareStatement("SELECT email FROM user WHERE id = ?");
                stmt.setInt(1, user);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    emailAddress            = rs.getString(1);
                }
            }

            stmt                            = transconn.prepareStatement(selectSalesAudit);
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                StringBuilder salesAuditEmail
                                            = new StringBuilder();
                String locationName         = rs.getString(1);

                String subjectLine          = "USBN Sales Audit - " + locationName;
                
                salesAuditEmail.append("<tr><td><table border=1 style='border: thin solid Black;'>");
                salesAuditEmail.append("<tr><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' colspan='5' valign='top'>");
                salesAuditEmail.append("Sales Audit Details for: " + locationName + " - " + rs.getString(2));
                salesAuditEmail.append("</td></tr>");
                salesAuditEmail.append("<tr><td style='height: 20px;' valign='top'>Bar/Stand</td>");
                salesAuditEmail.append("<td style='height: 20px;' valign='top'>PLU/Item Number</td>");
                salesAuditEmail.append("<td style='height: 20px;' valign='top'>USBN Report Qty</td>");
                salesAuditEmail.append("<td style='height: 20px;' valign='top'>POS Report Qty</td>");
                salesAuditEmail.append("<td style='height: 20px;' valign='top'>Difference</td></tr>");

                stmt                        = transconn.prepareStatement(selectSalesAuditDetails);
                stmt.setInt(1, id);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                int colCount                = 1;
                    salesAuditEmail.append("<tr><td style='height: 20px;' valign='top'>");
                    salesAuditEmail.append(rs.getString(colCount++));
                    salesAuditEmail.append("</td>");
                    salesAuditEmail.append("<td style='height: 20px;' valign='top'>");
                    salesAuditEmail.append(rs.getString(colCount++));
                    salesAuditEmail.append("</td>");
                    salesAuditEmail.append("<td style='height: 20px;' valign='top'>");
                    salesAuditEmail.append(rs.getString(colCount++));
                    salesAuditEmail.append("</td>");
                    salesAuditEmail.append("<td style='height: 20px;' valign='top'>");
                    salesAuditEmail.append(rs.getString(colCount++));
                    salesAuditEmail.append("</td>");
                    salesAuditEmail.append("<td style='height: 20px;' valign='top'>");
                    salesAuditEmail.append(rs.getString(colCount++));
                    salesAuditEmail.append("</td></tr>");
                }
                sendMail("USBN Sales Audit Slip", "tech@usbeveragenet.com", emailAddress, "support@usbeveragenet.com", subjectLine, "sendMail", salesAuditEmail, false);
            } else {
                throw new HandlerException("Sales Audit not found.  Please contact IT for support");
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getTierReport(Element toHandle, Element toAppend) throws HandlerException {

        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        String periodStr                    = HandlerUtils.getRequiredString(toHandle, "periodType");

        int location                        = HandlerUtils.getOptionalInteger(toHandle, "locationId");
        int customer                        = HandlerUtils.getOptionalInteger(toHandle, "customerId");
        int tier                            = HandlerUtils.getOptionalInteger(toHandle, "tier");
        String specificLocationsString      = HandlerUtils.getOptionalString(toHandle, "specificLocations");
        
        boolean complexData                 = HandlerUtils.getOptionalBoolean(toHandle, "complexData");
        boolean byLocation                  = HandlerUtils.getOptionalBoolean(toHandle, "byLocation");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, locationRS = null;

        String selectLevel                  = " ", groupLevel = " GROUP BY t.tier, t.date", viewLevel = " ";
        int paramValue                      = 0;
        PeriodType periodType               = PeriodType.parseString(periodStr);
        if (null == periodType) {
            throw new HandlerException("Invalid period type: " + periodStr);
        }

        if (complexData) {
            viewLevel                       = ", t.poured, t.sold";
        }
        int paramsSet                       = 0;
        if (location >= 0) {
            selectLevel                     = " AND l.id = ? ";
            paramValue                      = location;
            paramsSet++;
        }
        if (customer >= 0) {
            selectLevel                     = " AND l.customer = ? ";
            paramValue                      = customer;
            if (!(specificLocationsString == null || specificLocationsString.equals(""))) {
                selectLevel                 += " AND l.id IN (" + specificLocationsString + ")";
            }
            if (byLocation) {
                groupLevel                  = " GROUP BY t.location, t.tier, t.date";
                viewLevel                   += ", t.location ";
            }
            paramsSet++;
        }
        if (tier >= 0) {
            selectLevel                     += " AND t.tier = ? ";
            paramValue                      = tier;
            paramsSet++;
        }

        if (paramsSet >= 2) {
            throw new HandlerException("Exactly one of the following must be set: tier locationId customerId");
        }

        String selectTierData               = " SELECT t.tier, COUNT(t.location), t.var, t.date" + viewLevel + " FROM tierSummary t LEFT JOIN location l ON l.id = t.location " +
                                            " WHERE t.date BETWEEN ? AND ? " + selectLevel + groupLevel + " ORDER BY t.date";
        
        DateParameter validatedStartDate    = new DateParameter(startDate);
        DateParameter validatedEndDate      = new DateParameter(endDate);

        if (!validatedStartDate.isValid()) {
            logger.debug("Aborted report, invalid start date '" + startDate + "'");
            addErrorDetail(toAppend, "Invalid Start Date");
        } else if (!validatedEndDate.isValid()) {
            logger.debug("Aborted report, invalid end date '" + endDate + "'");
            addErrorDetail(toAppend, "Invalid End Date");
        }

        try {
            Element tierData                = toAppend.addElement("tierData");
            stmt                            = transconn.prepareStatement(selectTierData);
            stmt.setString(1, validatedStartDate.toString());
            stmt.setString(2, validatedEndDate.toString());
            if (paramsSet == 1) {
                stmt.setInt(3, paramValue);
            }
            rs                              = stmt.executeQuery();
            appendTierReportXML(tierData, rs, complexData, byLocation);
        } catch (SQLException sqle) {
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void appendTierReportXML(Element toAppend, ResultSet rs, boolean complexData, boolean byLocation) throws SQLException {

        Map<Date, ArrayList> summarySet     = new HashMap<Date, ArrayList>();
        Map<Integer, Date> dateArray        = new HashMap<Integer, Date>();
        Date previous                       = null;
        ArrayList al                        = new ArrayList();
        locationMap                         = new LocationMap(transconn);
        int i                               = 0, j = 0;
        while (rs.next()) {
            if (previous == null) {
                previous                    = new Date(rs.getTimestamp(4).getTime());
            }
            if (previous.compareTo(new Date(rs.getTimestamp(4).getTime())) == 0) {
                TierSummaryStructure ts     = new TierSummaryStructure(rs.getInt(1), rs.getDouble(2), rs.getDouble(3));
                if (complexData) {
                    ts.setComplexData(rs.getDouble(5), rs.getDouble(6));
                }
                if (byLocation) {
                    ts.setLocation(rs.getInt(7));
                }
                i++;
                al.add(ts);
            } else {
                summarySet.put(previous, al);
                i                           = 0;
                j++;
                dateArray.put(j, previous);
                TierSummaryStructure ts     = new TierSummaryStructure(rs.getInt(1), rs.getDouble(2), rs.getDouble(3));
                if (complexData) {
                    ts.setComplexData(rs.getDouble(5), rs.getDouble(6));
                }
                if (byLocation) {
                    ts.setLocation(rs.getInt(7));
                }
                i++;

                previous                    = new Date(rs.getTimestamp(4).getTime());
                al                          = new ArrayList();
                al.add(ts);
            }
        }
        if (i > 0) {
            summarySet.put(previous, al);
            j++;
            dateArray.put(j, previous);
            i                               = 0;
        }
        for (i = 1; i <= j; i++) {
            ArrayList<TierSummaryStructure> arrayss
                                            = summarySet.get(dateArray.get(i));

            Element period                  = toAppend.addElement("period");
            period.addElement("periodDate").addText(String.valueOf(dateFormat.format(dateArray.get(i))));
            for (TierSummaryStructure newss : arrayss) {
                Element details             = period.addElement("details");
                details.addElement("tier").addText(String.valueOf(newss.getTier()));
                details.addElement("count").addText(String.valueOf(newss.getCount()));
                details.addElement("var").addText(String.valueOf(newss.getVar()));
                if (complexData) {
                    details.addElement("poured").addText(String.valueOf(newss.getPoured()));
                    details.addElement("sold").addText(String.valueOf(newss.getSold()));
                }
                if (byLocation) {
                    int locationId          = newss.getLocation();
                    details.addElement("locationId").addText(String.valueOf(locationId));
                    details.addElement("locationName").addText(HandlerUtils.nullToEmpty(locationMap.getLocation(locationId)));
                }
            }
        }
        locationMap = null;
    }

    private void getUserHistory(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int customerId                      = HandlerUtils.getOptionalInteger(toHandle, "customerId");
        int locationId                      = HandlerUtils.getOptionalInteger(toHandle, "locationId");
        int locationFilter                  = HandlerUtils.getOptionalInteger(toHandle, "locationFilter");
        int userId                          = HandlerUtils.getOptionalInteger(toHandle, "userId");
        int taskId                          = HandlerUtils.getOptionalInteger(toHandle, "taskId");
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        int forMobile                       = HandlerUtils.getOptionalInteger(toHandle, "forMobile");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectUsers                  = "SELECT u.id FROM user u ";
        int paramsSet                       = 0, parameter = 0;
        if (customerId > 0) {
            paramsSet++;
            parameter                       = customerId;
            selectUsers                     += " WHERE u.customer = ? ";
        }
        if (locationId > 0) {
            paramsSet++;
            parameter                       = locationId;
            selectUsers                     += " LEFT JOIN userMap uM ON uM.user = u.id WHERE uM.location = ? ";
        }
        if (userId > 0) {
            paramsSet++;
            parameter                       = userId;
            selectUsers                     += " WHERE u.id = ? ";
        }
        if (paramsSet != 1) {
            throw new HandlerException("Exactly one of the following must be set: customerId locationId userId");
        }

        String userList                     = "0";
        
        try {
            stmt                            = transconn.prepareStatement(selectUsers);
            stmt.setInt(1, parameter);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                userList                    += ", " + rs.getString(1);
            }

            if (locationId > 0) {
                stmt                        = transconn.prepareStatement("SELECT u.id FROM user u LEFT JOIN location l ON l.customer = u.customer WHERE u.isManager = 1 AND l.id = ? ");
                stmt.setInt(1, locationId);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    userList                += ", " + rs.getString(1);
                }
            }
            if(forMobile<=0){
                int count                       = 1;
                String sql                      = "SELECT u.name, uH.location, t.description, uH.description, uH.timeStamp FROM userHistory uH LEFT JOIN task t ON t.id = uH.task " +
                                                " LEFT JOIN user u ON u.id = uH.user WHERE u.id IN ( " + userList  + ") AND uH.timestamp BETWEEN ? AND ? " +
                                                (taskId > 0 ? " AND t.id = ? " : "") + (locationFilter > 0 ? " AND uH.location IN (-1, ?) " : "") + " ORDER BY uH.user, uH.timestamp; ";
                stmt                            = transconn.prepareStatement(sql);
                stmt.setString(count++,startDate);
                stmt.setString(count++,endDate);
                if (taskId > 0) {
                    stmt.setInt(count++, taskId);
                }
                if (locationFilter > 0) {
                    stmt.setInt(count++, locationFilter);
                }
                rs                              = stmt.executeQuery();
                getUserHistoryXML(toAppend, rs);
            } else {
                int count                       = 1;
                String sql                      = "SELECT u.name, uH.location, t.description, uH.description, uH.timeStamp FROM userHistoryMobile uH LEFT JOIN task t ON t.id = uH.task " +
                                                " LEFT JOIN user u ON u.id = uH.user WHERE u.id IN ( " + userList  + ") AND uH.timestamp BETWEEN ? AND ? " +
                                                (taskId > 0 ? " AND t.id = ? " : "") + (locationFilter > 0 ? " AND uH.location IN (0, ?) " : "") + " ORDER BY uH.user, uH.timestamp; ";
                stmt                            = transconn.prepareStatement(sql);
                stmt.setString(count++,startDate);
                stmt.setString(count++,endDate);
                if (taskId > 0) {
                    stmt.setInt(count++, taskId);
                }
                if (locationFilter > 0) {
                    stmt.setInt(count++, locationFilter);
                }
                rs                              = stmt.executeQuery();
                getUserHistoryXML(toAppend, rs);
            }
                
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getUserHistoryXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element auditDataEl             = toAppend.addElement("data");
            auditDataEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            auditDataEl.addElement("location").addText(String.valueOf(rs.getInt(colCount++)));
            auditDataEl.addElement("task").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            auditDataEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            auditDataEl.addElement("time").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void provisionBevBox(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");
        boolean reProvision                 = HandlerUtils.getOptionalBoolean(toHandle, "reProvision");
        String sqlITChecklist               = " SELECT location, name, dhcp, mac, systemInterval, startSystem, version, INET_NTOA(ip), INET_NTOA(gateway), INET_NTOA(netmask), " +
                                            " INET_NTOA(dns1), INET_NTOA(dns2) FROM bevBox WHERE id = ? ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String bevBox                       = "Unknown BevBox", macAddress = "00.00.00.00.00.00", dns1 = "0.0.0.0", dns2 = "0.0.0.0", gateway = "0.0.0.0",
                                            netmask = "0.0.0.0", staticIP = "0.0.0.0", systemInterval = "10", systemStartNumber = "0", version = "5.01";
        int dhcp                            = 1, locationId = 0;
        try {
            stmt                            = transconn.prepareStatement(sqlITChecklist);
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int colCount                = 1;
                locationId                  = rs.getInt(colCount++);
                bevBox                      = rs.getString(colCount++);
                dhcp                        = rs.getInt(colCount++);
                macAddress                  = rs.getString(colCount++);
                systemInterval              = rs.getString(colCount++);
                systemStartNumber           = rs.getString(colCount++);
                version                     = rs.getString(colCount++);
                if (dhcp == 0) {
                    staticIP                = rs.getString(colCount++);
                    gateway                 = rs.getString(colCount++);
                    netmask                 = rs.getString(colCount++);
                    dns1                    = rs.getString(colCount++);
                    dns2                    = rs.getString(colCount++);
                }
            }
            
            if ("5.0".equals(version) || "5.1".equals(version)) {
                stmt                        = transconn.prepareStatement("UPDATE bevBox SET provisioned = 0 WHERE id = ?;");
                stmt.setInt(1, id);
                stmt.executeUpdate();
            } else if (reProvision) {
                ParameterFile pFile       = new ParameterFile(macAddress.replace(".", ""));
                pFile.setFieldValue("zonefour.sytemInterval", systemInterval);
                pFile.setFieldValue("zonefour.sytemNumber", systemStartNumber);
                pFile.setFieldValue("zonetwo.netDNS1", dns1);
                pFile.setFieldValue("zonetwo.netDNS2", dns2);
                pFile.setFieldValue("zonetwo.netGateway", gateway);
                pFile.setFieldValue("zonetwo.netIP", staticIP);
                pFile.setFieldValue("onetwo.netMask", netmask);
                pFile.setFieldValue("useDHCP", (dhcp == 1 ? "1" : "0"));
                pFile.store();
                String logMessage           = "Re-Provisioned Parameter file for '" + bevBox + "'";
                logger.portalDetail(callerId, "reprovisionBevBox", locationId, "bevBox", id, logMessage, transconn);
            } else {
                ParameterFile pFile        = new ParameterFile("paramFile", "000000000000");
                String key                 = ClientKeyManager.createClientKey(locationId, 1, 100);
                pFile.setField("MACNAME", macAddress.replace(".", ""));
                pFile.setField("SYSINTERVAL", systemInterval);
                pFile.setField("SYSTEMSTARTNUMBER", systemStartNumber);
                pFile.setField("CLIENTKEY", key);
                pFile.setField("LOCATIONID", String.valueOf(locationId));
                pFile.setField("MACADDR", macAddress);
                pFile.setField("DNS1", dns1);
                pFile.setField("DNS2", dns2);
                pFile.setField("GATEWAY", gateway);
                pFile.setField("STATICIP", staticIP);
                pFile.setField("NETMASK", netmask);
                pFile.setField("DHCP", (dhcp == 1 ? "1" : "0"));
                pFile.store();
                String logMessage           = "Provisioned new Parameter file for '" + bevBox + "'";
                logger.portalDetail(callerId, "provisionBevBox", locationId, "bevBox", id, logMessage, transconn);
            }
        } catch (Exception me) {
            logger.dbError("Cannot create paramater file: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void createPackingSlip(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        String orderDate                    = HandlerUtils.getRequiredString(toHandle, "orderDate");
        String customerContact              = HandlerUtils.getOptionalString(toHandle, "customerContact");
        String billContact                  = HandlerUtils.getOptionalString(toHandle, "billContact");
        String billAddr1                    = HandlerUtils.getRequiredString(toHandle, "billAddr1");
        String billAddr2                    = HandlerUtils.getRequiredString(toHandle, "billAddr2");
        String locContact                   = HandlerUtils.getRequiredString(toHandle, "locContact");
        String locAddr1                     = HandlerUtils.getRequiredString(toHandle, "locAddr1");
        String locAddr2                     = HandlerUtils.getRequiredString(toHandle, "locAddr2");
        String locPhone                     = HandlerUtils.getRequiredString(toHandle, "locPhone");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectCustomer               = "SELECT BC.Customer_Name, BL.location_name FROM BOSS_Location BL LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id WHERE BL.id = ? ";
        String selectPackingSlip            = "SELECT id FROM packingSlip WHERE user = ? AND location = ? AND orderDate = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        String insertPackingSlip            = "INSERT INTO packingSlip (user, location, shipAddr, billAddr, orderDate, customerContact) VALUES (?,?,?,?,?,?) ";
        String insertPackingSlipDetails     = "INSERT INTO packingSlipDetails (packingSlip, equipment, quantity) VALUES (?,?,?) ";
        String selectEquipment              = "SELECT id, name, price, quantity FROM equipment ";
        String insertEquipmentDepletion     = "INSERT INTO equipmentDepletion (user, location, type) VALUES (?,?,?) ";
        String insertEquipmentDepletionDet  = "INSERT INTO equipmentDepletionDetails (depletion, equipment, startQuantity, endQuantity) VALUES (?,?,?,?) ";
        String updateEquipmentQuantity      = "UPDATE equipment SET quantity = quantity - ? WHERE id = ?";
        String updateTotal                  = "UPDATE packingSlip SET total = ? WHERE id = ?";

        HashMap<Integer, String> equipmentName
                                            = new HashMap<Integer, String>();
        HashMap<Integer, Double> equipmentPrice
                                            = new HashMap<Integer, Double>();
        HashMap<Integer, Integer> equipmentQty
                                            = new HashMap<Integer, Integer>();
        double total                        = 0 ;

        try {

            stmt                            = transconn.prepareStatement(selectPackingSlip);
            stmt.setInt(1, callerId);
            stmt.setInt(2, locationId);
            stmt.setString(3, orderDate);
            rs                              = stmt.executeQuery();
            if (!rs.next()) {
                int packingSlipId           = 0;
                stmt                        = transconn.prepareStatement(selectEquipment);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    equipmentName.put(rs.getInt(1), rs.getString(2));
                    equipmentPrice.put(rs.getInt(1), rs.getDouble(3));
                    equipmentQty.put(rs.getInt(1), rs.getInt(4));
                }
                String customerName         = "Unknown Customer", locationName = "Unknown Location";
                stmt                        = transconn.prepareStatement(selectCustomer);
                stmt.setInt(1, locationId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    customerName            = rs.getString(1);
                    locationName            = rs.getString(2);
                }

                stmt                        = transconn.prepareStatement(insertPackingSlip);
                stmt.setInt(1, callerId);
                stmt.setInt(2, locationId);
                stmt.setString(3, locContact + " " + locAddr1 + " " + locAddr2 + " " + locPhone);
                stmt.setString(4, billContact + " " + locationName + " " + billAddr1 + " " + billAddr2);
                stmt.setString(5, orderDate);
                stmt.setString(6, customerContact);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    logger.debug("Created new packing slip");
                    packingSlipId           = rs.getInt(1);

                    String logMessage       = "Create new Packing Slip for '" + locationName + "'";
                    logger.portalDetail(callerId, "createPackingSlip", locationId, "BOSS_Location", locationId, logMessage, transconn);
                } else {
                    //logger.dbError("first call to LAST_INSERT_ID in addUpdateBOSSLocation failed to return a result for adding usbn location");
                    throw new HandlerException("Database Error");
                }

                StringBuilder newLocationEmail
                                            = new StringBuilder();
                newLocationEmail.append("<tr><td><table border=1 style='border: thin solid Black;'>");
                newLocationEmail.append("<tr><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' rowspan='4' valign='top' >Bill To:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(billContact);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' rowspan='4' valign='top' >Ship To:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(locContact);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locationName);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locAddr1);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(billAddr1);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locAddr2);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(billAddr2);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locPhone);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px; width: 15%;' valign='top' >Order Date:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(orderDate);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px; width: 15%;' valign='top' >Customer Contact:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(customerContact);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td colspan='6' align='center'><table style='border-style: solid; border-width: thin' width='100%'>");
                newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%; background-color: #C0C0C0;'>Item Description</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%; background-color: #C0C0C0;' >Quantity</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%; background-color: #C0C0C0;' >Price</td></tr>");

                stmt                        = transconn.prepareStatement(insertEquipmentDepletion);
                stmt.setInt(1, callerId);
                stmt.setInt(2, locationId);
                stmt.setInt(3, 1);
                stmt.executeUpdate();

                int depletionId             = 0;
                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    depletionId             = rs.getInt(1);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in depletion failed to return a result");
                    throw new HandlerException("Database Error");
                }

                NumberFormat nf             = NumberFormat.getCurrencyInstance();

                Iterator equipments         = toHandle.elementIterator("equipment");
                while (equipments.hasNext()) {
                    Element equipment       = (Element) equipments.next();
                    int id                  = HandlerUtils.getRequiredInteger(equipment, "id");
                    int quantity            = HandlerUtils.getRequiredInteger(equipment, "quantity");

                    newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%;'>" +  equipmentName.get(id) + "</td>");
                    newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                    newLocationEmail.append(quantity);
                    newLocationEmail.append("</td><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                    newLocationEmail.append(nf.format(equipmentPrice.get(id) * Integer.valueOf(quantity)));
                    total                   += (equipmentPrice.get(id) * Integer.valueOf(quantity));
                    newLocationEmail.append("</td></tr>");

                    stmt                    = transconn.prepareStatement(insertPackingSlipDetails);
                    stmt.setInt(1, packingSlipId);
                    stmt.setInt(2, id);
                    stmt.setInt(3, quantity);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(insertEquipmentDepletionDet);
                    stmt.setInt(1, depletionId);
                    stmt.setInt(2, id);
                    stmt.setInt(3, equipmentQty.get(id));
                    stmt.setInt(4, equipmentQty.get(id) - quantity);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(updateEquipmentQuantity);
                    stmt.setInt(1, quantity);
                    stmt.setInt(2, id);
                    stmt.executeUpdate();
                }

                newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 85%; align='right'>Total");
                newLocationEmail.append("</td><td /><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                newLocationEmail.append(nf.format(total));
                newLocationEmail.append("</td></tr></table>");

                newLocationEmail.append("</td></tr></table></td></tr>");

                String subjectLine          = "USBN Packing Slip - " + customerName + " : " + locationName;
                sendMail("USBN Packing Slip", "tech@usbeveragenet.com", "packingslip@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", newLocationEmail, false);

                stmt                       = transconn.prepareStatement(updateTotal);
                stmt.setDouble(1,total);
                stmt.setInt(2, packingSlipId);
                stmt.executeUpdate();
            }
        } catch (Exception me) {
            logger.dbError("Cannot create packing slip: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getShipmentReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        String addrState                    = HandlerUtils.getOptionalString(toHandle, "addressState");
        String sqlAddrState                 = "" ;
        
        if(addrState.length() > 0) {
            sqlAddrState                    = " AND BL.location_state = " + addrState;
        }

        String sqlShipment                  = " SELECT BC.id, BC.customer_name, BL.id, BL.location_name, BL.location_state, pS.orderDate, pS.id, pS.total FROM packingSlip pS " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = pS.location LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id "+
                                            " WHERE pS.orderDate BETWEEN ? AND ? "+ sqlAddrState +"  GROUP BY pS.id ;";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        
        try {
            stmt                            = transconn.prepareStatement(sqlShipment);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element shipmentReportEl    = toAppend.addElement("shipmentReport");
                shipmentReportEl.addElement("customerId").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                shipmentReportEl.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                shipmentReportEl.addElement("locationId").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                shipmentReportEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                shipmentReportEl.addElement("locationState").addText(HandlerUtils.nullToEmpty(rs.getString(5)));
                shipmentReportEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(6)));
                shipmentReportEl.addElement("packingSlip").addText(HandlerUtils.nullToEmpty(rs.getString(7)));
                shipmentReportEl.addElement("total").addText(HandlerUtils.nullToEmpty(rs.getString(8)));
            }
        } catch (Exception me) {
            logger.dbError("Cannot create Shipment Report: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
      private void getShippedEquipment(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        String addrState                    = HandlerUtils.getOptionalString(toHandle, "addressState");
        
        String sqlShipment                  = "SELECT eDD.equipment, e.name, SUM(eDD.startQuantity-eDD.endQuantity), (SUM(eDD.startQuantity-eDD.endQuantity)*e.price) FROM equipmentDepletion eD"
                                            + " LEFT JOIN equipmentDepletionDetails eDD ON eDD.depletion = eD.id LEFT JOIN BOSS_Location BL ON BL.id=eD.location"
                                            + " LEFT JOIN equipment e ON e.id=eDD.equipment WHERE eD.type=1 AND BL.location_state='NY' AND  eD.date BETWEEN ?   AND ? "
                                            + " GROUP BY eDD.equipment ORDER BY e.name;";
        String selectLocation               = "SELECT CONCAT (BC.Customer_Name,' - ',location_name)  ,    SUM(eDD.startQuantity-eDD.endQuantity), (SUM(eDD.startQuantity-eDD.endQuantity)*e.price) FROM equipmentDepletion eD"
                                            + " LEFT JOIN equipmentDepletionDetails eDD ON eDD.depletion = eD.id LEFT JOIN BOSS_Location BL ON BL.id=eD.location"
                                            + " LEFT JOIN BOSS_Customer BC ON BC.id =BL.customer_id  LEFT JOIN equipment e ON e.id=eDD.equipment WHERE eD.type=1 AND BL.location_state='NY' AND eDD.equipment = ? AND  eD.date BETWEEN ?  AND ? "
                                            + "  GROUP BY BL.id ORDER BY location_name;";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null , rsDetails= null;
        
        try {
            stmt                            = transconn.prepareStatement(sqlShipment);
            //stmt.setString(1, sqlAddrState);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element shipmentReportEl    = toAppend.addElement("equipment");
                shipmentReportEl.addElement("equipmentId").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                shipmentReportEl.addElement("equipmentName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                shipmentReportEl.addElement("quantity").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                shipmentReportEl.addElement("price").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                int equipment               = rs.getInt(1);
                stmt                        = transconn.prepareStatement(selectLocation);
                stmt.setInt(1, equipment);
                stmt.setString(2, startDate);
                stmt.setString(3, endDate);
                rsDetails                   = stmt.executeQuery();
                while(rsDetails.next()) {
                    Element shipmentLocEl   = shipmentReportEl.addElement("details");
                    shipmentLocEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rsDetails.getString(1)));
                    shipmentLocEl.addElement("quantity").addText(HandlerUtils.nullToEmpty(rsDetails.getString(2)));
                    shipmentLocEl.addElement("price").addText(HandlerUtils.nullToEmpty(rsDetails.getString(3)));
                }
                                
            }
        } catch (Exception me) {
            logger.dbError("Cannot create Shipment Report: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getShipmentDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int packingSlip                     = HandlerUtils.getRequiredInteger(toHandle, "packingSlip");
        

        String sqlShipment                  = " SELECT e.id, e.name, psd.quantity, e.price from packingSlipDetails psd "
                                            + " LEFT JOIN eqipment e ON psd.equipment = e.id WHERE psd.packingSlip = ? " ;        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
                      
        try {
            stmt                            = transconn.prepareStatement(sqlShipment);
            stmt.setInt(1, packingSlip);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element shipmentDetailEl    = toAppend.addElement("shipmentDetail");
                shipmentDetailEl.addElement("eqipmentId").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                shipmentDetailEl.addElement("equipmentName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                int qty                     = rs.getInt(3);
                double total                = qty * rs.getDouble(4);
                shipmentDetailEl.addElement("qty").addText(Integer.toString(qty));
                shipmentDetailEl.addElement("total").addText(HandlerUtils.nullToEmpty(nf.format(total)));
                
                }
        } catch (Exception me) {
            logger.dbError("Cannot create Shipment Details: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getCalibrationValue(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");

        String sqlITChecklist               = " SELECT location, mac, IF(version = '5.0', startSystem, startSystem / 3), IF(version = '5.0', true, false) FROM bevBox WHERE id = ? ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String macAddress                   = "00.00.00.00.00.00";
        int startSystem                     = 0, locationId = 0;
        String dataString                   = "";
        try {
            stmt                            = transconn.prepareStatement(sqlITChecklist);
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                locationId                  = rs.getInt(1);
                macAddress                  = rs.getString(2);
                startSystem                 = rs.getInt(3);
                if (rs.getInt(4) == 0) {
                    ParameterFile cFile     = new ParameterFile(macAddress.replace(".", ""));
                    for (int i = 1; i <= 48; i++) {
                        dataString          +=String.valueOf(i + (startSystem * 48)) + ":" + cFile.getLineCalibration(String.format("%03d", i)) + "|";
                    }
                } else {
                    stmt                    = transconn.prepareStatement("SELECT c.line + 1, c.value FROM calibration c LEFT JOIN system s ON s.id = c.system WHERE s.location = ? AND s.systemId = ?");
                    stmt.setInt(1, locationId);
                    stmt.setInt(2, startSystem);
                    rs                      = stmt.executeQuery();
                    while (rs.next()) {
                        dataString          +=String.valueOf(rs.getInt(1) + (startSystem * 40)) + ":" + rs.getString(2) + "|";
                    }
                }
                Element calValueEl          = toAppend.addElement("data");
                calValueEl.addElement("value").addText(dataString.substring(0, dataString.length()-1));
            }
        } catch (Exception me) {
            logger.dbError("Cannot create paramater file: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getAccounts(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int location                        = HandlerUtils.getOptionalInteger(toHandle, "location");
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString");
        int type                            = HandlerUtils.getRequiredInteger(toHandle, "type");
        int filter                          = HandlerUtils.getRequiredInteger(toHandle, "filter");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, emailRS = null;

        String sql                          =  "SELECT A.id, A.name, A.cycle, COUNT(lAM.location), ROUND(SUM(lAM.amount * lAM.billMonths)/12,2) FROM accounts A " +
                                            " LEFT JOIN locationAccountMap lAM ON lAM.account = A.id LEFT JOIN BOSS_Location BL ON BL.id = lAM.location " +
                                            " LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location WHERE A.active = 1 ";
        if (location > 0) {
            sql                             += " AND lAM.location = ? ";
        } 
        switch (type) {
            case 0:
                sql                         += " AND lD.active = 1 AND BL.sendToInstall = 1 ";
                break;
            case 1:
                sql                         += " AND BL.sendToInstall = 0 ";
                break;
            case 2:
                sql                         += " AND lD.active = 0 AND BL.sendToInstall = 1 ";
                break;
            default:
                break;
        }
        if (null != searchString) {
            sql                             += " AND (A.name like '%" + searchString.replaceAll("'", "\'") + "%' OR A.addrStreet like '%" + searchString.replaceAll("'", "\'") +
                                            "%' OR A.addrCity like '%" + searchString.replaceAll("'", "\'") +  "%' OR A.addrState like '%" + searchString.replaceAll("'", "\'") +  "%') ";
        }
        sql                                 += GetFilterString(filter) + " GROUP BY A.id ORDER BY A.name ";

        try {
            stmt                            = transconn.prepareStatement(sql);
            if (location > 0) {
                stmt.setInt(1,location);
            }
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                int accountId               = rs.getInt(colCount++);
                Element accountDetailsEl    = toAppend.addElement("accountDetails");
                accountDetailsEl.addElement("id").addText(String.valueOf(accountId));
                accountDetailsEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                accountDetailsEl.addElement("cycle").addText(String.valueOf(rs.getInt(colCount++)));
                accountDetailsEl.addElement("count").addText(String.valueOf(rs.getInt(colCount++)));
                accountDetailsEl.addElement("amount").addText(String.valueOf(rs.getDouble(colCount++)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(emailRS);
            close(stmt);
        }
    }

    private void getAccountsDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int accountId                       = HandlerUtils.getRequiredInteger(toHandle, "accountId");

        String selectAccountInfo            = "SELECT A.name, A.addrStreet, A.addrCity, A.addrState, A.addrZip, A.method, A.delivery, A.cycle FROM accounts A " +
                                            " WHERE A.id = ? ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectAccountInfo);
            stmt.setInt(1,accountId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int colCount                = 1;
                Element accountDetailsEl    = toAppend.addElement("accountDetails");
                accountDetailsEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                accountDetailsEl.addElement("addrStreet").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                accountDetailsEl.addElement("addrCity").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                accountDetailsEl.addElement("addrState").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                accountDetailsEl.addElement("addrZip").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                accountDetailsEl.addElement("method").addText(String.valueOf(rs.getInt(colCount++)));
                accountDetailsEl.addElement("delivery").addText(String.valueOf(rs.getInt(colCount++)));
                accountDetailsEl.addElement("cycle").addText(String.valueOf(rs.getInt(colCount++)));
                
                stmt                        = transconn.prepareStatement("SELECT id, contact, email, fax FROM accountEmailMap WHERE account = ?");
                stmt.setInt(1,accountId);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    Element emailEl         = toAppend.addElement("emails");
                    emailEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                    emailEl.addElement("contact").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                    emailEl.addElement("email").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                    emailEl.addElement("fax").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getAccountTransactions(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int account                         = HandlerUtils.getRequiredInteger(toHandle, "account");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, invoiceRS = null;

        String sql                          = "(SELECT 1, i.id, i.invoiceNumber, i.date, i.amount, i.outstanding FROM accounts a LEFT JOIN invoice i ON i.account = a.id " +
                                            " WHERE i.active = 1 AND i.approved = 1 AND a.id = ? ORDER BY i.date DESC) " +
                                            " UNION " +
                                            " (SELECT 2, p.id, p.details, p.received, p.amount, p.outstanding FROM accounts a LEFT JOIN payment p ON p.account = a.id " +
                                            " WHERE a.id = ? ORDER BY p.received DESC) " +
                                            " ORDER BY date DESC";
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,account);
            stmt.setInt(2,account);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                Element transactionEl       = toAppend.addElement("transaction");
                transactionEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
                transactionEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                transactionEl.addElement("info").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("amount").addText(String.valueOf(rs.getDouble(colCount++)));
                transactionEl.addElement("balance").addText(String.valueOf(rs.getDouble(colCount++)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(invoiceRS);
            close(rs);
            close(stmt);
        }
    }

    private void getLocationTransactions(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, paymentRS = null;

        String sql                          = "SELECT i.id, i.invoiceNumber, i.date, i.amount, i.outstanding FROM invoice i " +
                                            " LEFT JOIN invoiceDetails iD ON iD.invoice = i.id WHERE i.active = 1 AND i.approved = 1 AND iD.location = ? " +
                                            " ORDER BY i.date DESC";
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,locationId);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1, invoiceId = -1;
                Element transactionEl       = toAppend.addElement("transaction");
                invoiceId                   = rs.getInt(colCount++);
                transactionEl.addElement("id").addText(String.valueOf(invoiceId));
                transactionEl.addElement("info").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("amount").addText(String.valueOf(rs.getDouble(colCount++)));
                double balance              = rs.getDouble(colCount++);
                transactionEl.addElement("balance").addText(String.valueOf(balance));
                if (balance <= 0.00) {
                    stmt                    = transconn.prepareStatement("SELECT p.id, p.details, p.received, p.amount, p.outstanding FROM payment p WHERE p.invoice = ?;");
                    stmt.setInt(1,invoiceId);
                    paymentRS               = stmt.executeQuery();
                    while (paymentRS.next()) {
                        Element paymentEl   = transactionEl.addElement("payment");
                        paymentEl.addElement("id").addText(String.valueOf(paymentRS.getInt(colCount++)));
                        paymentEl.addElement("info").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
                        paymentEl.addElement("date").addText(HandlerUtils.nullToEmpty(paymentRS.getString(colCount++)));
                        paymentEl.addElement("amount").addText(String.valueOf(paymentRS.getDouble(colCount++)));
                        paymentEl.addElement("balance").addText(String.valueOf(paymentRS.getDouble(colCount++)));
                    }
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(paymentRS);
            close(rs);
            close(stmt);
        }
    }

    private String GetFilterString (int filter) {
        String filerString                  = "";
        switch(filter) {
            case 1:
                filerString                 = " AND A.method = 1 ";
                break;
            case 2:
                filerString                 = " AND A.method = 2 ";
                break;
            case 3:
                filerString                 = " AND A.cycle = 1 ";
                break;
            case 4:
                filerString                 = " AND A.cycle = 2 ";
                break;
            case 5:
                filerString                 = " AND A.cycle = 3 ";
                break;
            case 6:
                filerString                 = " AND A.cycle = 4 ";
                break;
            case 7:
                filerString                 = " AND A.type = 1 ";
                break;
            case 8:
                filerString                 = " AND A.type = 2 ";
                break;
        }
        return filerString;
    }

    private void getAccountStatement(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int account                         = HandlerUtils.getRequiredInteger(toHandle, "account");
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sqlTransactions              = "(SELECT 0 Type, ? date, 'Balance Forward', SUM(amount) FROM " +
                                            " (SELECT SUM(i.amount) amount FROM invoice i WHERE i.active = 1 AND i.approved = 1 AND i.account = ? " +
                                            " AND i.date < ? AND i.received IS NULL " +
                                            " UNION " +
                                            " SELECT SUM(pIM.amount) amount FROM invoice i " +
                                            " LEFT JOIN paymentInvoiceMap pIM ON pIM.invoice = i.id LEFT JOIN payment p ON p.id = pIM.payment WHERE i.active = 1 AND " +
                                            " i.approved = 1 AND i.account = ? AND i.date < ? AND p.received >= ?) AS a) " +
                                            " UNION " +
                                            " (SELECT 1 Type, i.date, CONCAT('Invoice #', i.invoiceNumber), SUM(i.amount) FROM accounts a " +
                                            " LEFT JOIN invoice i ON i.account = a.id WHERE i.active = 1 AND i.approved = 1 AND a.id = ? AND i.date BETWEEN ? AND ? " +
                                            " GROUP BY i.id ORDER BY i.date DESC) " +
                                            " UNION " +
                                            " (SELECT 2 Type, p.received, CONCAT('Payment #', p.details), SUM(p.amount)*-1 " +
                                            " FROM accounts a LEFT JOIN payment p ON p.account = a.id WHERE a.id = ? AND p.received BETWEEN ? AND ? GROUP BY p.id " +
                                            " ORDER BY p.received DESC) ORDER BY date, Type;";
        try {
            int colCount                    = 1;
            double incrementailBalance      = 0.0;
            stmt                            = transconn.prepareStatement(sqlTransactions);
            stmt.setString(colCount++, startDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setString(colCount++, startDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setString(colCount++, endDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setString(colCount++, endDate);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                colCount                    = 1;
                Element statementEl         = toAppend.addElement("statement");
                statementEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
                statementEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                statementEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                double amount               = rs.getDouble(colCount++);
                statementEl.addElement("amount").addText(String.valueOf(amount));
                incrementailBalance         += amount;
                statementEl.addElement("balance").addText(String.valueOf(incrementailBalance));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void addUpdateAccounts(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            Iterator updateAccounts         = toHandle.elementIterator("updateAccounts");
            while (updateAccounts.hasNext()) {
                int colCount                = 1;
                Element accounts            = (Element) updateAccounts.next();
                int id                      = HandlerUtils.getRequiredInteger(accounts, "id");
                String name                 = HandlerUtils.getRequiredString(accounts, "name");
                String addrStreet           = HandlerUtils.getRequiredString(accounts, "addrStreet");
                String addrCity             = HandlerUtils.getRequiredString(accounts, "addrCity");
                String addrState            = HandlerUtils.getRequiredString(accounts, "addrState");
                String addrZip              = HandlerUtils.getRequiredString(accounts, "addrZip");
                int method                  = HandlerUtils.getRequiredInteger(accounts, "method");
                int delivery                = HandlerUtils.getRequiredInteger(accounts, "delivery");
                int cycle                   = HandlerUtils.getRequiredInteger(accounts, "cycle");

                String updateReminder       = " UPDATE accounts SET name=?, addrStreet=?, addrCity=?, addrState=?, addrZip=?, method=?, delivery=?, cycle=? WHERE id = ? ";

                stmt                        = transconn.prepareStatement(updateReminder);
                stmt.setString(colCount++, name);
                stmt.setString(colCount++, addrStreet);
                stmt.setString(colCount++, addrCity);
                stmt.setString(colCount++, addrState);
                stmt.setString(colCount++, addrZip);
                stmt.setInt(colCount++, method);
                stmt.setInt(colCount++, delivery);
                stmt.setInt(colCount++, cycle);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                String logMessage           = "Updated Accounts for '" + name + "'";
                logger.portalDetail(callerId, "updateAccounts", 0, "accounts", id, logMessage, transconn);
                toAppend.addElement("accountId").addText(String.valueOf(id));
            }

            Iterator addAccounts            = toHandle.elementIterator("addAccounts");
            while (addAccounts.hasNext()) {
                int colCount                = 1;
                Element accounts            = (Element) addAccounts.next();
                String name                 = HandlerUtils.getRequiredString(accounts, "name");
                String addrStreet           = HandlerUtils.getRequiredString(accounts, "addrStreet");
                String addrCity             = HandlerUtils.getRequiredString(accounts, "addrCity");
                String addrState            = HandlerUtils.getRequiredString(accounts, "addrState");
                String addrZip              = HandlerUtils.getRequiredString(accounts, "addrZip");
                int method                  = HandlerUtils.getRequiredInteger(accounts, "method");
                int delivery                = HandlerUtils.getRequiredInteger(accounts, "delivery");
                int cycle                   = HandlerUtils.getRequiredInteger(accounts, "cycle");
                int type                    = HandlerUtils.getRequiredInteger(accounts, "type");

                String addReminder          = " INSERT INTO accounts (name, addrStreet, addrCity, addrState, addrZip, method, delivery, cycle, type) " +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?) ";
                String getLastId            = " SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement(addReminder);
                stmt.setString(colCount++, name);
                stmt.setString(colCount++, addrStreet);
                stmt.setString(colCount++, addrCity);
                stmt.setString(colCount++, addrState);
                stmt.setString(colCount++, addrZip);
                stmt.setInt(colCount++, method);
                stmt.setInt(colCount++, delivery);
                stmt.setInt(colCount++, cycle);
                stmt.setInt(colCount++, type);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int id                  = rs.getInt(1);
                    String logMessage       = "Added Accounts for '" + name + "'";
                    logger.portalDetail(callerId, "addAccounts", 0, "accounts", id, logMessage, transconn);
                    toAppend.addElement("accountId").addText(String.valueOf(id));
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addAccounts failed to return a result");
                    throw new HandlerException("Database Error");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void deleteAccounts(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String select                       = " SELECT id FROM locationAccountMap WHERE account = ? ";
        String delete                       = " DELETE FROM accounts WHERE id = ? ";

        Iterator i                          = toHandle.elementIterator("accounts");
        try {
            while (i.hasNext()) {
                Element accounts            = (Element) i.next();
                int accountId               = HandlerUtils.getRequiredInteger(accounts, "accountId");
                
                stmt                        = transconn.prepareStatement(select);
                stmt.setInt(1,accountId);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {
                    stmt                    = transconn.prepareStatement(delete);
                    stmt.setInt(1,accountId);
                    stmt.executeUpdate();

                    String logMessage       = "Deleted Account '" + accountId + "'";
                    logger.portalDetail(callerId, "deleteAccounts", 0, "accounts", accountId, logMessage, transconn);
                } else {
                    addErrorDetail(toAppend, "This account has locations assigned to it.  Please delete the locations before deleting the account.");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getAccountLocations(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int account                         = HandlerUtils.getRequiredInteger(toHandle, "account");
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT BL.id, BL.location_name, LAM.amount, LAM.setup, LAM.period, LAM.status FROM locationAccountMap LAM " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = LAM.location WHERE LAM.account = ? ORDER BY BL.location_name";
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,account);
            rs                              = stmt.executeQuery();
            getAccountLocationsXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getAccountLocationsXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element accountLocationsEl      = toAppend.addElement("accountLocations");
            accountLocationsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            accountLocationsEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            accountLocationsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            accountLocationsEl.addElement("setup").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            accountLocationsEl.addElement("period").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            accountLocationsEl.addElement("status").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void addUpdateTransferLocationAccounts(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            Iterator addLocationAccounts    = toHandle.elementIterator("addLocationAccounts");
            while (addLocationAccounts.hasNext()) {
                Element accounts            = (Element) addLocationAccounts.next();
                int location                = HandlerUtils.getRequiredInteger(accounts, "location");
                int account                 = HandlerUtils.getRequiredInteger(accounts, "account");
                int lineCount               = HandlerUtils.getRequiredInteger(accounts, "lineCount");
                double monthlyDiscount      = HandlerUtils.getRequiredDouble(accounts, "monthlyDiscount");
                double setupDiscount        = HandlerUtils.getRequiredDouble(accounts, "setupDiscount");
                int period                  = HandlerUtils.getRequiredInteger(accounts, "period");

                String select               = " SELECT id FROM locationAccountMap WHERE location = ? ";
                String selectRateCard       = " SELECT BC.rateCard FROM BOSS_Location BL LEFT JOIN BOSS_Customer BC ON BC.id = BL.Customer_id WHERE BL.id = ? ";
                String addAccountLocation   = " INSERT INTO locationAccountMap (location, account, rateCard, monthlyDiscount, setupDiscount, period) " +
                                            " VALUES (?, ?, ?, ?, ?, ?) ";
                String getLastId            = " SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement(select);
                stmt.setInt(1,location);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {
                    int rateCard            = 1;
                    stmt                    = transconn.prepareStatement(selectRateCard);
                    stmt.setInt(1,location);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        rateCard            = rs.getInt(1);
                    }

                    stmt                    = transconn.prepareStatement(addAccountLocation);
                    stmt.setInt(1, location);
                    stmt.setInt(2, account);
                    stmt.setInt(3, rateCard);
                    stmt.setDouble(4, monthlyDiscount);
                    stmt.setDouble(5, setupDiscount);
                    stmt.setInt(6, period);
                    stmt.executeUpdate();

                    reviseLocationAmount(location, lineCount);

                    if (monthlyDiscount > 0 || setupDiscount > 0) {
                        SendApprovalAlert(location, monthlyDiscount, setupDiscount);
                    }

                    stmt                    = transconn.prepareStatement(getLastId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        int id              = rs.getInt(1);
                        String logMessage   = "Added Location Accounts '" + id + "'";
                        logger.portalDetail(callerId, "addLocationAccounts", 0, "locationAccountMap", id, logMessage, transconn);
                    } else {
                        logger.dbError("first call to LAST_INSERT_ID in addLocationAccounts failed to return a result");
                        throw new HandlerException("Database Error");
                    }

                } else {
                    addErrorDetail(toAppend, "This location is already assigned to another account.  Please check your request.");
                }
            }
            
            Iterator updateLocationAccounts = toHandle.elementIterator("updateLocationAccounts");
            while (updateLocationAccounts.hasNext()) {
                Element accounts            = (Element) updateLocationAccounts.next();
                int id                      = HandlerUtils.getOptionalInteger(accounts, "id");
                double monthlyDiscount      = HandlerUtils.getRequiredDouble(accounts, "monthlyDiscount");
                double setupDiscount        = HandlerUtils.getRequiredDouble(accounts, "setupDiscount");
                int period                  = HandlerUtils.getRequiredInteger(accounts, "period");
                int status                  = HandlerUtils.getRequiredInteger(accounts, "status");
                int account                 = 0, location = 0;

                String locationDiscounts    = "SELECT lAM.monthlyDiscount, lAM.setupDiscount, IC.lineCount FROM locationAccountMap lAM " +
                                            " LEFT JOIN Installation_Checklist IC ON IC.location_id = lAM.location ";
                String updateAccountLocation= "UPDATE locationAccountMap SET monthlyDiscount=?, setupDiscount=?, period=?, status = ? ";

                if (id > 0) {
                    updateAccountLocation   += " WHERE id = ? ";
                    locationDiscounts       += " WHERE lAM.id = ? ";
                } else {
                    account                 = HandlerUtils.getRequiredInteger(accounts, "account");
                    location                = HandlerUtils.getRequiredInteger(accounts, "location");
                    updateAccountLocation   += " WHERE account = ? AND location = ? ";
                    locationDiscounts       += " WHERE lAM.account = ? AND lAM.location = ? ";
                }

                stmt                        = transconn.prepareStatement(locationDiscounts);
                if (id > 0) {
                    stmt.setInt(1, id);
                } else {
                    stmt.setInt(1, account);
                    stmt.setInt(2, location);
                }
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(updateAccountLocation);
                    stmt.setDouble(1, monthlyDiscount);
                    stmt.setDouble(2, setupDiscount);
                    stmt.setInt(3, period);
                    stmt.setInt(4, status);
                    if (id > 0) {
                        stmt.setInt(5, id);
                    } else {
                        stmt.setInt(5, account);
                        stmt.setInt(6, location);
                    }
                    stmt.executeUpdate();

                    String logMessage       = "Updated Location Accounts '" + id + "'";
                    logger.portalDetail(callerId, "updateLocationAccounts", 0, "locationAccountMap", id, logMessage, transconn);
                    
                    String checkLog                     = "SELECT id FROM  locationUpdateLog WHERE date=DATE(now()) AND location= ?";
                    String insertLog                    = "INSERT INTO  locationUpdateLog (location,monthlyDiscount,setupDiscount, date)  VALUES (?, ?,  ?, DATE(now()));";
                    String updateLog                    = "UPDATE  locationUpdateLog SET monthlyDiscount = ?, setupDiscount = ? WHERE id = ?;";
                    if (rs.getDouble(1) != monthlyDiscount || rs.getDouble(2) != setupDiscount) {
                        reviseLocationAmount(location, rs.getInt(3));
                        double preMonthlyDiscount = rs.getDouble(1);  
                        double preSetupDiscount = rs.getDouble(2);
                        int logId           = 0;
                        stmt                    = transconn.prepareStatement(checkLog);
                        stmt.setInt(1, location);
                        rs                      = stmt.executeQuery();
                        if (rs.next()) {
                            logId         = rs.getInt(1);
                            if(preMonthlyDiscount!= monthlyDiscount){
                              stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET monthlyDiscount = ? WHERE id = ?;");                              
                              stmt.setDouble(1, preMonthlyDiscount);                              
                              stmt.setInt(2, logId);
                              stmt.executeUpdate();
                            }
                            if(preSetupDiscount!= setupDiscount){
                              stmt                    = transconn.prepareStatement("UPDATE  locationUpdateLog SET setupDiscount = ? WHERE id = ?;");                              
                              stmt.setDouble(1, preSetupDiscount);                              
                              stmt.setInt(2, logId);
                              stmt.executeUpdate();
                            }
                          } else {
                              stmt                    = transconn.prepareStatement(insertLog);
                              stmt.setInt(1, location);
                              stmt.setDouble(2, preMonthlyDiscount);
                              stmt.setDouble(3,  preSetupDiscount);    
                              stmt.executeUpdate();
                               
                              
                          }
                    }
                }
            }

            Iterator transferLocationAccounts
                                            = toHandle.elementIterator("transferLocationAccounts");
            while (transferLocationAccounts.hasNext()) {
                Element accounts            = (Element) transferLocationAccounts.next();
                int locationId              = HandlerUtils.getRequiredInteger(accounts, "location");
                int account                 = HandlerUtils.getRequiredInteger(accounts, "account");

                String transfer             = " UPDATE locationAccountMap SET account = ? WHERE location = ? ";

                stmt                        = transconn.prepareStatement(transfer);
                stmt.setInt(1,account);
                stmt.setInt(2,locationId);
                stmt.executeUpdate();

                String logMessage           = "Transfer Location Accounts '" + locationId + "'";
                logger.portalDetail(callerId, "transferLocationAccounts", 0, "locationAccountMap", locationId, logMessage, transconn);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void SendApprovalAlert(int locationId, Double monthlyDiscount, Double setupDiscount) throws HandlerException {

        String selectAccountDetails         = " SELECT CONCAT(BC.Customer_Name, ' : ', BL.location_name) FROM BOSS_Location BL " +
                                            " LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id WHERE BL.id = ?";

        String subjectLine                  = "Discount Approval Request";
        StringBuilder approvalList          = new StringBuilder();

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        
        try {
            stmt                            = transconn.prepareStatement(selectAccountDetails);
            stmt.setInt(1,locationId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                approvalList.append("<tr align=justify><td colspan=4>A discount has been applied for ");
                approvalList.append(HandlerUtils.nullToEmpty(rs.getString(1)));
                approvalList.append(". The monthly service fee is discounted by <strong>" + nf.format(monthlyDiscount) + "</strong> ");
                approvalList.append("and the setup fee is discounted by " + nf.format(setupDiscount) + "</td></tr>");
                approvalList.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                approvalList.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                approvalList.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                approvalList.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                approvalList.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");
            }
            sendMail("", "billing@usbeveragenet.com", "discountNotification@usbeveragenet.com", "billing@usbeveragenet.com", subjectLine, "sendMail", approvalList, false);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void addUpdateDeleteAccountEmails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            Iterator addAccountEmails       = toHandle.elementIterator("addAccountEmails");
            while (addAccountEmails.hasNext()) {
                Element accountEmails       = (Element) addAccountEmails.next();
                int account                 = HandlerUtils.getRequiredInteger(accountEmails, "account");
                String contact              = HandlerUtils.getRequiredString(accountEmails, "contact");
                String email                = HandlerUtils.getRequiredString(accountEmails, "email");
                String fax                  = HandlerUtils.getRequiredString(accountEmails, "fax");
                
                String getLastId            = " SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement("INSERT INTO accountEmailMap (account, contact, email, fax) VALUES (?, ?, ?, ?)");
                stmt.setInt(1, account);
                stmt.setString(2, contact);
                stmt.setString(3, email);
                stmt.setString(4, fax);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int id                  = rs.getInt(1);
                    String logMessage       = "Added Account Emails '" + id + "'";
                    logger.portalDetail(callerId, "addAccountEmails", 0, "accountEmailMap", id, logMessage, transconn);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addAccountEmails failed to return a result");
                    throw new HandlerException("Database Error");
                }
            }

            Iterator updateAccountEmails    = toHandle.elementIterator("updateAccountEmails");
            while (updateAccountEmails.hasNext()) {
                Element accountEmails       = (Element) updateAccountEmails.next();
                int id                      = HandlerUtils.getRequiredInteger(accountEmails, "id");
                String contact              = HandlerUtils.getRequiredString(accountEmails, "contact");
                String email                = HandlerUtils.getRequiredString(accountEmails, "email");
                String fax                  = HandlerUtils.getRequiredString(accountEmails, "fax");

                String updateAccountEmail   = " UPDATE accountEmailMap SET contact=?, email=?, fax=? WHERE id = ? ";

                stmt                        = transconn.prepareStatement(updateAccountEmail);
                stmt.setString(1, contact);
                stmt.setString(2, email);
                stmt.setString(3, fax);
                stmt.setInt(4, id);
                stmt.executeUpdate();
                String logMessage           = "Updated Account Emails '" + id + "'";
                logger.portalDetail(callerId, "updateAccountEmails", 0, "accountEmailMap", id, logMessage, transconn);
            }

            Iterator deleteAccountEmails    = toHandle.elementIterator("deleteAccountEmails");
            while (deleteAccountEmails.hasNext()) {
                Element accountEmails       = (Element) deleteAccountEmails.next();
                int id                      = HandlerUtils.getRequiredInteger(accountEmails, "id");

                String delete               = " DELETE FROM accountEmailMap WHERE id = ? ";

                stmt                        = transconn.prepareStatement(delete);
                stmt.setInt(1,id);
                stmt.executeUpdate();

                String logMessage           = "Delete Account Emails '" + id + "'";
                logger.portalDetail(callerId, "deleteAccountEmails", 0, "accountEmailMap", id, logMessage, transconn);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private int getTerm (int cycle) {
        int term                             = 0;
        switch(cycle) {
            case 1:
                term                        = 1;
                break;
            case 2:
                term                        = 3;
                break;
            case 3:
                term                        = 6;
                break;
            case 4:
                term                        = 12;
                break;
            case 5:
                term                        = 1;
                break;
        }
        return term;
    }

    private void getAccountCredits(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int account                         = HandlerUtils.getRequiredInteger(toHandle, "account");
        boolean active                      = HandlerUtils.getRequiredBoolean(toHandle, "getActive");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT aC.id, BL.location_name, aC.details, aC.amount, aC.date FROM accountCredit aC " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = aC.location WHERE aC.account = ? AND aC.active = " + (active ? " 1 " : " 0 ") +
                                            " ORDER BY aC.date, BL.location_name";
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1,account);
            rs                              = stmt.executeQuery();
            getAccountCreditsXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getAccountCreditsXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element accountCreditsEl        = toAppend.addElement("accountCredits");
            accountCreditsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            accountCreditsEl.addElement("location").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            accountCreditsEl.addElement("details").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            accountCreditsEl.addElement("amount").addText(String.valueOf(rs.getDouble(colCount++)));
            accountCreditsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void addAccountCredit(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int accountId                       = HandlerUtils.getRequiredInteger(toHandle, "accountId");
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        Double amount                       = HandlerUtils.getRequiredDouble(toHandle, "amount");
        String date                         = HandlerUtils.getRequiredString(toHandle, "date");
        String details                      = HandlerUtils.getRequiredString(toHandle, "details");
        
        String insertAccountCredit          = " INSERT INTO accountCredit (account, location, amount, date, details) VALUES (?, ?, ?, ?, ?); ";

        PreparedStatement stmt              = null;
        try {
            stmt                            = transconn.prepareStatement(insertAccountCredit);
            stmt.setInt(1,accountId);
            stmt.setInt(2,locationId);
            stmt.setDouble(3,amount);
            stmt.setString(4,date);
            stmt.setString(5,details);
            stmt.executeUpdate();
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
        }
    }

    private void updateDeleteCredits(Element toHandle, Element toAppend) throws HandlerException {
        int callerId                        = getCallerId(toHandle);
        PreparedStatement stmt              = null;
        
        try {
            Iterator updateCredits          = toHandle.elementIterator("updateCredits");
            while (updateCredits.hasNext()) {
                int colCount                = 1;
                Element credits             = (Element) updateCredits.next();
                int id                      = HandlerUtils.getRequiredInteger(credits, "id");
                String details              = HandlerUtils.getRequiredString(credits, "details");
                double amount               = HandlerUtils.getRequiredDouble(credits, "amount");

                String updateAccountCredit  = " UPDATE accountCredit SET details=?, amount=? WHERE id = ? ";

                stmt                        = transconn.prepareStatement(updateAccountCredit);
                stmt.setString(colCount++, details);
                stmt.setDouble(colCount++, amount);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                String logMessage           = "Updated Credits";
                logger.portalDetail(callerId, "updateCredits", 0, "accountCredit", id, logMessage, transconn);
            }

            Iterator deleteCredits          = toHandle.elementIterator("deleteCredits");
            while (deleteCredits.hasNext()) {
                Element credits             = (Element) deleteCredits.next();
                int id                      = HandlerUtils.getRequiredInteger(credits, "id");

                String addAccountCredit     = " DELETE FROM accountCredit WHERE id = ? ";

                stmt                        = transconn.prepareStatement(addAccountCredit);
                stmt.setInt(1, id);
                stmt.executeUpdate();
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
        }
    }

    private void createInvoices(Element toHandle, Element toAppend) throws HandlerException {

        String date                         = HandlerUtils.getRequiredString(toHandle, "date");
        int account                         = HandlerUtils.getRequiredInteger(toHandle, "account");
        
        String getNextInvoiceNumber         = "SELECT invoiceNumber FROM invoice ORDER BY invoiceNumber DESC LIMIT 1";
        String selectAccount                = "SELECT A.name, A.delivery, A.cycle FROM accounts A WHERE A.id = ?";
        String selectAccountCredits         = "SELECT aC.id, aC.location, aC.amount, aC.date, CONCAT(BL.location_name, ' : ', aC.details) FROM accountCredit aC " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = aC.location WHERE aC.active = 1 AND aC.account = ?";
        String selectInvoiceNumber          = "SELECT id, invoiceNumber, amount FROM invoice WHERE active = 1 AND approved = 0 AND account = ? ";

        String getLastId                    = "SELECT LAST_INSERT_ID()";

        String insertInvoice                = "INSERT INTO invoice (account, invoiceNumber, date, delivery) VALUES (?, ?, ?, ?) ";
        String insertInvoiceDetails         = "INSERT INTO invoiceDetails (invoice, location, item, quantity, amount, details) VALUES (?, ?, ?, ?, ?, ?) ";

        String updateInvoice                = "UPDATE invoice SET amount = ?, outstanding = ? WHERE id = ? ";
        String updateAccountCredit          = "UPDATE accountCredit SET active = 0 WHERE id = ? ";

        StringBuilder invoiceListHeader     = new StringBuilder();
        StringBuilder invoiceList           = new StringBuilder();
        StringBuilder tempInvoiceList       = new StringBuilder();

        invoiceListHeader.append("<tr style=font-size:small height=30><td style='width=40%; border-bottom-style: solid; border-bottom-width: thin'>Item</td>");
        invoiceListHeader.append("<td align=right style='width=20%; border-bottom-style: solid; border-bottom-width: thin'>Amount</td>");
        invoiceListHeader.append("<td align=right style='width=20%; border-bottom-style: solid; border-bottom-width: thin'>Created</td></tr>");

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, innerRS = null;

        try {

            SimpleDateFormat newDateFormat  = new SimpleDateFormat("MM/dd/yyyy");
            Calendar dateCal                = Calendar.getInstance();
            try {
                dateCal.setTime(newDateFormat.parse(date));
            } catch (Exception pe) { }
            newDateFormat                   = new SimpleDateFormat("yyyy-MM-dd");

            int invoiceNumber               = 0;
            double totalAmount              = 0.0;
            int invoiceId                   = 0;
            String accountName              = "";
            boolean newInvoice              = true;
            stmt                            = transconn.prepareStatement(selectInvoiceNumber);;
            stmt.setInt(1, account);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                invoiceId                   = rs.getInt(1);
                invoiceNumber               = rs.getInt(2);
                totalAmount                 = rs.getDouble(3);
                newInvoice                  = false;
                tempInvoiceList.append("<tr style=font-size:x-small height=15><td>Existing invoice total amount</td><td align=right>");
                tempInvoiceList.append(nf.format(totalAmount)); // Amount
                tempInvoiceList.append("</td><td align=right>");
                tempInvoiceList.append(HandlerUtils.nullToEmpty(date)); // Date
                tempInvoiceList.append("</td></tr>");
            } else {
                stmt                        = transconn.prepareStatement(getNextInvoiceNumber);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    invoiceNumber           = rs.getInt(1) + 1;
                }
            }

            stmt                            = transconn.prepareStatement(selectAccount);
            stmt.setInt(1, account);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                accountName                 = rs.getString(1);
                int delivery                = rs.getInt(2);
                int cycle                   = rs.getInt(3);

                if (newInvoice) {
                    // Creating a new invoice
                    stmt                    = transconn.prepareStatement(insertInvoice);
                    stmt.setInt(1, account);
                    stmt.setInt(2, invoiceNumber);
                    stmt.setString(3, newDateFormat.format(dateCal.getTime()));
                    stmt.setInt(4, delivery);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(getLastId);
                    innerRS                 = stmt.executeQuery();
                    if (innerRS.next()) {
                        invoiceId           = innerRS.getInt(1);
                    } else {
                        logger.dbError("first call to LAST_INSERT_ID in createInvoices failed to return a result");
                        throw new HandlerException("Database Error");
                    }
                }
                
                Iterator itemList           = toHandle.elementIterator("items");
                while (itemList.hasNext()) {
                    Element items           = (Element) itemList.next();
                    int location            = HandlerUtils.getOptionalInteger(items, "location");
                    double amount           = HandlerUtils.getRequiredDouble(items, "amount");

                    int item                = HandlerUtils.getRequiredInteger(items, "item");
                    int qty                 = HandlerUtils.getOptionalInteger(items, "qty");
                    String details          = HandlerUtils.getRequiredString(items, "details");
                    
                    if (qty < 0) {
                        qty                 = 1;
                    }
                    // Inserting invoice details
                    stmt                    = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, location);
                    stmt.setInt(3, item);
                    stmt.setInt(4, qty);
                    stmt.setDouble(5, amount);
                    stmt.setString(6, details);
                    stmt.executeUpdate();

                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                    tempInvoiceList.append(item == 5 ? details : getItemDescription(item, cycle, date));
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(nf.format(amount)); // Amount
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(date)); // Date
                    tempInvoiceList.append("</td></tr>");

                    totalAmount             += amount;
                }

                stmt                        = transconn.prepareStatement(selectAccountCredits);
                stmt.setInt(1, account);
                innerRS                     = stmt.executeQuery();
                while (innerRS.next()) {
                    int creditId            = innerRS.getInt(1);
                    double creditAmount     = innerRS.getDouble(3);
                    
                    stmt                    = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, innerRS.getInt(2));
                    stmt.setInt(3, 6);
                    stmt.setInt(4, 1);
                    stmt.setDouble(5, creditAmount);
                    stmt.setString(6, innerRS.getString(5));
                    stmt.executeUpdate();

                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                    tempInvoiceList.append(innerRS.getString(5));
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(nf.format(creditAmount)); // Amount
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(innerRS.getString(4))); // Date
                    tempInvoiceList.append("</td></tr>");

                    stmt                    = transconn.prepareStatement(updateAccountCredit);
                    stmt.setInt(1, creditId);
                    stmt.executeUpdate();

                    totalAmount             -= creditAmount;
                }
            }

            stmt                            = transconn.prepareStatement(updateInvoice);
            stmt.setDouble(1, totalAmount);
            stmt.setDouble(2, totalAmount);
            stmt.setInt(3, invoiceId);
            stmt.executeUpdate();

            if (tempInvoiceList.length() != 0) {
                invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Account : ");
                invoiceList.append(HandlerUtils.nullToEmpty(accountName)); // Account
                invoiceList.append("</td></tr>");
                invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Invoice Number : ");
                invoiceList.append(String.valueOf(invoiceNumber)); // Invoice Number
                invoiceList.append("</td></tr>");
                invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Total Invoice amount : ");
                invoiceList.append(nf.format(totalAmount)); // Total Invoice amount
                invoiceList.append("</td></tr>");
                invoiceList.append("");
                invoiceList.append(invoiceListHeader);
                invoiceList.append(tempInvoiceList);
                invoiceList.append("<tr><td colspan=4 style='border-bottom-style: solid; border-bottom-width: thin;'></td></tr>");

                String subjectLine          = "New Invoices are Pending Approval";
                if (!newInvoice) {
                    subjectLine             = "An existing invoice has been updated. Invoice Number: " + invoiceNumber;
                }

                sendMail("USBN Invoice Alert", "billing@usbeveragenet.com", "newinvoices@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", invoiceList, false);
                //sendMail("USBN Invoice Alert", " tech@usbeveragenet.com","sganesh@usbeveragenet.com" ,  "tech@usbeveragenet.com", subjectLine, "sendMail", invoiceList, false);
                //sendMail("USBN Invoice Alert", " tech@usbeveragenet.com","dotnetdeveloper@usbeveragenet.com" ,  "tech@usbeveragenet.com", subjectLine, "sendMail", invoiceList, false);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(innerRS);
            close(rs);
            close(stmt);
        }
    }

    private void createMonthlyInvoices(Element toHandle, Element toAppend) throws HandlerException {

        String date                         = HandlerUtils.getRequiredString(toHandle, "date");
        int account                         = HandlerUtils.getOptionalInteger(toHandle, "account");

        String getNextInvoiceNumber         = "SELECT invoiceNumber FROM invoice ORDER BY invoiceNumber DESC LIMIT 1";
        String selectAccounts               =  "SELECT A.id, A.name, A.delivery, A.cycle FROM accounts A ";
        String selectAccountAllowances      = "SELECT aA.location, aA.repeat, aA.amount, aA.details FROM accountAllowance aA WHERE aA.account = ? ORDER BY aA.details";

        Calendar today                      = Calendar.getInstance();
        if (today.getTime().getMonth() == Calendar.DECEMBER) {
            selectAccounts                  += " WHERE A.cycle IN (1,2,3,4)";
        } else if (today.getTime().getMonth() == Calendar.JUNE) {
            selectAccounts                  += " WHERE A.cycle IN (1,2,3)";
        } else if (today.getTime().getMonth() == Calendar.MARCH ||today.getTime().getMonth() == Calendar.SEPTEMBER) {
            selectAccounts                  += " WHERE A.cycle IN (1,2)";
        } else {
            selectAccounts                  += " WHERE A.cycle IN (1)";
        }
        if (account > 0)  {
            selectAccounts                  += " AND A.id = " + account;
        }
        selectAccounts                      += " ORDER BY A.cycle, A.name";
        String selectAccountLocations       = "SELECT lAM.location, lII.item, lII.amount FROM locationAccountMap lAM LEFT JOIN locationInvoiceItems lII ON lII.location = lAM.location " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = lAM.location LEFT JOIN Bill B ON B.location_id = BL.id " +
                                            " WHERE BL.active = 1 AND B.Bill_state = 1 AND lII.recurring = 1 AND lAM.account = ? ";
        
        String getLastId                    = "SELECT LAST_INSERT_ID()";

        String insertInvoice                = "INSERT INTO invoice (account, invoiceNumber, date, delivery) VALUES (?, ?, ?, ?) ";
        String insertInvoiceDetails         = "INSERT INTO invoiceDetails (invoice, location, item, amount, details) VALUES (?, ?, ?, ?, ?) ";

        StringBuilder invoiceListHeader     = new StringBuilder();
        StringBuilder invoiceList           = new StringBuilder();
        StringBuilder tempInvoiceList       = new StringBuilder();

        invoiceListHeader.append("<tr style=font-size:small height=30><td style='width=30%; border-bottom-style: solid; border-bottom-width: thin'>Account</td>");
        invoiceListHeader.append("<td style='width=30%; border-bottom-style: solid; border-bottom-width: thin'>Invoice</td>");
        invoiceListHeader.append("<td align=right style='width=20%; border-bottom-style: solid; border-bottom-width: thin'>Amount</td>");
        invoiceListHeader.append("<td align=right style='width=20%; border-bottom-style: solid; border-bottom-width: thin'>Created</td></tr>");

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, locationRS = null, invoiceRS = null;
        
        try {
            int invoiceNumber               = 0, cycle = 0;
            double totalAmount              = 0.0;
            double totalMonthlyAmount       = 0.0;
            double totalQuarterlyAmount     = 0.0;
            double totalHalfYearlyAmount    = 0.0;
            double totalYearlyAmount        = 0.0;
            stmt                            = transconn.prepareStatement(getNextInvoiceNumber);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                invoiceNumber               = rs.getInt(1);
            }

            stmt                            = transconn.prepareStatement(selectAccounts);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int accountId               = rs.getInt(1);
                int delivery                = rs.getInt(3);

                if (cycle != rs.getInt(4)) {
                    cycle                   = rs.getInt(4);
                    String cycleDesc        = "Monthly";
                    if (cycle == 2) {
                        cycleDesc           = "Quaterly";
                    } else if (cycle == 3) {
                        cycleDesc           = "Half-Yearly";
                    } else if (cycle == 4) {
                        cycleDesc           = "Yearly";
                    }
                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td></td></tr>");
                    tempInvoiceList.append("<tr style=font-size:small height=15><td>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(cycleDesc)); // Cycle Description
                    tempInvoiceList.append("</td></tr>");
                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td></td></tr>");
                }



                int invoiceId               = 0;
                double invoiceTotalAmount   = 0.0;
                boolean createInvoice       = true, addToList = false;
                stmt                        = transconn.prepareStatement(selectAccountLocations);
                stmt.setInt(1, accountId);
                locationRS                  = stmt.executeQuery();
                while (locationRS.next()) {
                    int locationId          = locationRS.getInt(1);
                    int invoiceItem         = locationRS.getInt(2);
                    double amount           = calculateMonthlyAmount(locationRS.getDouble(3), cycle);
                    invoiceTotalAmount      += amount;

                    if (createInvoice) {
                        invoiceNumber       = invoiceNumber + 1;

                        SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("MM/dd/yyyy");
                        Calendar dateCal    = Calendar.getInstance();
                        try {
                            dateCal.setTime(newDateFormat.parse(date));
                        } catch (Exception pe) { }
                        newDateFormat       = new SimpleDateFormat("yyyy-MM-dd");

                        // Creating a new invoice
                        stmt                = transconn.prepareStatement(insertInvoice);
                        stmt.setInt(1, accountId);
                        stmt.setInt(2, invoiceNumber);
                        stmt.setString(3, newDateFormat.format(dateCal.getTime()));
                        stmt.setInt(4, delivery);
                        stmt.executeUpdate();

                        stmt                 = transconn.prepareStatement(getLastId);
                        invoiceRS            = stmt.executeQuery();
                        if (invoiceRS.next()) {
                            invoiceId        = invoiceRS.getInt(1);
                        } else {
                            logger.dbError("first call to LAST_INSERT_ID in createMonthlyInvoices failed to return a result");
                            throw new HandlerException("Database Error");
                        }
                        addToList           = true;
                    }

                    // Inserting invoice details
                    stmt                    = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, locationId);
                    stmt.setInt(3, invoiceItem);
                    stmt.setDouble(4, amount);
                    stmt.setString(5, getItemDescription(invoiceItem, cycle, date));
                    stmt.executeUpdate();

                    createInvoice           = false;

                }

                //Select account allowances
                stmt                    = transconn.prepareStatement(selectAccountAllowances);
                stmt.setInt(1, accountId);
                locationRS              = stmt.executeQuery();
                while (locationRS.next()) {
                    int locationId      = locationRS.getInt(1);
                    if (locationRS.getInt(2) == 0) { continue; }

                    double amount       = locationRS.getDouble(3);
                    invoiceTotalAmount  += amount;

                    // Inserting invoice details
                    stmt                = transconn.prepareStatement(insertInvoiceDetails);
                    stmt.setInt(1, invoiceId);
                    stmt.setInt(2, locationId);
                    stmt.setDouble(3, amount);
                    stmt.setString(4, locationRS.getString(4));
                    stmt.executeUpdate();
                }
                
                // Adding email list
                if (addToList) {
                    tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(rs.getString(2))); // Account Name
                    tempInvoiceList.append("</td><td>");
                    tempInvoiceList.append(String.valueOf(invoiceNumber)); // Location Name
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(nf.format(invoiceTotalAmount)); // Pico Version
                    tempInvoiceList.append("</td><td align=right>");
                    tempInvoiceList.append(HandlerUtils.nullToEmpty(date)); // Ping
                    tempInvoiceList.append("</td></tr>");
                }
                //Updating the invoice with the total invoice amount
                stmt                        = transconn.prepareStatement("UPDATE invoice SET amount = ?, outstanding = ? WHERE id = ?");
                stmt.setDouble(1, invoiceTotalAmount);
                stmt.setDouble(2, invoiceTotalAmount);
                stmt.setInt(3, invoiceId);
                stmt.executeUpdate();
                switch (cycle) {
                    case 1:
                        totalMonthlyAmount  += invoiceTotalAmount;
                        break;
                    case 2:
                        totalQuarterlyAmount+= invoiceTotalAmount;
                        break;
                    case 3:
                        totalHalfYearlyAmount
                                            += invoiceTotalAmount;
                        break;
                    case 4:
                        totalYearlyAmount   += invoiceTotalAmount;
                        break;
                }
                totalAmount                 += invoiceTotalAmount;
            }

            if (tempInvoiceList.length() != 0) {
                if (totalQuarterlyAmount > 0.0) {
                    invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Total Monthly Invoice amount : ");
                    invoiceList.append(nf.format(totalMonthlyAmount)); // Pico Version
                    invoiceList.append("</td></tr>");
                    invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Total Quarterly Invoice amount : ");
                    invoiceList.append(nf.format(totalQuarterlyAmount)); // Pico Version
                    invoiceList.append("</td></tr>");
                }
                if (totalHalfYearlyAmount > 0.0) {
                    invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Total Six Months Invoice amount : ");
                    invoiceList.append(nf.format(totalHalfYearlyAmount)); // Pico Version
                    invoiceList.append("</td></tr>");
                }
                if (totalYearlyAmount > 0.0) {
                    invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Total Yearly Invoice amount : ");
                    invoiceList.append(nf.format(totalYearlyAmount)); // Pico Version
                    invoiceList.append("</td></tr>");
                }
                invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Total Invoice amount : ");
                invoiceList.append(nf.format(totalAmount)); // Pico Version
                invoiceList.append("</td></tr>");
                invoiceList.append("");
                invoiceList.append(invoiceListHeader);
                invoiceList.append(tempInvoiceList);
                invoiceList.append("<tr><td colspan=4 style='border-bottom-style: solid; border-bottom-width: thin;'></td></tr>");
            }

            String subjectLine              = "New Invoices are Pending Approval";
            sendMail("USBN New Invoice Alert", "billing@usbeveragenet.com", "newinvoices@usbeveragenet.com", "billing@usbeveragenet.com", subjectLine, "sendMail", invoiceList, false);

            // Creating Seasonal Invoices
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(invoiceRS);
            close(locationRS);
            close(rs);
            close(stmt);
        }

        // Creating Seasonal Invoices
        createSeasonalInvoices(date);
    }

    private void createSeasonalInvoices(String date) throws HandlerException {

        String getNextInvoiceNumber         = "SELECT invoiceNumber FROM invoice ORDER BY invoiceNumber DESC LIMIT 1";
        String selectAccounts               = "SELECT A.id, A.name, A.cycle, A.delivery FROM accounts A WHERE A.cycle = 5 ORDER BY A.name";
        String selectAccountAllowances      = "SELECT aA.location, aA.repeat, aA.amount, aA.details FROM accountAllowance aA WHERE aA.account = ? ORDER BY aA.details";
        String selectAccountLocations       = "SELECT lAM.location, lII.item, lII.amount FROM locationAccountMap lAM LEFT JOIN locationInvoiceItems lII ON lII.location = lAM.location " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = lAM.location LEFT JOIN Bill B ON B.location_id = BL.id " +
                                            " WHERE BL.active = 1 AND B.Bill_state = 1 AND lII.recurring = 1 AND lAM.account = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";

        String insertInvoice                = "INSERT INTO invoice (account, invoiceNumber, date, delivery) VALUES (?, ?, ?, ?) ";
        String insertInvoiceDetails         = "INSERT INTO invoiceDetails (invoice, location, amount, details) VALUES (?, ?, ?, ?) ";

        StringBuilder invoiceListHeader     = new StringBuilder();
        StringBuilder invoiceList           = new StringBuilder();
        StringBuilder tempInvoiceList       = new StringBuilder();

        invoiceListHeader.append("<tr style=font-size:small height=30><td style='width=30%; border-bottom-style: solid; border-bottom-width: thin'>Account</td>");
        invoiceListHeader.append("<td style='width=30%; border-bottom-style: solid; border-bottom-width: thin'>Invoice</td>");
        invoiceListHeader.append("<td align=right style='width=20%; border-bottom-style: solid; border-bottom-width: thin'>Amount</td>");
        invoiceListHeader.append("<td align=right style='width=20%; border-bottom-style: solid; border-bottom-width: thin'>Created</td></tr>");

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, innerRS = null, locationRS = null, invoiceRS = null;

        try {
            int invoiceNumber               = 0, cycle = 0;
            double totalAmount              = 0.0;
            stmt                            = transconn.prepareStatement(getNextInvoiceNumber);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                invoiceNumber               = rs.getInt(1);
            }
            
            stmt                            = transconn.prepareStatement(selectAccounts);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int accountId               = rs.getInt(1);
                String accountName          = rs.getString(2);
                cycle                       = rs.getInt(3);
                int delivery                = rs.getInt(4);

                Calendar today              = Calendar.getInstance();
                logger.debug("Today month: " + today.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH));
                
                String selectAccountsBillMonths
                                            = "SELECT id FROM accountBillMonths WHERE account = ? AND `" +
                                            today.getDisplayName(Calendar.MONTH, Calendar.SHORT, Locale.ENGLISH) + "` = 1";
                stmt                        = transconn.prepareStatement(selectAccountsBillMonths);
                stmt.setInt(1, accountId);
                innerRS                     = stmt.executeQuery();
                if (innerRS.next()) {
                    int invoiceId           = 0;
                    double invoiceTotalAmount
                                            = 0.0;
                    boolean createInvoice   = true, addToList = false;
                    stmt                    = transconn.prepareStatement(selectAccountLocations);
                    stmt.setInt(1, accountId);
                    locationRS              = stmt.executeQuery();
                    while (locationRS.next()) {
                        int locationId      = locationRS.getInt(1);
                        int item            = locationRS.getInt(2);
                        double amount       = locationRS.getDouble(3);
                        invoiceTotalAmount  += amount;

                        if (createInvoice) {
                            invoiceNumber   = invoiceNumber + 1;

                            SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("MM/dd/yyyy");
                            Calendar dateCal= Calendar.getInstance();
                            try {
                                dateCal.setTime(newDateFormat.parse(date));
                            } catch (Exception pe) { }
                            newDateFormat   = new SimpleDateFormat("yyyy-MM-dd");

                            // Creating a new invoice
                            stmt            = transconn.prepareStatement(insertInvoice);
                            stmt.setInt(1, accountId);
                            stmt.setInt(2, invoiceNumber);
                            stmt.setString(3, newDateFormat.format(dateCal.getTime()));
                            stmt.setInt(4, delivery);
                            stmt.executeUpdate();

                            stmt            = transconn.prepareStatement(getLastId);
                            invoiceRS       = stmt.executeQuery();
                            if (invoiceRS.next()) {
                                invoiceId   = invoiceRS.getInt(1);
                            } else {
                                logger.dbError("first call to LAST_INSERT_ID in createSeasonalInvoices failed to return a result");
                                throw new HandlerException("Database Error");
                            }
                            addToList       = true;
                        }

                        // Inserting invoice details
                        stmt                = transconn.prepareStatement(insertInvoiceDetails);
                        stmt.setInt(1, invoiceId);
                        stmt.setInt(2, locationId);
                        stmt.setDouble(3, amount);
                        stmt.setString(4, getItemDescription(item, cycle, date));
                        stmt.executeUpdate();
                        createInvoice       = false;
                    }

                    //Select account allowances
                    stmt                    = transconn.prepareStatement(selectAccountAllowances);
                    stmt.setInt(1, accountId);
                    locationRS              = stmt.executeQuery();
                    while (locationRS.next()) {
                        int locationId      = locationRS.getInt(1);
                        if (locationRS.getInt(2) == 0) { continue; }
                        
                        double amount       = locationRS.getDouble(3);
                        invoiceTotalAmount  += amount;

                        // Inserting invoice details
                        stmt                = transconn.prepareStatement(insertInvoiceDetails);
                        stmt.setInt(1, invoiceId);
                        stmt.setInt(2, locationId);
                        stmt.setDouble(3, amount);
                        stmt.setString(4, locationRS.getString(4));
                        stmt.executeUpdate();
                    }
                    
                    // Adding email list
                    if (addToList) {
                        tempInvoiceList.append("<tr style=font-size:x-small height=15><td>");
                        tempInvoiceList.append(HandlerUtils.nullToEmpty(accountName)); // Account Name
                        tempInvoiceList.append("</td><td>");
                        tempInvoiceList.append(String.valueOf(invoiceNumber)); // Invoice Number
                        tempInvoiceList.append("</td><td align=right>");
                        tempInvoiceList.append(nf.format(invoiceTotalAmount)); // Invoice Amount
                        tempInvoiceList.append("</td><td align=right>");
                        tempInvoiceList.append(HandlerUtils.nullToEmpty(date)); // Date
                        tempInvoiceList.append("</td></tr>");
                    }
                    //Updating the invoice with the total invoice amount
                    stmt                    = transconn.prepareStatement("UPDATE invoice SET amount = ?, outstanding = ? WHERE id = ?");
                    stmt.setDouble(1, invoiceTotalAmount);
                    stmt.setDouble(2, invoiceTotalAmount);
                    stmt.setInt(3, invoiceId);
                    stmt.executeUpdate();
                    totalAmount             += invoiceTotalAmount;
                }
            }

            if (tempInvoiceList.length() != 0) {
                invoiceList.append("<tr style='font-size:small;' height=30><td colspan=2>Total Invoice amount : ");
                invoiceList.append(nf.format(totalAmount)); // Pico Version
                invoiceList.append("</td></tr>");
                invoiceList.append("");
                invoiceList.append(invoiceListHeader);
                invoiceList.append(tempInvoiceList);
                invoiceList.append("<tr><td colspan=4 style='border-bottom-style: solid; border-bottom-width: thin;'></td></tr>");
            }

            String subjectLine              = "New Seasonal Invoices are Pending Approval";
            sendMail("USBN New Seasonal Invoice Alert", "billing@usbeveragenet.com", "newinvoices@usbeveragenet.com", "billing@usbeveragenet.com", subjectLine, "sendMail", invoiceList, false);
            
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(invoiceRS);
            close(locationRS);
            close(innerRS);
            close(rs);
            close(stmt);
        }
    }

    private double calculateMonthlyAmount(double amount, int cycle) throws HandlerException {

        double monthlyAmount                = 0.0;
        switch (cycle){
            case 1:
                monthlyAmount               = amount;
                break;
            case 2:
                monthlyAmount               = amount * 3;
                break;
            case 3:
                monthlyAmount               = amount * 6;
                break;
            case 4:
                monthlyAmount               = amount * 12;
                break;
        }
        return monthlyAmount;
    }
    
    
    
    private void sendInvoicesEmail(Element toHandle, Element toAppend) throws HandlerException {

        String invoice                      = HandlerUtils.getRequiredString(toHandle, "invoiceId");
        String emailAddress                 = HandlerUtils.getOptionalString(toHandle, "email");
        //String invoice                      = "2558,2448,2299,2667";
        //String emailAddress                 = "sganesh@usbeveragenet.com";

        String selectInvoices               = "SELECT i.id,a.id, a.name,a.addrStreet, a.addrCity, a.addrState, a.addrZip, i.invoiceNumber, i.amount, i.outstanding, i.date, DATEDIFF(NOW(),i.date) age, i.received, a.id FROM invoice i " +
                                            " LEFT JOIN accounts a ON a.id = i.account ";
        boolean canSend                     = false;
        
        if (invoice !=null) {
            selectInvoices                  += " WHERE  i.id IN ("+invoice+") ";
            canSend                         = true;
        }  else {
            selectInvoices                  += " WHERE  i.id IN (0) ";
        }
        selectInvoices                      += " ORDER BY i.id; ";
        String selectAccountEmails          = "SELECT email FROM accountEmailMap WHERE account = ? ";
        StringBuilder invoiceList           = new StringBuilder();
        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        String subjectLine                  = "Invoices from US Beverage NET, Inc. ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        try {
            double totalAmount              = 0, totalOutStanding =0;
            int head                        = 0,accountId = 0;
            stmt                            = transconn.prepareStatement(selectInvoices);            
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                accountId                   = rs.getInt(2);
                String accName              = rs.getString(3);
                String address              = HandlerUtils.nullToEmpty(rs.getString(4))+", "+HandlerUtils.nullToEmpty(rs.getString(5))+", "+HandlerUtils.nullToEmpty(rs.getString(6))+" "+HandlerUtils.nullToEmpty(rs.getString(7));
                int invoiceNo               = rs.getInt(8);
                double amount               = rs.getDouble(9);
                double outstanding          = rs.getDouble(10);
                String date                 = rs.getString(11);
                totalAmount                 +=amount;
                totalOutStanding            +=outstanding;
                if(head == 0){
                    invoiceList.append("<tr><td><p><img src=\"http://usbeveragenet.com/assets/images/logo/usbn-logo.png\"></p><td> </td></tr>"
                            + "<tr><td ><div><strong>US Beverage NET, Inc.</strong></div><div> 225 W Jefferson Street, Syracuse, NY 13202</div>"
                            + "<div>Ph: 888-298-3641, Fx: 315-579-4337</div></td> <td align=\"right\">PAST DUE INVOICE(S)</td> </tr> <tr>"
                            + " <td valign=\"top\"><table  width=\"100%\" height=\"100%\" border=\"1\"><tr><td align=\"center\">Bill TO</td> </tr> <tr><td align=\"left\">"+accName+"<br>"+address+"</td></tr>"
                            + "</table></td><td align=\"left\"><table  width=\"100%\" height=\"100%\" border=\"1\"><tr><td align=\"center\">TERMS</td></tr><tr><td align=\"center\">Due On Receipt</td></tr></table>"
                            + " <p><em>Invoice(s) are due on receipt</em></p></td></tr><tr><td align=left  colspan=\"2\">          May I Please have a payment status update on the following past due invoice(s) </td><tr><tr><td colspan=\"2\"><table width=\"100%\" border=\"1\"><tr><td align=\"center\">Date</td>"
                            + "<td align=\"center\">Invoice No</td><td align=\"center\">Amount</td><td align=\"center\">Outstanding</td></tr>");
                    head++;
                }
                invoiceList.append("<tr><td align=\"center\">"+date+"</td><td align=\"center\">"+invoiceNo+"</td><td align=\"right\">$"+amount+"</td><td align=\"right\">$"+outstanding+"</td></tr>");
            }
            if(head > 0){
                invoiceList.append("<tr><td colspan=\"2\" align=\"right\">Total:</td><td align=\"right\">$"+totalAmount+"</td><td align=\"right\">$"+totalOutStanding+"</td></tr>");
                invoiceList.append("</table></td></tr>");                
                invoiceList.append("<tr style=height:30><td align=left colspan=3> A prompt response to this inquiry would be greatly appreciated. Thank you! <br/>");
            }
            if(canSend){ 
                if (emailAddress !=null && !emailAddress.equals("")) {
                    sendMail("", "billing@usbeveragenet.com", emailAddress, "billing@usbeveragenet.com", subjectLine, "sendMail", invoiceList, true);
                } else {
                    stmt                    = transconn.prepareStatement(selectAccountEmails);
                    stmt.setInt(1, accountId);
                    rs                      = stmt.executeQuery();
                    while (rs.next()) {
                        sendMail("", "billing@usbeveragenet.com", rs.getString(1), "billing@usbeveragenet.com", subjectLine, "sendMail", invoiceList, true);
                    }
                }
            }
         } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void sendOpenInvoices(Element toHandle, Element toAppend) throws HandlerException {

        int invoice                         = HandlerUtils.getOptionalInteger(toHandle, "invoiceId");
        String emailAddress                 = HandlerUtils.getOptionalString(toHandle, "email");

        String selectInvoices               = "SELECT i.id, i.account, i.invoiceNumber, i.amount, DATE_FORMAT(i.date, '%m/%d/%Y'), IF(i.received IS NULL, 0, 1), " +
                                            " a.method, a.cycle, a.name, a.addrStreet, a.addrCity, a.addrState, a.addrZip, a.type FROM invoice i " +
                                            " LEFT JOIN accounts a ON a.id = i.account WHERE a.delivery = 1 AND a.cycle <> 6 AND i.approved = 1 ";
        if (invoice > 0) {
            selectInvoices                  += " AND i.id = ? ";
        } else {
            selectInvoices                  += " AND i.sent = 0 ";
        }
        selectInvoices                      += " ORDER BY i.id; ";
        
        String selectInvoiceDetails         = "SELECT BL.id, IFNULL(BL.location_name,''), iD.item, iD.quantity, iD.amount, iD.details FROM invoiceDetails iD LEFT JOIN BOSS_Location BL ON BL.id = iD.location " +
                                            " WHERE iD.invoice = ? ORDER BY iD.item, BL.location_name";
        String selectAccountEmails          = "SELECT email FROM accountEmailMap WHERE account = ? ";

        String updateInvoice                = "UPDATE invoice SET sent = 1 WHERE id = ? ";

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        String subjectLine                  = "Invoice from US Beverage NET, Inc. ATTN: Note New Remittance Address";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, locationRS = null, installRS = null, emailRS = null;

        try {
            stmt                            = transconn.prepareStatement(selectInvoices);
            if (invoice > 0) {
                stmt.setInt(1, invoice);
            }
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                int invoiceId               = rs.getInt(colCount++);
                int accountId               = rs.getInt(colCount++);
                int invoiceNumber           = rs.getInt(colCount++);
                double invoiceAmount        = rs.getDouble(colCount++);
                String invoiceDate          = rs.getString(colCount++);
                int received                = rs.getInt(colCount++);
                int method                  = rs.getInt(colCount++);
                int cycle                   = rs.getInt(colCount++);

                // sending credit card invoices only if paid
                if (method == 2 && received == 0) { continue; }
                
                StringBuilder invoiceList   = new StringBuilder();

                invoiceList.append("<tr style=height:30><td style='width:250px;'><strong>US Beverage NET, Inc.</strong></td>");

                invoiceList.append("<td style='width:250px;'></td>");
                invoiceList.append("<td align=right valign=top style='font-size: large;'><strong>Invoice</strong></td></tr>");
                invoiceList.append("<tr><td style='width:50%;'>225 W Jefferson Street</td><td />");
                invoiceList.append("<td rowspan=3 align=right><table style='width:200px; border: thin solid #000000; border-collapse: collapse; padding-right: 2px;'>");
                invoiceList.append("<tr><td align=center style='border: thin solid #000000;'>Date</td>");
                invoiceList.append("<td align=center style='border: thin solid #000000;'>Invoice #</td></tr>");
                invoiceList.append("<tr><td align=center style='border: thin solid #000000'>" + invoiceDate + "</td>");
                invoiceList.append("<td align=center style='border: thin solid #000000'>" + String.valueOf(invoiceNumber) + "</td></tr>");
                invoiceList.append("</table></td></tr>");
                invoiceList.append("<tr><td>Syracuse, NY 13202</td></tr>");
                invoiceList.append("<tr><td>Ph: 888-298-3641, Fx: 315-579-4337</td></tr>");
                invoiceList.append("<tr style=height:30><td></td></tr>");
                invoiceList.append("<tr style=height:30><td style='width:50%; border: thin solid #000000; border-collapse: collapse;'>Bill To</td>");
                if (method == 1) {
                    invoiceList.append("<td></td>");
                } else {
                    invoiceList.append("<td rowspan=2 align=center valign=top><table style='width:100px; border: thin solid #000000; background-color: #CCCCCC; border-collapse: collapse;'>");
                    invoiceList.append("<tr><td align=center style='font-size: x-large;'><strong>PAID</strong></td></tr>");
                    invoiceList.append("<tr><td align=center>" + invoiceDate + "</td></tr></table></td>");
                }
                invoiceList.append("<td rowspan=2 align=right valign=top><table style='width:200px; border: thin solid #000000; border-collapse: collapse;'>");
                invoiceList.append("<tr><td align=center style='border: thin solid #000000'>Terms</td></tr>");
                invoiceList.append("<tr><td align=center style='border: thin solid #000000'> Due on Receipt </td></tr>");
                invoiceList.append("</table></td></tr>");
                invoiceList.append("<tr style=height:30><td style='width:50%; border: thin solid #000000; border-collapse: collapse; padding-top: 10px; padding-bottom: 10px;'>" + rs.getString(colCount++) + "<br />");
                invoiceList.append(rs.getString(colCount++) + "<br />");
                invoiceList.append(rs.getString(colCount++) + ", " + rs.getString(colCount++) + " " + rs.getString(colCount++)  + "</td><td style=height:10></td></tr>");
                
                invoiceList.append("<tr style=height:30><td></td></tr>");

                invoiceList.append("<tr style=height:30><td align=right colspan=3><table style='width:100%; border: thin solid #000000; border-collapse: collapse;'>");
                invoiceList.append("<tr><td align=center style='border: thin solid #000000; width:60%'>Description</td>");
                invoiceList.append("<td align=center style='border: thin solid #000000; width:10%'>Qty</td>");
                invoiceList.append("<td align=right style='border: thin solid #000000; width:15%; padding-right: 10px;'>Rate</td>");
                invoiceList.append("<td align=right style='border: thin solid #000000; width:15%; padding-right: 10px;'>Amount</td></tr>");

                SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd");
                Calendar date               = Calendar.getInstance();
                try {
                    date.setTime(newDateFormat.parse(invoiceDate));
                } catch (Exception pe) { }

                int item                    = 0;
                stmt                        = transconn.prepareStatement(selectInvoiceDetails);
                stmt.setInt(1, invoiceId);
                locationRS                  = stmt.executeQuery();
                while (locationRS.next()) {
                    if (item != locationRS.getInt(3)) {
                        if (!locationRS.isFirst()) {
                            invoiceList.append("<tr style=height:20><td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' />");
                            invoiceList.append("<td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' /></td></tr>");
                        }
                        item                = locationRS.getInt(3);
                        switch (item) {
                            case 1:
                                invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> " + getItemDescription(item, cycle, invoiceDate) + "</td>");
                                invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                break;
                            case 2:
                                invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> " + getItemDescription(item, cycle, invoiceDate) + "</td>");
                                invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                break;
                            case 3:
                                invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> " + getItemDescription(item, cycle, invoiceDate) + "</td>");
                                invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                break;
                            case 4:
                                String selectProratePeriod          
                                            = "SELECT DATE_FORMAT(installDate, '%m/%d/%Y') FROM Installation_Checklist WHERE location_id = ? ";
                                stmt        = transconn.prepareStatement(selectProratePeriod);
                                stmt.setInt(1, locationRS.getInt(1));
                                installRS   = stmt.executeQuery();
                                if (installRS.next()) {
                                    invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> " + getItemDescription(item, cycle, installRS.getString(1)) + "</td>");
                                    invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                    invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                    invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                }
                                break;
                            case 5:
                                invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> Other Charges </td>");
                                invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                break;
                            case 6:
                                invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> Credits </td>");
                                invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                break;
                            case 7:
                                invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> " + getItemDescription(item, cycle, invoiceDate) + "</td>");
                                invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                break;
                            case 8:
                                invoiceList.append("<tr><td align=left style='font-size: small; border-right: thin solid #000000'> " + getItemDescription(item, cycle, invoiceDate) + "</td>");
                                invoiceList.append("<td align=center style='border-right: thin solid #000000'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td>");
                                invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'></td></tr>");
                                break;
                        }
                    }
                    invoiceList.append("<tr><td align=center style='font-size: x-small; border-right: thin solid #000000'>" + (item == 5 ? locationRS.getString(6) + " - " + locationRS.getString(2) : locationRS.getString(2)) + "</td>");
                    invoiceList.append("<td align=center style='border-right: thin solid #000000'>" + locationRS.getInt(4) +"</td>");
                    invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'>" + nf.format(locationRS.getDouble(5)) +"</td>");
                    invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'>" + nf.format(locationRS.getDouble(4) * locationRS.getDouble(5)) +"</td></tr>");
                }
                invoiceList.append("<tr><td colspan=2 style='border-top: thin solid #000000' /><td align=center style='font-size: small; border: thin solid #000000'>Total</td>");
                invoiceList.append("<td align=right style='border: thin solid #000000; padding-right: 10px;'>" + nf.format(invoiceAmount) +"</td></tr>");
                if (method == 2) {
                    invoiceList.append("<tr><td colspan=2 /><td align=center style='font-size: small; border: thin solid #000000'>Payments/Credits</td>");
                    invoiceList.append("<td align=right style='border: thin solid #000000; padding-right: 10px;'> -" + nf.format(invoiceAmount) +"</td></tr>");
                }
                invoiceList.append("</table><tr style=height:30><td></td></tr>");
                invoiceList.append("<tr style=height:30><td align=left colspan=3><strong>ACH NOW ACCEPTED:</strong></td></tr>");
                invoiceList.append("<tr style=height:30><td align=left colspan=3>We now offer Direct Payments (ACH Debits) for your convenience. ");
                invoiceList.append("Please contact Maria at accounting@usbeveragenet.com to get set up Today.</td></tr></td></tr>");

                if (invoice > 0) {
                    sendMail("", "billing@usbeveragenet.com", emailAddress, "billing@usbeveragenet.com", subjectLine, "sendMail", invoiceList, true);
                } else {
                    stmt                    = transconn.prepareStatement(selectAccountEmails);
                    stmt.setInt(1, accountId);
                    emailRS                 = stmt.executeQuery();
                    while (emailRS.next()) {
                        sendMail("", "billing@usbeveragenet.com", emailRS.getString(1), "billing@usbeveragenet.com", subjectLine, "sendMail", invoiceList, true);
                    }
                }
                stmt                        = transconn.prepareStatement(updateInvoice);
                stmt.setInt(1, invoiceId);
                stmt.executeUpdate();
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(emailRS);
            close(installRS);
            close(locationRS);
            close(rs);
            close(stmt);
        }
    }
    
    
    private void sendPastInvoices(Element toHandle, Element toAppend) throws HandlerException {

        int account                         = HandlerUtils.getOptionalInteger(toHandle, "accountId");
        String emailAddress                 = HandlerUtils.getOptionalString(toHandle, "email");

        String selectInvoices               = "SELECT i.id, i.account, i.invoiceNumber, i.amount, DATE_FORMAT(i.date, '%m/%d/%Y'), IF(i.received IS NULL, 0, 1) rec, " +
                                            " a.method, a.cycle, a.name, a.addrStreet, a.addrCity, a.addrState, a.addrZip, a.type , DATE_FORMAT(DATE(now()), '%m/%d/%Y'), DATEDIFF(NOW(),i.date) age FROM invoice i " +
                                            " LEFT JOIN accounts a ON a.id = i.account WHERE a.delivery = 1  AND i.approved = 1  AND i.account = ? HAVING age > 30 and  rec=0 ORDER BY i.id;  ";        
        
        String selectAccountEmails          = "SELECT email FROM accountEmailMap WHERE account = ? ";
        

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        String subjectLine                  = "Past Invoice from US Beverage NET, Inc. ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, locationRS = null, installRS = null, emailRS = null;
        StringBuilder invoiceList           = new StringBuilder();
        StringBuilder invoiceHeader         = new StringBuilder();
        double invoiceAmount                = 0, totalInvoice = 0;
        String locAddr1                     = "",locAddr2= "", locAddr3="", locName = "", locName1 ="", today = "";

        try {
            stmt                            = transconn.prepareStatement(selectInvoices);
            if (account > 0) {
                stmt.setInt(1, account);
            }
            int method                      = 0;
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                int invoiceId               = rs.getInt(colCount++);
                int accountId               = rs.getInt(colCount++);
                int invoiceNumber           = rs.getInt(colCount++);
                invoiceAmount               = rs.getDouble(colCount++);
                String invoiceDate          = rs.getString(colCount++);
                int received                = rs.getInt(colCount++);
                method                      = rs.getInt(colCount++);
                int cycle                   = rs.getInt(colCount++);
                locName                     =rs.getString(colCount++);
                locName1                    =rs.getString(colCount++);
                locAddr1                    =rs.getString(colCount++);
                locAddr2                    = rs.getString(colCount++);
                locAddr3                    = rs.getString(colCount++);
                today                       = rs.getString(15);
                totalInvoice                +=invoiceAmount;

                
                 SimpleDateFormat newDateFormat
                                            = new SimpleDateFormat("yyyy-MM-dd");
                 Calendar date              = Calendar.getInstance();
                 try {
                     date.setTime(newDateFormat.parse(invoiceDate));
                 } catch (Exception pe) { }
                 invoiceList.append("<tr><td align=center style='font-size: small; border-right: thin solid #000000'> " + invoiceDate + "</td>");
                 invoiceList.append("<td align=center style='font-size: small; border-right: thin solid #000000'> #" + String.valueOf(invoiceNumber) + "</td>");
                 invoiceList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'>" + nf.format(invoiceAmount) +"</td></tr>");
            }
            invoiceList.append("<tr><td colspan=2 align=center style='font-size: small; border: thin solid #000000'>Total Past Due</td>");
            invoiceList.append("<td align=right style='border: thin solid #000000; padding-right: 10px;'>" + nf.format(totalInvoice) +"</td></tr>");
            
               
            
            
            invoiceList.append("</table><tr style=height:30><td></td></tr>");
            invoiceList.append("<tr style=height:30><td align=left colspan=3>A prompt response to this inquiry would be greatly appreciated. Thank you! <br/>");
            invoiceList.append("<tr style=height:30><td></td></tr><tr style=height:30><td align=left colspan=3><strong>ACH NOW ACCEPTED:</strong></td></tr>");
            invoiceList.append("<tr style=height:30><td align=left colspan=3>We now offer Direct Payments (ACH Debits) for your convenience. ");
            invoiceList.append("Please contact Maria at accounting@usbeveragenet.com to get set up Today.</td></tr></td></tr>");
            
            invoiceHeader.append("<tr style=height:30><td style='width:250px;'><strong>US Beverage NET, Inc.</strong></td>");
            invoiceHeader.append("<td style='width:250px;'></td>");
            invoiceHeader.append("<td align=right valign=top style='font-size: large;'><strong> </strong></td></tr>");
            invoiceHeader.append("<tr><td style='width:50%;'>225 W Jefferson Street</td><td />");
            invoiceHeader.append("<td rowspan=3 align=right><table style='width:200px; border: thin solid #000000; border-collapse: collapse; padding-right: 2px;'>");
            invoiceHeader.append("<tr><td align=center style='border: thin solid #000000;'>Date</td></tr>");
            invoiceHeader.append("<tr><td align=center style='border: thin solid #000000'>" + today + "</td></tr>");
            invoiceHeader.append("</table></td></tr>");
            invoiceHeader.append("<tr><td>Syracuse, NY 13202</td></tr>");
            invoiceHeader.append("<tr><td>Ph: 888-298-3641, Fx: 315-579-4337</td></tr>");
            invoiceHeader.append("<tr style=height:30><td></td></tr>");
            invoiceHeader.append("<tr style=height:30><td style='width:50%; border: thin solid #000000; border-collapse: collapse;'>Bill To</td>");
            invoiceHeader.append("<td></td>");

            invoiceHeader.append("<td rowspan=2 align=right valign=top><table style='width:200px; border: thin solid #000000; border-collapse: collapse;'>");
            invoiceHeader.append("<tr><td align=center style='border: thin solid #000000'>Total Past Due</td></tr>");
            invoiceHeader.append("<tr><td align=center style='border: thin solid #000000'> "+nf.format(totalInvoice)+" </td></tr>");
            invoiceHeader.append("</table></td></tr>");
            invoiceHeader.append("<tr style=height:30><td style='width:50%; border: thin solid #000000; border-collapse: collapse; padding-top: 10px; padding-bottom: 10px;'>" + locName + "<br />");
            invoiceHeader.append(locName1 + "<br />");
            invoiceHeader.append(locAddr1 + ", " + locAddr2 + " " + locAddr3  + "</td><td style=height:10></td></tr>");
            invoiceHeader.append("<tr style=height:30><td></td></tr><tr><td align=left colspan=\"3\">May I Please have a payment status update on the following past due invoice(s) </td><tr>");
            invoiceHeader.append("<tr style=height:30><td></td></tr>");
            invoiceHeader.append("<tr style=height:30><td align=right colspan=3><table style='width:100%; border: thin solid #000000; border-collapse: collapse;'>");
            invoiceHeader.append("<tr><td align=center style='border: thin solid #000000; width:30%'>Date</td>");
            invoiceHeader.append("<td align=center style='border: thin solid #000000; width:40%'>Invoice </td>");                
            invoiceHeader.append("<td align=right style='border: thin solid #000000; width:30%; padding-right: 10px;'>Amount</td></tr>");
            invoiceHeader.append(invoiceList.toString());
            
            
            if (emailAddress!=null && !emailAddress.equals("")) {
                sendMail("", "billing@usbeveragenet.com", emailAddress, " ", subjectLine, "sendMail", invoiceHeader, false);
            } else {
                stmt                    = transconn.prepareStatement(selectAccountEmails);
                stmt.setInt(1, account);
                emailRS                 = stmt.executeQuery();
                while (emailRS.next()) {
                    //sendMail("", "billing@usbeveragenet.com", emailRS.getString(1), "billing@usbeveragenet.com", subjectLine, "sendMail", invoiceList, true);
                }
            } 
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(emailRS);
            close(installRS);
            close(locationRS);
            close(rs);
            close(stmt);
        }
    }

    private void resendInvoice(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int invoiceId                       = HandlerUtils.getRequiredInteger(toHandle, "invoiceId");
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        try {
            stmt                            = transconn.prepareStatement("SELECT COUNT(id) FROM invoiceDetails WHERE invoice = ? GROUP BY invoice; ");
            stmt.setInt(1,invoiceId);
            rs                              = stmt.executeQuery();
            if (rs.next() && (rs.getInt(1) > 0)) {
                stmt                        = transconn.prepareStatement(" UPDATE invoice SET sent = 0 WHERE id = ? ");
                stmt.setInt(1,invoiceId);
                stmt.executeUpdate();
            } else {
                addErrorDetail(toAppend, "Invoice details is incomplete.  Please contact IT for support");
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
        }
    }

    private String getItemDescription(int item, int cycle, String invoiceDate) {

        SimpleDateFormat newDateFormat      = new SimpleDateFormat("MM/dd/yyyy");
        Calendar date                       = Calendar.getInstance();
        try {
            date.setTime(newDateFormat.parse(invoiceDate));
        } catch (Exception pe) { }
        String term                         = "";
        switch(item) {
            case 1:
                date.set(Calendar.DAY_OF_MONTH, 1);
                term                        = "Subscription Fee - " + getBillingPeriod(cycle, date);
                break;
            case 2:
                term                        = "Setup Fee 1st Installment (50% of Setup Fee)";
                break;
            case 3:
                term                        = "Setup Fee 2nd Installment (50% of Setup Fee)";
                break;
            case 4:
                date.add(Calendar.MONTH, -1);
                term                        = "Subscription Fee (Prorated) - " + getBillingPeriod(cycle, date);
                break;
            case 6:
                term                        = "One Time Credit (Setup)";
                break;
            case 7:
                date.set(Calendar.DAY_OF_MONTH, 1);
                term                        = "BBTV Subscription Fee - " + getBillingPeriod(cycle, date);
                break;
            case 8:
                term                        = "BBTV Setup Fee ";
                break;
            case 9:
                term                        = "One Time Credit (Subscription)";
                break;
            case 10:
                term                        = "One Time Charges (Subscription)";
                break;
        }
        return term;
    }

    private String getBillingPeriod(int cycle, Calendar invoiceDate) {

        SimpleDateFormat newDateFormat      = new SimpleDateFormat("MM/dd/yyyy");
        invoiceDate.add(Calendar.MONTH, 1);

        String period                       = newDateFormat.format(invoiceDate.getTime());
        invoiceDate.set(Calendar.DAY_OF_MONTH, 1);
        
        int todayMonth                      = invoiceDate.getTime().getMonth();
        int monthCycle                      = 1;

        switch(cycle) {
            case 1:
                invoiceDate.add(Calendar.MONTH, 1);
                invoiceDate.add(Calendar.DAY_OF_MONTH, -1);
                break;
            case 2:
                if (todayMonth < 3) {
                    monthCycle              = todayMonth;
                } else if (todayMonth < 6) {
                    monthCycle              = todayMonth - 3;
                } else if (todayMonth < 9) {
                    monthCycle              = todayMonth - 6;
                } else if (todayMonth < 12) {
                    monthCycle              = todayMonth - 9;
                }
                invoiceDate.add(Calendar.MONTH, (3-monthCycle));
                invoiceDate.add(Calendar.DAY_OF_MONTH, -1);
                break;
            case 3:
                if (todayMonth < 3) {
                    monthCycle              = todayMonth;
                } else if (todayMonth < 9) {
                    monthCycle              = todayMonth - 6;
                }
                invoiceDate.add(Calendar.MONTH, (6-monthCycle));
                invoiceDate.add(Calendar.DAY_OF_MONTH, -1);
                break;
            case 4:
                invoiceDate.add(Calendar.MONTH, 12);
                invoiceDate.add(Calendar.DAY_OF_MONTH, -1);
                break;
            case 5:
                invoiceDate.add(Calendar.MONTH, -1);
                period                      = newDateFormat.format(invoiceDate.getTime());
                invoiceDate.add(Calendar.MONTH, 1);
                invoiceDate.add(Calendar.DAY_OF_MONTH, -1);
                break;
        }
        period                              += " to " + newDateFormat.format(invoiceDate.getTime());
        return period;
    }

    private void getReceivablesReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        boolean openInvoice                 = HandlerUtils.getOptionalBoolean(toHandle, "openInvoice");
        boolean closedInvoice               = HandlerUtils.getOptionalBoolean(toHandle, "closedInvoice");
        boolean byAccount                   = HandlerUtils.getOptionalBoolean(toHandle, "byAccount");
        boolean byAge                       = HandlerUtils.getOptionalBoolean(toHandle, "byItem");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            int accountId                   = HandlerUtils.getOptionalInteger(toHandle, "accountId");
            String sql                      = "SELECT i.id, a.name, i.invoiceNumber, i.amount, i.outstanding, i.date, DATEDIFF(NOW(),i.date) age, i.received, a.id FROM invoice i " +
                                            " LEFT JOIN accounts a ON a.id = i.account ";
            if (openInvoice) {
                sql                         += " WHERE i.active = 1 AND i.approved = 1 AND i.outstanding <> 0 AND i.received IS NULL ";
            } else if (closedInvoice) {
                sql                         += " LEFT JOIN invoicePayments iP ON iP.invoice = i.id " +
                                            " WHERE i.active = 1 AND i.approved = 1 AND i.outstanding = 0 AND i.received IS NOT NULL ";
            } else {
                sql                         += " WHERE i.active = 1 AND i.approved = 1 ";
            }
            if (accountId > 0) {
                sql                         += " AND a.id = ?";
            }
            if (byAccount) {
                sql                         += " ORDER BY a.name ";
            } else if (byAge) {
                sql                         += " ORDER BY age ";
            }
            stmt                            = transconn.prepareStatement(sql);
            if (accountId > 0) {
                stmt.setInt(1, accountId);
            }
            rs                              = stmt.executeQuery();
            getReceivablesReportByAccountXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getReceivablesReportByAccountXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element invoiceDetailsEl        = toAppend.addElement("data");
            invoiceDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));            
            invoiceDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("outstanding").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("age").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("accountId").addText(String.valueOf(rs.getInt(colCount++)));
        }
    }

    private void getPaymentReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            String sql                      = "SELECT DISTINCT p.id, p.received, IF(p.method = 1, 'Check', IF(p.method = 2, 'Credit', 'EFT')), a.name, 0, p.amount, p.received, p.details FROM payment p " +
                                            " LEFT JOIN paymentInvoiceMap pIM ON pIM.payment = p.id LEFT JOIN invoice i ON i.id = pIM.invoice " +
                                            " LEFT JOIN accounts a ON a.id = p.account WHERE p.received BETWEEN ? AND ? ORDER BY p.received DESC, p.method, a.name;";
            stmt                            = transconn.prepareStatement(sql);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            rs                              = stmt.executeQuery();
            getPaymentReportXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getPaymentReportXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element paymentDetailsEl        = toAppend.addElement("data");
            paymentDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            paymentDetailsEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            paymentDetailsEl.addElement("method").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            paymentDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            paymentDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
            paymentDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            paymentDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            paymentDetailsEl.addElement("details").addText(String.valueOf(rs.getString(colCount++)));
        }
    }

    private void getRevenueReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        boolean byItem                      = HandlerUtils.getOptionalBoolean(toHandle, "byItem");
        boolean byAccount                   = HandlerUtils.getOptionalBoolean(toHandle, "byAccount");
        boolean byDate                      = HandlerUtils.getOptionalBoolean(toHandle, "byDate");
        String groupBy                      = "";

        if (byItem) {
            groupBy                         = " a.type DESC, itemMain ";
        } else if (byAccount) {
            groupBy                         = " a.type DESC, a.name, i.id, itemMain, i.approvalDate ";
        } else if (byDate) {
            groupBy                         = " i.approvalDate, a.type DESC, a.name, i.id, itemMain ";
        } else {
            groupBy                         = " a.type DESC, itemMain ";
        }

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            String sql                      = "SELECT a.type type, a.name, i.invoiceNumber, iD.item itemMain, " +
                                            " SUM(iD.amount * iD.quantity) amount, i.date, i.approvalDate FROM invoice i LEFT JOIN accounts a ON a.id = i.account " +
                                            " LEFT JOIN invoiceDetails iD ON iD.invoice = i.id WHERE i.active = 1 AND i.approved = 1 AND i.approvalDate BETWEEN ? AND ? " +
                                            " GROUP BY " + groupBy + " ORDER BY " + groupBy;
            stmt                            = transconn.prepareStatement(sql);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            rs                          = stmt.executeQuery();
            getRevenueReportXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getRevenueReportXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element invoiceDetailsEl        = toAppend.addElement("data");
            invoiceDetailsEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("item").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("date").addText(String.valueOf(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("approvalDate").addText(String.valueOf(rs.getString(colCount++)));
        }
    }

    private void getTransactionReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, invoiceRS = null;

        String sql                          = "(SELECT 1, a.name, i.id, i.invoiceNumber, i.date, i.amount, i.outstanding FROM accounts a LEFT JOIN invoice i ON i.account = a.id " +
                                            " WHERE i.active = 1 AND i.approved = 1 AND i.date BETWEEN ? AND ? ORDER BY i.date DESC) " +
                                            " UNION " +
                                            " (SELECT 2, a.name, p.id, p.details, p.received, p.amount, p.outstanding FROM accounts a LEFT JOIN payment p ON p.account = a.id " +
                                            " WHERE p.received BETWEEN ? AND ? ORDER BY p.received DESC) " +
                                            " ORDER BY date DESC;";
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            stmt.setString(3, startDate);
            stmt.setString(4, endDate);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                Element transactionEl       = toAppend.addElement("transaction");
                transactionEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
                transactionEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                transactionEl.addElement("info").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("amount").addText(String.valueOf(rs.getDouble(colCount++)));
                transactionEl.addElement("balance").addText(String.valueOf(rs.getDouble(colCount++)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(invoiceRS);
            close(rs);
            close(stmt);
        }
    }

    private void getRecurringRevenueReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        boolean active                      = HandlerUtils.getOptionalBoolean(toHandle, "active");
        boolean underContract               = HandlerUtils.getOptionalBoolean(toHandle, "underContract");
        int filter                          = HandlerUtils.getRequiredInteger(toHandle, "filter");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            String sql                      = "SELECT A.type, A.name, A.cycle, BL.location_name, ROUND((lAM.amount * lAM.billMonths)/12,2), lAM.setup FROM accounts A " +
                                            " LEFT JOIN locationAccountMap lAM on lAM.account = A.id LEFT JOIN BOSS_Location BL ON BL.id = lAM.location " +
                                            " LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " WHERE " + (underContract ? " BL.sendToInstall = 0 " : " lD.active = 1 AND lD.preInstall = 1 AND lD.billing = ? ") + 
                                            GetFilterString(filter) + " ORDER BY A.type, A.name, BL.location_name;";
            String sqlUnderContract         = "SELECT 4, COUNT(BL.id) FROM BOSS_Location BL LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " WHERE BL.sendToInstall = 0";
            stmt                            = transconn.prepareStatement(sql);
            if (!underContract) {
                stmt.setInt(1, active ? 1 : 0);
            }
            rs                          = stmt.executeQuery();
            getRecurringRevenueReportXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getRecurringRevenueReportXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element invoiceDetailsEl        = toAppend.addElement("data");
            invoiceDetailsEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("cycle").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("location").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("monthly").addText(String.valueOf(rs.getDouble(colCount++)));
            invoiceDetailsEl.addElement("setup").addText(String.valueOf(rs.getDouble(colCount++)));
        }
    }

    private void getEquipmentList(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int active                          = HandlerUtils.getRequiredInteger(toHandle, "active");
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate") + " 07:00:00";
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate") + " 07:00:00";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, innerRS = null, shipmentRS = null;
        String checkDate                    = "SELECT IF(? > now() ,(SELECT ADDDATE(?, INTERVAL -1 YEAR) ), ?), IF(? > now() ,(SELECT ADDDATE(?, INTERVAL -1 YEAR)), ?), " +
                                            " IF(NOW() < ?, FALSE, TRUE);";
        String selectEquipment              = "SELECT e.id, e.name, e.parValue, e.alertPoint, e.price, e.quantity FROM equipment e WHERE e.active = ? ORDER BY e.name";
        String selectEquipmentHistory       = "(SELECT eD.type, SUM(eDD.startQuantity-eDD.endQuantity), eD.date FROM equipmentDepletion eD " +
                                            " LEFT JOIN equipmentDepletionDetails eDD ON eDD.depletion = eD.id WHERE eDD.equipment = ? AND eD.date BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY) " +
                                            " GROUP BY eD.type ORDER BY eD.type) " +
                                            " UNION " +
                                            "(SELECT eT.type, SUM(eTD.quantity), eT.date FROM equipmentTransfer eT " +
                                            " LEFT JOIN equipmentTransferDetails eTD ON eTD.transfer = eT.id WHERE eTD.equipment = ? AND eT.date BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY) " +
                                            " GROUP BY eT.type ORDER BY eT.type) " +
                                            " UNION " +
                                            " (SELECT 5, SUM(pOD.quantity), pO.received FROM purchaseOrder pO LEFT JOIN purchaseOrderDetails pOD ON pOD.purchaseOrder = pO.id " +
                                            " WHERE pO.received IS NOT NULL AND pOD.equipment = ? AND pO.received BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY)) " +
                                            " UNION ALL " +                                          
                                            " (SELECT 6, eDD.endQuantity, eD.date FROM equipmentDepletion eD"
                                            + " LEFT JOIN equipmentDepletionDetails eDD ON eDD.depletion = eD.id WHERE eDD.equipment = ?  AND eD.date   < ? "
                                            + "  ORDER BY eD.date DESC LIMIT 1 )   UNION " +
                                            " (SELECT 7, eDD.endQuantity, eD.date FROM equipmentDepletion eD"
                                            + " LEFT JOIN equipmentDepletionDetails eDD ON eDD.depletion = eD.id WHERE eDD.equipment = ?  AND eD.date < ?  "
                                            + "  ORDER BY eD.date DESC  LIMIT 1) " +
                                            " UNION (SELECT 8, quantity, NOW() FROM equipment WHERE id = ?)" +
                                            " ORDER BY type";
        String selectEquipmentShipments     = "SELECT SUM(pOD.quantity) FROM purchaseOrder pO LEFT JOIN purchaseOrderDetails pOD ON pOD.purchaseOrder = pO.id " +
                                            " WHERE pOD.equipment = ? AND pO.date BETWEEN CONCAT(LEFT(?, 10), ' 07:00:00') " +
                                            " AND CONCAT(LEFT(ADDDATE(?, INTERVAL 1 DAY), 10), ' 07:00:00') GROUP BY equipment;";
        
        try {
            boolean pastMonth               = false;
            stmt                            = transconn.prepareStatement(checkDate);
            stmt.setString(1, startDate);
            stmt.setString(2, startDate);
            stmt.setString(3, startDate);
            stmt.setString(4, startDate);
            stmt.setString(5, endDate);
            stmt.setString(6, endDate);
            stmt.setString(7, endDate);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                startDate                   = rs.getString(1);
                endDate                     = rs.getString(2);
                pastMonth                   = rs.getBoolean(3);
                //logger.debug("StartDate:" +startDate+" endDate:"+endDate);
            }

            stmt                            = transconn.prepareStatement(selectEquipment);
            stmt.setInt(1, active);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                int equipmentId             = rs.getInt(colCount++);
                Element equipmentListEl     = toAppend.addElement("equipment");
                equipmentListEl.addElement("id").addText(String.valueOf(equipmentId));
                equipmentListEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                equipmentListEl.addElement("par").addText(String.valueOf(rs.getInt(colCount++)));
                equipmentListEl.addElement("alert").addText(String.valueOf(rs.getInt(colCount++)));
                equipmentListEl.addElement("price").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                //equipmentListEl.addElement("quantity").addText(String.valueOf(rs.getInt(colCount++)));

                boolean processedEndingQty  = false;
                stmt                        = transconn.prepareStatement(selectEquipmentHistory);
                stmt.setInt(1, equipmentId);
                stmt.setString(2, startDate);
                stmt.setString(3, endDate);
                stmt.setInt(4, equipmentId);
                stmt.setString(5, startDate);
                stmt.setString(6, endDate);
                stmt.setInt(7, equipmentId);
                stmt.setString(8, startDate);
                stmt.setString(9, endDate);
                stmt.setInt(10, equipmentId);
                stmt.setString(11, startDate);              
                stmt.setInt(12, equipmentId);                
                stmt.setString(13, endDate);
                stmt.setInt(14, equipmentId);
                innerRS                     = stmt.executeQuery();
                boolean isdataAvail         = false;
                boolean isStartAvail        = false;
                while (innerRS.next()) {
                    Element depletionEl     = equipmentListEl.addElement("data");
                    int type                = innerRS.getInt(1);
                    if(type == 6){
                        isStartAvail        = true;
                        int startQty        = innerRS.getInt(2);
                        equipmentListEl.addElement("startQuantity").addText(String.valueOf(startQty));
                    } else if(pastMonth && type == 7) {
                        processedEndingQty  = true;
                        int endQty          = innerRS.getInt(2);
                        // Getting shipments receive after lastdepletion
                        stmt                        = transconn.prepareStatement(selectEquipmentShipments);
                        stmt.setInt(1, equipmentId);
                        stmt.setString(2, innerRS.getString(3));
                        stmt.setString(3, endDate);
                        shipmentRS          = stmt.executeQuery();
                        if (shipmentRS.next()) {
                            endQty          = shipmentRS.getInt(1) + endQty;
                        }

                        equipmentListEl.addElement("endQuantity").addText(String.valueOf(endQty));
                    }  else if(!processedEndingQty && type == 8){
                        int endQty          = innerRS.getInt(2);
                        equipmentListEl.addElement("endQuantity").addText(String.valueOf(endQty));
                    } else {
                        depletionEl.addElement("type").addText(String.valueOf(innerRS.getInt(1)));
                        depletionEl.addElement("quantity").addText(String.valueOf(innerRS.getInt(2)));
                    }
                    if(innerRS.getInt(1)==1){
                        isdataAvail             = true;
                    }
                    
                }
                if(!isdataAvail) {
                    Element depletionEl     = equipmentListEl.addElement("data");
                    depletionEl.addElement("type").addText(String.valueOf(1));
                    depletionEl.addElement("quantity").addText(String.valueOf(0));
                    
                }
                if(!isStartAvail) {
                    equipmentListEl.addElement("startQuantity").addText(String.valueOf(0));
                    
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void addUpdateEquipment(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        String selectEquipment              = " SELECT id FROM equipment WHERE name = ?";
        String addEquipment                 = " INSERT INTO equipment (name, parValue, alertPoint, price, quantity) VALUES (?, ?, ?, ?, ?) ";
        String updateEquipment              = " UPDATE equipment SET name=?, parValue=?, alertPoint=?, price=?, quantity=?, active=? WHERE id = ? ";

        String getLastId                    = "SELECT LAST_INSERT_ID()";

        HashMap<Integer, Integer> equipmentOldQty
                                            = new HashMap<Integer, Integer>();
        HashMap<Integer, Integer> equipmentNewQty
                                            = new HashMap<Integer, Integer>();

        try {

            stmt                            = transconn.prepareStatement("SELECT id, quantity FROM equipment WHERE active = 1");
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                equipmentOldQty.put(rs.getInt(1), rs.getInt(2));
            }

            Iterator updateEquipments       = toHandle.elementIterator("updateEquipment");
            while (updateEquipments.hasNext()) {
                int colCount                = 1;
                Element equipment           = (Element) updateEquipments.next();
                int id                      = HandlerUtils.getRequiredInteger(equipment, "id");
                String name                 = HandlerUtils.getRequiredString(equipment, "name");
                int parValue                = HandlerUtils.getRequiredInteger(equipment, "par");
                int alertPoint              = HandlerUtils.getRequiredInteger(equipment, "alert");
                Double price                = HandlerUtils.getRequiredDouble(equipment, "price");
                int quantity                = HandlerUtils.getRequiredInteger(equipment, "quantity");
                int active                  = HandlerUtils.getRequiredInteger(equipment, "active");

                stmt                        = transconn.prepareStatement(updateEquipment);
                stmt.setString(colCount++, name);
                stmt.setInt(colCount++, parValue);
                stmt.setInt(colCount++, alertPoint);
                stmt.setDouble(colCount++, price);
                stmt.setInt(colCount++, quantity);
                stmt.setInt(colCount++, active);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                
                int oldQuantity             = equipmentOldQty.get(id);
                if (oldQuantity != quantity) {
                    equipmentNewQty.put(id, quantity);
                }
                
                String logMessage           = "Updated equipment '" + name + "'";
                logger.portalDetail(callerId, "updateEquipment", 0, "equipment", id, logMessage, transconn);
            }

            if (equipmentNewQty.size() > 0) {
                String insertEquipmentDepletion
                                            = "INSERT INTO equipmentDepletion (user, type) VALUES (?,?) ";
                String insertEquipmentDeplDet
                                            = "INSERT INTO equipmentDepletionDetails (depletion, equipment, startQuantity, endQuantity) VALUES (?,?,?,?) ";
                stmt                        = transconn.prepareStatement(insertEquipmentDepletion);
                stmt.setInt(1, callerId);
                stmt.setInt(2, 2);
                stmt.executeUpdate();
                
                int depletionId             = 0;
                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    depletionId             = rs.getInt(1);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in depletion failed to return a result");
                    throw new HandlerException("Database Error");
                }

                for (Integer equipment : equipmentOldQty.keySet()) {
                    stmt                    = transconn.prepareStatement(insertEquipmentDeplDet);
                    stmt.setInt(1, depletionId);
                    stmt.setInt(2, equipment);
                    stmt.setInt(3, equipmentOldQty.get(equipment));
                    stmt.setInt(4, (equipmentNewQty.containsKey(equipment) ? equipmentNewQty.get(equipment) : equipmentOldQty.get(equipment)));
                    stmt.executeUpdate();
                }
            }

            Iterator addEquipments          = toHandle.elementIterator("addEquipment");
            while (addEquipments.hasNext()) {
                int colCount                = 1;
                Element equipment           = (Element) addEquipments.next();
                String name                 = HandlerUtils.getRequiredString(equipment, "name");
                int parValue                = HandlerUtils.getRequiredInteger(equipment, "par");
                int alertPoint              = HandlerUtils.getRequiredInteger(equipment, "alert");
                Double price                = HandlerUtils.getRequiredDouble(equipment, "price");
                int quantity                = HandlerUtils.getRequiredInteger(equipment, "quantity");

                stmt                        = transconn.prepareStatement(selectEquipment);
                stmt.setString(1, name);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    throw new HandlerException("Equipment already exists for the specified name: " + name);
                }
                stmt                        = transconn.prepareStatement(addEquipment);
                stmt.setString(colCount++, name);
                stmt.setInt(colCount++, parValue);
                stmt.setInt(colCount++, alertPoint);
                stmt.setDouble(colCount++, price);
                stmt.setInt(colCount++, quantity);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int id                  = rs.getInt(1);
                    String logMessage       = "Added equipment '" + name + "'";
                    logger.portalDetail(callerId, "addEquipment", 0, "equipment", id, logMessage, transconn);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addEquipment failed to return a result");
                    throw new HandlerException("Database Error");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void transferEquipment(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        String getLastId                    = "SELECT LAST_INSERT_ID()";

        HashMap<Integer, Integer> equipmentOldQty
                                            = new HashMap<Integer, Integer>();
        HashMap<Integer, Integer> equipmentNewQty
                                            = new HashMap<Integer, Integer>();

        try {
            stmt                            = transconn.prepareStatement("SELECT id, tQuantity FROM equipment WHERE active = 1");
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                equipmentOldQty.put(rs.getInt(1), rs.getInt(2));
            }
            int transferId                  = -1;

            Iterator transferEquipments     = toHandle.elementIterator("transferEquipments");
            while (transferEquipments.hasNext()) {
                Element equipment           = (Element) transferEquipments.next();
                int id                      = HandlerUtils.getRequiredInteger(equipment, "id");
                int quantity                = HandlerUtils.getRequiredInteger(equipment, "quantity");
                
                if (transferId < 0) {
                    String insertEquipmentTransfer
                                            = "INSERT INTO equipmentTransfer (user, type) VALUES (?,?) ";
                    stmt                    = transconn.prepareStatement(insertEquipmentTransfer);
                    stmt.setInt(1, callerId);
                    stmt.setInt(2, 3);
                    stmt.executeUpdate();
                    
                    stmt                    = transconn.prepareStatement(getLastId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        transferId          = rs.getInt(1);
                    } else {
                        logger.dbError("first call to LAST_INSERT_ID in transfer failed to return a result");
                        throw new HandlerException("Database Error");
                    }
                }
                
                String insertEquipmentTransDet
                                            = "INSERT INTO equipmentTransferDetails (transfer, equipment, quantity, startQuantity, endQuantity) VALUES (?,?,?,?,?) ";
                int oldQuantity             = equipmentOldQty.get(id);
                int newQuantity             = oldQuantity - quantity;
                stmt                        = transconn.prepareStatement(insertEquipmentTransDet);
                stmt.setInt(1, transferId);
                stmt.setInt(2, id);
                stmt.setInt(3, quantity);
                stmt.setInt(4, oldQuantity);
                stmt.setInt(5, newQuantity);
                stmt.executeUpdate();

                equipmentNewQty.put(id, quantity);
            }



            if (equipmentNewQty.size() > 0) {
                for (Integer equipmentId : equipmentNewQty.keySet()) {
                    stmt                   = transconn.prepareStatement(" UPDATE equipment SET tQuantity = tQuantity - ?, quantity = quantity + ? WHERE id = ? ");
                    stmt.setInt(1, equipmentNewQty.get(equipmentId));
                    stmt.setInt(2, equipmentNewQty.get(equipmentId));
                    stmt.setInt(3, equipmentId);
                    stmt.executeUpdate();
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getInventoryReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, innerRS = null;

        try {
            String sql                      = "(SELECT eD.id, eD.type, u.name, IF(eD.type = 1, 'Shipment', 'Manual Adjustment') typeString, " +
                                            " IFNULL(BL.location_name,'NA'), eD.date FROM equipmentDepletion eD LEFT JOIN user u ON u.id = eD.user " +
                                            " LEFT JOIN BOSS_Location BL ON BL.id = eD.location WHERE eD.date BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY)) " +
                                            " UNION " +
                                             "(SELECT eT.id, eT.type, u.name, IF(eT.type = 3, 'Transfer', 'Manual Adjustment') typeString, " +
                                            " 'NA', eT.date FROM equipmentTransfer eT LEFT JOIN user u ON u.id = eT.user " +
                                            " WHERE eT.date BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY)) " +
                                            " UNION " +
                                            " (SELECT pD.id, 5 type, u.name, 'Purchase' typeString, 'NA', pD.received FROM purchaseOrder pD LEFT JOIN user u ON u.id = pD.user " +
                                            " WHERE pD.received IS NOT NULL AND pD.received BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY)) " +
                                            " ORDER BY date DESC, type ";
            stmt                            = transconn.prepareStatement(sql);
            stmt.setString(1, startDate);
            stmt.setString(2, endDate);
            stmt.setString(3, startDate);
            stmt.setString(4, endDate);
            stmt.setString(5, startDate);
            stmt.setString(6, endDate);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                int parameterId             = rs.getInt(colCount++);
                int parameterType           = rs.getInt(colCount++);
                Element depletionEl         = toAppend.addElement("data");
                depletionEl.addElement("type").addText(String.valueOf(parameterType));
                depletionEl.addElement("user").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                depletionEl.addElement("typeString").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                depletionEl.addElement("location").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                depletionEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));

                if (parameterType <= 2) {
                    String selectDepletionDet
                                            = "SELECT e.name, eDD.startQuantity, eDD.endQuantity FROM equipmentDepletionDetails eDD " +
                                            " LEFT JOIN equipment e ON e.id = eDD.equipment WHERE eDD.depletion = ? ";
                    stmt                    = transconn.prepareStatement(selectDepletionDet);
                    stmt.setInt(1, parameterId);
                    innerRS                 = stmt.executeQuery();
                    while (innerRS.next()) {
                        int depletion       = innerRS.getInt(2) - innerRS.getInt(3);
                        if (depletion != 0) {
                            Element depletionDetEl
                                            = depletionEl.addElement("details");
                            depletionDetEl.addElement("equipment").addText(HandlerUtils.nullToEmpty(innerRS.getString(1)));
                            depletionDetEl.addElement("quantity").addText(String.valueOf(depletion));
                        }
                    }
                } else if (parameterType <= 4) {
                    String selectTransferDet= "SELECT e.name, eTD.quantity FROM equipmentTransferDetails eTD " +
                                            " LEFT JOIN equipment e ON e.id = eTD.equipment WHERE eTD.transfer = ? ";
                    stmt                    = transconn.prepareStatement(selectTransferDet);
                    stmt.setInt(1, parameterId);
                    innerRS                 = stmt.executeQuery();
                    while (innerRS.next()) {
                        Element depletionDetEl
                                            = depletionEl.addElement("details");
                        depletionDetEl.addElement("equipment").addText(HandlerUtils.nullToEmpty(innerRS.getString(1)));
                        depletionDetEl.addElement("quantity").addText(String.valueOf(innerRS.getInt(2)));
                    }
                } else {
                    String selectPurchaseOrderDet
                                            = "SELECT e.name, pOD.quantity FROM purchaseOrderDetails pOD " +
                                            " LEFT JOIN equipment e ON e.id = pOD.equipment WHERE pOD.purchaseOrder = ? ";
                    stmt                    = transconn.prepareStatement(selectPurchaseOrderDet);
                    stmt.setInt(1, parameterId);
                    innerRS                 = stmt.executeQuery();
                    while (innerRS.next()) {
                        Element purchaseDetEl
                                            = depletionEl.addElement("details");
                        purchaseDetEl.addElement("equipment").addText(HandlerUtils.nullToEmpty(innerRS.getString(1)));
                        purchaseDetEl.addElement("quantity").addText(String.valueOf(innerRS.getInt(2)));
                    }
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(innerRS);
            close(rs);
            close(stmt);
        }
    }

    private void emailAccountStatement(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int account                         = HandlerUtils.getRequiredInteger(toHandle, "account");
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getRequiredString(toHandle, "endDate");
        int user                            = HandlerUtils.getOptionalInteger(toHandle, "user");
        String emailAddress                 = HandlerUtils.getOptionalString(toHandle, "email");

        String selectAccountDetails         = "SELECT CONCAT('Invoices are ', t.name), a.name, a.addrStreet, a.addrCity, a.addrState, a.addrZip FROM accounts a LEFT JOIN terms t ON t.id = a.terms" +
                                            " WHERE a.id = ? ";
        String sqlTransactions              = "(SELECT 0 Type, ? date, 'Balance Forward', SUM(amount) FROM " +
                                            " (SELECT SUM(i.amount) amount FROM invoice i WHERE i.active = 1 AND i.approved = 1 AND i.account = ? " +
                                            " AND i.date < ? AND i.received IS NULL " +
                                            " UNION " +
                                            " SELECT SUM(pIM.amount) amount FROM invoice i " +
                                            " LEFT JOIN paymentInvoiceMap pIM ON pIM.invoice = i.id LEFT JOIN payment p ON p.id = pIM.payment WHERE i.active = 1 AND " +
                                            " i.approved = 1 AND i.account = ? AND i.date < ? AND p.received >= ?) AS a) " +
                                            " UNION " +
                                            " (SELECT 1 Type, i.date, CONCAT('Invoice #', i.invoiceNumber), SUM(i.amount) FROM accounts a " +
                                            " LEFT JOIN invoice i ON i.account = a.id WHERE i.active = 1 AND i.approved = 1 AND a.id = ? AND i.date BETWEEN ? AND ? " +
                                            " GROUP BY i.id ORDER BY i.date DESC) " +
                                            " UNION " +
                                            " (SELECT 2 Type, p.received, CONCAT('Payment #', p.details), SUM(p.amount)*-1 " +
                                            " FROM accounts a LEFT JOIN payment p ON p.account = a.id WHERE a.id = ? AND p.received BETWEEN ? AND ? GROUP BY p.id " +
                                            " ORDER BY p.received DESC) ORDER BY date, Type;";

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        String subjectLine                  = "Statement from US Beverage NET, Inc.";
        StringBuilder statementList         = new StringBuilder();
        double currentBalanceDue            = 0.0;

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectAccountDetails);
            stmt.setInt(1,account);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                statementList.append("<tr style=height:30><td style='width:250px;'><strong>US Beverage NET, Inc.</strong></td>");
                statementList.append("<td style='width:250px;'></td>");
                statementList.append("<td align=center valign=top style='font-size: large;'><strong>Statement</strong></td></tr>");
                statementList.append("<tr><td style='width:50%;'>225 W Jefferson Street</td><td />");
                statementList.append("<td rowspan=3 align=right><table style='width:200px; border: thin solid #000000; border-collapse: collapse; padding-right: 2px;'>");
                statementList.append("<tr><td align=center style='border: thin solid #000000;'>Date</td></tr>");
                statementList.append("<tr><td align=center style='border: thin solid #000000'>" + endDate + "</td></tr>");
                statementList.append("</table></td></tr>");
                statementList.append("<tr><td>Syracuse, NY 13202</td></tr>");
                statementList.append("<tr><td>Ph: 888-298-3641, Fx: 315-579-4337</td></tr>");
                statementList.append("<tr style=height:30><td></td></tr>");
                statementList.append("<tr style=height:30><td style='width:50%; border: thin solid #000000; border-collapse: collapse;'>To</td><td></td>");
                statementList.append("<td rowspan=2 align=right valign=top><table style='width:200px; border-collapse: collapse;'>");
                statementList.append("<tr><td align=center style='border: thin solid #000000'>Current Balance Due</td></tr>");
                statementList.append("<tr><td align=center style='border: thin solid #000000; padding-top: 10px; padding-bottom: 10px; font-size: small; font-weight:bold;'>@@currentblancedue@@</td></tr>");
                statementList.append("<tr><td align=center style='padding-top: 10px; padding-bottom: 10px; font-size: x-small; font-style:italic;'>" + rs.getString(1) + "</td></tr>");
                statementList.append("</table></td></tr>");
                statementList.append("<tr style=height:30><td style='width:50%; border: thin solid #000000; border-collapse: collapse; padding-top: 10px; padding-bottom: 10px;'>" + rs.getString(2) + "<br />");
                statementList.append(rs.getString(3) + "<br />");
                statementList.append(rs.getString(4) + ", " + rs.getString(5) + " " + rs.getString(6)  + "</td><td style=height:10></td></tr>");
                statementList.append("<tr style=height:30><td></td></tr>");
                statementList.append("<tr style=height:30><td align=right colspan=3>");
                statementList.append("<table style='width:100%; border: thin solid #000000; border-collapse: collapse;'>");
                statementList.append("<tr><td align=center style='border: thin solid #000000; width: 15%'>Date</td>");
                statementList.append("<td align=center style='border: thin solid #000000; width: 45%'>Transaction</td>");
                statementList.append("<td align=right style='border: thin solid #000000; width: 15%; padding-right: 10px;'>Amount</td>");
                statementList.append("<td align=right style='border: thin solid #000000; width: 15%; padding-right: 10px;'>Balance</td></tr>");
            }

            int colCount                    = 1;
            stmt                            = transconn.prepareStatement(sqlTransactions);
            stmt.setString(colCount++, startDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setString(colCount++, startDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setString(colCount++, endDate);
            stmt.setInt(colCount++,account);
            stmt.setString(colCount++, startDate);
            stmt.setString(colCount++, endDate);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                if (rs.isFirst()) {
                    statementList.append("<tr style=height:20><td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' />");
                    statementList.append("<td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' /></tr>");
                }
                colCount                    = 1;
                int type                    = rs.getInt(colCount++);
                statementList.append("<tr><td align=center style='font-size: small; border-right: thin solid #000000'>" + rs.getString(colCount++) + "</td>");
                statementList.append("<td align=left style='border-right: thin solid #000000'>" + rs.getString(colCount++) + "</td>");
                double amount               = rs.getDouble(colCount++);
                statementList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'>" + nf.format(amount) + "</td>");
                currentBalanceDue           += amount;
                statementList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'>" + nf.format(currentBalanceDue) + "</td></tr>");
            }
            statementList.append("<tr style=height:20><td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' />");
            statementList.append("<td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' /></tr>");
            statementList.append("<tr><td colspan=3 align=right style='font-size: small; border: thin solid #000000; padding-right: 10px;'>Current Balance Due</td>");
            statementList.append("<td align=right style='border: thin solid #000000; padding-right: 10px;'>" + nf.format(currentBalanceDue) +"</td></tr>");
            statementList.append("</table></td></tr>");
            statementList.replace(statementList.indexOf("@@currentblancedue@@"), statementList.indexOf("@@currentblancedue@@") + "@@currentblancedue@@".length(), nf.format(currentBalanceDue));
            sendMail("", "billing@usbeveragenet.com", emailAddress, "billing@usbeveragenet.com", subjectLine, "sendMail", statementList, true);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getInstallScheduleReport(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            String sql                      = "(SELECT 1 Type, COUNT(BL.id), MONTH(IC.installDate) Mon FROM locationDetails lD " +
                                            " LEFT JOIN BOSS_Location BL ON BL.usbn_location = lD.location LEFT JOIN Installation_Checklist IC ON IC.location_id = BL.id " +
                                            " WHERE lD.active =1 AND lD.preInstall = 1 AND lD.scheduled = 1 AND lD.billing = 1 AND IC.installDate > SUBDATE(?, INTERVAL 1 DAY) GROUP BY MONTH(IC.installDate)) " +
                                            " UNION " +
                                            " (SELECT 2 Type, COUNT(BL.id), MONTH(IC.scheduledDate) Mon FROM locationDetails lD " +
                                            " LEFT JOIN BOSS_Location BL ON BL.usbn_location = lD.location LEFT JOIN Installation_Checklist IC ON IC.location_id = BL.id " +
                                            " WHERE lD.active =1 AND lD.preInstall = 1 AND lD.scheduled = 1 AND lD.billing = 0 GROUP BY MONTH(IC.scheduledDate)) " +
                                            " ORDER BY Type, Mon;";
            stmt                            = transconn.prepareStatement(sql);
            stmt.setString(1, startDate);
            rs                              = stmt.executeQuery();
            getInstallScheduleReportXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getInstallScheduleReportXML(Element toAppend, ResultSet rs) throws SQLException {
        while (rs.next()) {
            int colCount                    = 1;
            Element installScheduleEl       = toAppend.addElement("data");
            installScheduleEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
            installScheduleEl.addElement("count").addText(String.valueOf(rs.getInt(colCount++)));
            installScheduleEl.addElement("month").addText(String.valueOf(rs.getInt(colCount++)));
        }
    }

    private void getVendors(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT v.id, v.name, v.addrStreet, v.addrCity, v.addrState, v.addrZip, v.email, v.fax FROM vendor v ORDER BY v.name";

        try {
            stmt                            = transconn.prepareStatement(sql);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                Element vendorEl            = toAppend.addElement("details");
                vendorEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                vendorEl.addElement("name").addText(String.valueOf(rs.getString(colCount++)));
                vendorEl.addElement("street").addText(String.valueOf(rs.getString(colCount++)));
                vendorEl.addElement("city").addText(String.valueOf(rs.getString(colCount++)));
                vendorEl.addElement("state").addText(String.valueOf(rs.getString(colCount++)));
                vendorEl.addElement("zip").addText(String.valueOf(rs.getString(colCount++)));
                vendorEl.addElement("email").addText(String.valueOf(rs.getString(colCount++)));
                vendorEl.addElement("fax").addText(String.valueOf(rs.getString(colCount++)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void addUpdateVendor(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        String selectVendor                 = " SELECT id FROM vendor WHERE name = ?";
        String addVendor                    = " INSERT INTO vendor (name, addrStreet, addrCity, addrState, addrZip, email, fax) VALUES (?, ?, ?, ?, ?, ?, ?) ";
        String updateVendor                 = " UPDATE vendor SET name=?, addrStreet=?, addrCity=?, addrState=?, addrZip=?, email=?, fax=? WHERE id = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";

        try {

            Iterator updateVendors          = toHandle.elementIterator("updateVendors");
            while (updateVendors.hasNext()) {
                int colCount                = 1;
                Element vendor              = (Element) updateVendors.next();
                int id                      = HandlerUtils.getRequiredInteger(vendor, "id");
                String name                 = HandlerUtils.getRequiredString(vendor, "name");
                String street               = HandlerUtils.getRequiredString(vendor, "street");
                String city                 = HandlerUtils.getRequiredString(vendor, "city");
                String state                = HandlerUtils.getRequiredString(vendor, "state");
                String zip                  = HandlerUtils.getRequiredString(vendor, "zip");
                String email                = HandlerUtils.getRequiredString(vendor, "email");
                String fax                  = HandlerUtils.getRequiredString(vendor, "fax");

                stmt                        = transconn.prepareStatement(updateVendor);
                stmt.setString(colCount++, name);
                stmt.setString(colCount++, street);
                stmt.setString(colCount++, city);
                stmt.setString(colCount++, state);
                stmt.setString(colCount++, zip);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, fax);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();

                String logMessage           = "Updated vendor '" + name + "'";
                logger.portalDetail(callerId, "updateVendor", 0, "vendor", id, logMessage, transconn);
            }

            Iterator addVendors             = toHandle.elementIterator("addVendors");
            while (addVendors.hasNext()) {
                int colCount                = 1;
                Element vendor              = (Element) addVendors.next();
                String name                 = HandlerUtils.getRequiredString(vendor, "name");
                String street               = HandlerUtils.getRequiredString(vendor, "street");
                String city                 = HandlerUtils.getRequiredString(vendor, "city");
                String state                = HandlerUtils.getRequiredString(vendor, "state");
                String zip                  = HandlerUtils.getRequiredString(vendor, "zip");
                String email                = HandlerUtils.getRequiredString(vendor, "email");
                String fax                  = HandlerUtils.getRequiredString(vendor, "fax");

                stmt                        = transconn.prepareStatement(selectVendor);
                stmt.setString(1, name);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    throw new HandlerException("Vendor already exists for the specified name: " + name);
                }
                stmt                        = transconn.prepareStatement(addVendor);
                stmt.setString(colCount++, name);
                stmt.setString(colCount++, street);
                stmt.setString(colCount++, city);
                stmt.setString(colCount++, state);
                stmt.setString(colCount++, zip);
                stmt.setString(colCount++, email);
                stmt.setString(colCount++, fax);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int id                  = rs.getInt(1);
                    String logMessage       = "Added vendor '" + name + "'";
                    logger.portalDetail(callerId, "addVendor", 0, "vendor", id, logMessage, transconn);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in addVendor failed to return a result");
                    throw new HandlerException("Database Error");
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getPurchaseOrders(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int status                          = HandlerUtils.getRequiredInteger(toHandle, "status");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT pO.id, v.id, v.name, u.name, pO.orderNumber, pO.date, pO.received FROM purchaseOrder pO LEFT JOIN vendor v ON v.id = pO.vendor " +
                                            " LEFT JOIN user u ON u.id = pO.user ";

        switch (status) {
            case 1:
                sql                         += " WHERE pO.received IS NULL ";
                break;
            case 2:
                sql                         += " WHERE pO.received IS NOT NULL ";
                break;
        }

        try {
            stmt                            = transconn.prepareStatement(sql);
            rs                              = stmt.executeQuery();
            getPurchaseOrdersXML(toAppend, rs);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getPurchaseOrdersXML(Element toAppend, ResultSet rs) throws SQLException {

        while (rs.next()) {
            int colCount                    = 1;
            Element purchaseOrderEl         = toAppend.addElement("data");
            purchaseOrderEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            purchaseOrderEl.addElement("vendor").addText(String.valueOf(rs.getInt(colCount++)));
            purchaseOrderEl.addElement("vendorName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            purchaseOrderEl.addElement("user").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            purchaseOrderEl.addElement("orderNumber").addText(String.valueOf(rs.getInt(colCount++)));
            purchaseOrderEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            purchaseOrderEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    }

    private void getPurchaseOrderDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int purchaseOrder                   = HandlerUtils.getRequiredInteger(toHandle, "purchaseOrder");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT equipment, quantity FROM purchaseOrderDetails WHERE purchaseOrder = ? ";
        try {
            stmt                            = transconn.prepareStatement(sql);
            stmt.setInt(1, purchaseOrder);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                    = 1;
                Element purchaseOrderEl         = toAppend.addElement("data");
                purchaseOrderEl.addElement("equipment").addText(String.valueOf(rs.getInt(colCount++)));
                purchaseOrderEl.addElement("quantity").addText(String.valueOf(rs.getInt(colCount++)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void createPurchaseOrder(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int vendor                          = HandlerUtils.getRequiredInteger(toHandle, "vendor");
        String date                         = HandlerUtils.getRequiredString(toHandle, "date");
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String checkPurchaseOrder           = " SELECT id FROM purchaseOrder WHERE vendor = ? AND date = ? AND received IS NULL";
        String createPurchaseOrder          = " INSERT INTO purchaseOrder (vendor, user, orderNumber, date) VALUES (?, ?, ?, ?) ";
        String insertPurchaseOrderDetails   = " INSERT INTO purchaseOrderDetails (purchaseOrder, equipment, quantity) VALUES (?, ?, ?) ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        
        try {
            stmt                            = transconn.prepareStatement(checkPurchaseOrder);
            stmt.setInt(1, vendor);
            stmt.setString(2, date);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                throw new HandlerException("An open purchase order already exists for the specified vendor for the same order date: " + date);
            }

            int orderNumber                 = 0;
            stmt                            = transconn.prepareStatement("SELECT orderNumber FROM purchaseOrder ORDER BY orderNumber DESC LIMIT 1");
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                orderNumber                 = rs.getInt(1) + 1;
            }

            stmt                            = transconn.prepareStatement(createPurchaseOrder);
            stmt.setInt(1, vendor);
            stmt.setInt(2, callerId);
            stmt.setInt(3, orderNumber);
            stmt.setString(4, date);
            stmt.executeUpdate();
            
            stmt                            = transconn.prepareStatement(getLastId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int purchaseOrder           = rs.getInt(1);
                String logMessage           = "Added purchase order for '" + vendor + "'";
                logger.portalDetail(callerId, "createPurchaseOrder", 0, "purchaseOrder", purchaseOrder, logMessage, transconn);
                toAppend.addElement("purchaseOrder").addText(String.valueOf(purchaseOrder));

                Iterator details            = toHandle.elementIterator("details");
                while (details.hasNext()) {
                    int colCount            = 1;
                    Element detail          = (Element) details.next();
                    int equipment           = HandlerUtils.getRequiredInteger(detail, "equipment");
                    int quantity            = HandlerUtils.getRequiredInteger(detail, "quantity");

                    stmt                    = transconn.prepareStatement(insertPurchaseOrderDetails);
                    stmt.setInt(1, purchaseOrder);
                    stmt.setInt(2, equipment);
                    stmt.setInt(3, quantity);
                    stmt.executeUpdate();
                }
            } else {
                logger.dbError("first call to LAST_INSERT_ID in createPurchaseOrder failed to return a result");
                throw new HandlerException("Database Error");
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void updatePurchaseOrder(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int purchaseOrder                   = HandlerUtils.getRequiredInteger(toHandle, "purchaseOrder");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String deletePurchaseOrderDetails   = " DELETE FROM purchaseOrderDetails WHERE purchaseOrder = ? ";
        String deletePurchaseOrder          = " DELETE FROM purchaseOrder WHERE id = ? ";
        String insertPurchaseOrderDetails   = " INSERT INTO purchaseOrderDetails (purchaseOrder, equipment, quantity) VALUES (?, ?, ?) ";

        boolean totalWipe                   = true;

        try {
            stmt                            = transconn.prepareStatement(deletePurchaseOrderDetails);
            stmt.setInt(1, purchaseOrder);
            stmt.executeUpdate();
                
            Iterator details                = toHandle.elementIterator("details");
            while (details.hasNext()) {
                totalWipe                   = false;
                Element detail              = (Element) details.next();
                int equipment               = HandlerUtils.getRequiredInteger(detail, "equipment");
                int quantity                = HandlerUtils.getRequiredInteger(detail, "quantity");

                stmt                        = transconn.prepareStatement(insertPurchaseOrderDetails);
                stmt.setInt(1, purchaseOrder);
                stmt.setInt(2, equipment);
                stmt.setInt(3, quantity);
                stmt.executeUpdate();
            }

            if (totalWipe) {
                stmt                        = transconn.prepareStatement(deletePurchaseOrder);
                stmt.setInt(1, purchaseOrder);
                stmt.executeUpdate();
            }
            
            String logMessage               = "Updated purchase order '" + purchaseOrder + "'";
            logger.portalDetail(callerId, "updatePurchaseOrder", 0, "purchaseOrder", purchaseOrder, logMessage, transconn);
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void receivePurchaseOrder(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String received                     = HandlerUtils.getRequiredString(toHandle, "received");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectPurchaseOrderDetails   = "SELECT equipment, quantity FROM purchaseOrderDetails WHERE purchaseOrder = ? ";
        String updateEquipmentQuantity      = "UPDATE equipment SET quantity = quantity + ? WHERE id = ?";
        String updatePurchaseOrder          = "UPDATE purchaseOrder SET received =  ? WHERE id = ?";

        try {
            Iterator orders                 = toHandle.elementIterator("orders");
            while (orders.hasNext()) {
                Element order               = (Element) orders.next();
                int purchaseOrder           = HandlerUtils.getRequiredInteger(order, "purchaseOrder");
                boolean updated             = false;

                stmt                        = transconn.prepareStatement(selectPurchaseOrderDetails);
                stmt.setInt(1, purchaseOrder);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    updated                 = true;
                    stmt                    = transconn.prepareStatement(updateEquipmentQuantity);
                    stmt.setInt(1, rs.getInt(2));
                    stmt.setInt(2, rs.getInt(1));
                    stmt.executeUpdate();
                }
                
                if (updated) {
                    stmt                    = transconn.prepareStatement(updatePurchaseOrder);
                    stmt.setString(1, received);
                    stmt.setInt(2, purchaseOrder);
                    stmt.executeUpdate();
                }
                String logMessage           = "Received purchase order '" + purchaseOrder + "'";
                logger.portalDetail(callerId, "receivePurchaseOrder", 0, "purchaseOrder", purchaseOrder, logMessage, transconn);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void sendPurchaseOrders(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int purchaseOrder                   = HandlerUtils.getRequiredInteger(toHandle, "purchaseOrder");
        String email                        = HandlerUtils.getOptionalString(toHandle, "email");

        String selectPurchaseOrder          = "SELECT pO.date, pO.orderNumber, v.name, v.addrStreet, v.addrCity, v.addrState, v.addrZip, v.email " +
                                            " FROM purchaseOrder pO LEFT JOIN vendor v ON v.id = pO.vendor WHERE pO.id = ?";
        String sqlPurchaseOrderDetails      = "SELECT e.id, e.name, e.description, eD.quantity, e.price, eD.quantity*e.price FROM purchaseOrderDetails eD LEFT JOIN equipment e ON e.id = eD.equipment " +
                                            " WHERE eD.purchaseOrder = ? ";

        NumberFormat nf                     = NumberFormat.getCurrencyInstance();
        String subjectLine                  = "Purchase Order from US Beverage NET, Inc.";
        StringBuilder orderList             = new StringBuilder();

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, itemRS = null;

        try {
            stmt                            = transconn.prepareStatement(selectPurchaseOrder);
            stmt.setInt(1, purchaseOrder);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int colCount                = 1;
                orderList.append("<tr style=height:30><td style='width:250px;'><strong>US Beverage NET, Inc.</strong></td>");
                orderList.append("<td style='width:250px;'></td>");
                orderList.append("<td align=right valign=top style='font-size: large;'><strong>Purchase Order</strong></td></tr>");
                orderList.append("<tr><td style='width:50%;'>225 W Jefferson Street</td><td />");
                orderList.append("<td rowspan=3 align=right><table style='width:200px; border: thin solid #000000; border-collapse: collapse; padding-right: 2px;'>");
                orderList.append("<tr><td align=center style='border: thin solid #000000;'>Date</td>");
                orderList.append("<td align=center style='border: thin solid #000000;'>P.O. #</td></tr>");
                orderList.append("<tr><td align=center style='border: thin solid #000000'>" + rs.getString(colCount++) + "</td>");
                orderList.append("<td align=center style='border: thin solid #000000'>" + rs.getString(colCount++) + "</td></tr>");
                orderList.append("</table></td></tr>");
                orderList.append("<tr><td>Syracuse, NY 13202</td></tr>");
                orderList.append("<tr><td>Ph: 888-298-3641, Fx: 315-579-4337</td></tr>");

                orderList.append("<tr style=height:30><td></td></tr>");

                orderList.append("<tr style=height:30><td style='width:45%; border: thin solid #000000; border-collapse: collapse; padding-left: 10px;'>Vendor</td><td></td>");
                orderList.append("<td style='width:45%; border: thin solid #000000; border-collapse: collapse; padding-left: 10px;'>Ship To</td></tr>");
                orderList.append("<tr style=height:30><td style='border: thin solid #000000; border-collapse: collapse; padding-top: 10px; padding-bottom: 10px; padding-left: 10px;'>" + rs.getString(colCount++) + "<br />");
                orderList.append(rs.getString(colCount++) + "<br />");
                orderList.append(rs.getString(colCount++) + ", " + rs.getString(colCount++) + " " + rs.getString(colCount++)  + "</td><td style=height:10; width=></td>");
                orderList.append("<td style='border: thin solid #000000; border-collapse: collapse; padding-top: 10px; padding-bottom: 10px; padding-left: 10px;'>US Beverage NET, Inc.<br />");
                orderList.append("225 W Jefferson Street<br />");
                orderList.append("Syracuse, NY 13202<br />Ph: 888-298-3641, Fx: 315-579-4337</td></tr>");

                orderList.append("<tr style=height:30><td></td></tr>");

                orderList.append("<tr style=height:30><td align=right colspan=3><table style='width:100%; border: thin solid #000000; border-collapse: collapse;'>");
                orderList.append("<tr><td align=center style='border: thin solid #000000; width:20%'>Item</td>");
                orderList.append("<td align=center style='border: thin solid #000000; width:40%'>Description</td>");
                orderList.append("<td align=center style='border: thin solid #000000; width:10%'>Qty</td>");
                orderList.append("<td align=right style='border: thin solid #000000; width:15%; padding-right: 10px;'>Rate</td>");
                orderList.append("<td align=right style='border: thin solid #000000; width:15%; padding-right: 10px;'>Amount</td></tr>");

                double orderAmount          = 0.0;
                stmt                        = transconn.prepareStatement(sqlPurchaseOrderDetails);
                stmt.setInt(1, purchaseOrder);
                itemRS                      = stmt.executeQuery();
                while (itemRS.next()) {
                    if (itemRS.isFirst()) {
                        orderList.append("<tr style=height:20><td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' />");
                        orderList.append("<td style='border-right: thin solid #000000' /><td style='border-right: thin solid #000000' /></td></tr>");
                    }
                    orderList.append("<tr><td align=left style='font-size: x-small; border-right: thin solid #000000'>" + itemRS.getString(2) + "</td>");
                    orderList.append("<td align=left style='font-size: x-small; border-right: thin solid #000000'>" + itemRS.getString(3) + "</td>");
                    orderList.append("<td align=center style='border-right: thin solid #000000'>" + itemRS.getString(4) + "</td>");
                    orderList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'>" + nf.format(itemRS.getDouble(5)) +"</td>");
                    orderList.append("<td align=right style='border-right: thin solid #000000; padding-right: 10px;'>" + nf.format(itemRS.getDouble(6)) +"</td></tr>");
                    orderAmount             += itemRS.getDouble(6);
                }
                orderList.append("<tr><td colspan=3 style='border-top: thin solid #000000' /><td align=center style='font-size: small; border: thin solid #000000'>Total</td>");
                orderList.append("<td align=right style='border: thin solid #000000; padding-right: 10px;'>" + nf.format(orderAmount) +"</td></tr>");
                orderList.append("</table></td></tr>");

                sendMail("", "billing@usbeveragenet.com", (email == null ? rs.getString(colCount++) : email), "billing@usbeveragenet.com", subjectLine, "sendMail", orderList, true);

                stmt                            = transconn.prepareStatement("SELECT email FROM user WHERE id = ?");
                stmt.setInt(1, callerId);
                rs                              = stmt.executeQuery();
                if (rs.next()) {
                    sendMail("", "billing@usbeveragenet.com", rs.getString(1), "billing@usbeveragenet.com", subjectLine, "sendMail", orderList, false);
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(itemRS);
            close(rs);
            close(stmt);
        }
    }

    private void getTroubleTickets(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getOptionalInteger(toHandle, "locationId");
        int customerId                      = HandlerUtils.getOptionalInteger(toHandle, "customerId");        
        int owner                           = HandlerUtils.getOptionalInteger(toHandle, "owner"); 
        int assignedTo                      = HandlerUtils.getOptionalInteger(toHandle, "assignedTo");
        int category                        = HandlerUtils.getOptionalInteger(toHandle, "category");
        boolean getClosed                   = HandlerUtils.getOptionalBoolean(toHandle, "getClosed");
        boolean getOnHold                   = HandlerUtils.getOptionalBoolean(toHandle, "getOnHold");
        boolean getAllClosed                = HandlerUtils.getOptionalBoolean(toHandle, "getAllClosed");
        boolean escalated                   = HandlerUtils.getOptionalBoolean(toHandle, "escalated");
        String startDate                    = HandlerUtils.getOptionalString(toHandle, "startDate");
        String endDate                      = HandlerUtils.getOptionalString(toHandle, "endDate");
        
        int export                          = HandlerUtils.getOptionalInteger(toHandle, "export"); 
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectTickets                = "SELECT t.id, u.name, a.name, CONCAT(cu.name,' : ',l.name),cu.id,cu.name,l.name,BL.id, t.location, c.id, c.name, p.description, " +
                                            " r.description, t.open, t.close,t.onHold, CONCAT(t.notes, '</br></br> ', GROUP_CONCAT(IFNULL(tL.notes, '') SEPARATOR '</br></br>')), " +
                                            " t.dateCreated, t.dateUpdated, CONCAT(BL.location_contact, ' (', BL.location_contact_title, ') : ', BL.location_ph) FROM ticket t LEFT JOIN location l ON l.id = t.location LEFT JOIN customer cu ON cu.id = l.customer LEFT JOIN BOSS_Location BL ON BL.usbn_location = l.id" +
                                            " LEFT JOIN user u ON u.id = t.owner LEFT JOIN user a ON a.id = t.assignedTo LEFT JOIN ticketCategory c ON c.id = t.category " +
                                            " LEFT JOIN ticketProblem p ON p.id = t.problem LEFT JOIN ticketResolution r ON r.id = t.resolution LEFT JOIN ticketLogs tL ON tL.ticket = t.id ";
        if (getAllClosed) {
            selectTickets                   += " WHERE t.close IS NOT NULL ";
        } else if (getClosed) {
            selectTickets                   += " WHERE t.close IS NOT NULL ";  //AND t.close > SUBDATE(CONCAT(LEFT(NOW(),11),'07:00:00'),INTERVAL 7 DAY) 
        } else if (getOnHold) {
            selectTickets                   += " WHERE t.onHold IS NOT NULL ";
        } else {
            selectTickets                   += " WHERE t.close IS NULL AND t.onHold IS  NULL ";
        }
        if (locationId > 0) {
            selectTickets                   += " AND l.id = ? ";
        }
        if(customerId > 0) {
            selectTickets                   += " AND cu.id = ? ";
        }
        if (assignedTo > 0) {
            selectTickets                   += " AND t.assignedTo = ? ";
        } else if (owner > 0) {
            selectTickets                   += " AND t.owner = ? ";
        }
        if (category > 0) {
            selectTickets                   += " AND t.category = ? ";
        }
        if (escalated) {
            selectTickets                   += " AND t.escalated = 1 ";
        } else {
           // selectTickets                   += " AND t.escalated = 0 ";
        }
        if(startDate!=null && endDate!=null && !startDate.equals("") && !endDate.equals("")) {
             selectTickets                  += " AND t.open BETWEEN ? AND ?  ";
        }
        if(getAllClosed){
            selectTickets                   += " GROUP BY t.id ORDER BY t.open, t.id;";
        } else if(getClosed) {
            selectTickets                   += " GROUP BY t.id ORDER BY t.close DESC, t.id DESC;";
        } else {
            selectTickets                   += " GROUP BY t.id ORDER BY t.open DESC, t.id DESC;";
        }
        //selectTickets                       += " GROUP BY t.id ORDER BY t.open, t.id;";
        
        //logger.debug("query:"+selectTickets);
        try {
            int counter                     = 1;
            stmt                            = transconn.prepareStatement(selectTickets);
            if (locationId > 0) {
                stmt.setInt(counter++, locationId);
            }
            if (customerId > 0) {
                stmt.setInt(counter++, customerId);
            }
            if (assignedTo > 0) {
                stmt.setInt(counter++, assignedTo);
            } else if (owner > 0) {
                stmt.setInt(counter++, owner);
            }
            if (category > 0) {
                stmt.setInt(counter++, category);
            }
            if(startDate!=null && endDate!=null && !startDate.equals("") && !endDate.equals("")) {
                stmt.setString(counter++, startDate);
                stmt.setString(counter++, endDate);
            }
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element ticketDataEl        = toAppend.addElement("data");
                ticketDataEl.addAttribute("id", rs.getString(counter++));
                ticketDataEl.addAttribute("owner", rs.getString(counter++));
                ticketDataEl.addAttribute("assignedTo", rs.getString(counter++));
                ticketDataEl.addAttribute("location", rs.getString(counter++));
                ticketDataEl.addAttribute("customerId", rs.getString(counter++));
                ticketDataEl.addAttribute("customerName", rs.getString(counter++));
                ticketDataEl.addAttribute("locationName", rs.getString(counter++));
                ticketDataEl.addAttribute("bossLocation", rs.getString(counter++));
                ticketDataEl.addAttribute("locationId", rs.getString(counter++));
                ticketDataEl.addAttribute("category", rs.getString(counter++));
                ticketDataEl.addAttribute("categoryString", rs.getString(counter++));
                ticketDataEl.addAttribute("problem", rs.getString(counter++));
                ticketDataEl.addAttribute("resolution", rs.getString(counter++));
                ticketDataEl.addAttribute("open", rs.getString(counter++));
                ticketDataEl.addAttribute("close", rs.getString(counter++));
                ticketDataEl.addAttribute("onHold", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                ticketDataEl.addAttribute("notes", rs.getString(counter++).replaceAll("\r\n", "---"));
                ticketDataEl.addAttribute("dateCreated", rs.getString(counter++));
                ticketDataEl.addAttribute("dateUpdated", rs.getString(counter++));
                ticketDataEl.addAttribute("locationContact", rs.getString(counter++));
                Element ticketDetailsEl        = ticketDataEl.addElement("details");
                if(export>0) {
                    getTroubleTicketDetails(rs.getInt(1),ticketDetailsEl);
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getTroubleTicketDetails(int ticketId, Element toAppend) throws HandlerException {
        PreparedStatement stmt              = null;
        ResultSet ticketRS                  = null;

        String sqlTicketLogs                = "SELECT t.id, u.name, t.spokeTo, t.date, t.timeSpent, t.notes,t.type FROM ticketLogs t LEFT JOIN user u ON u.id = t.user " +
                                            " WHERE t.ticket = ? ORDER BY t.date;";

        String sqlTicketAssignment          = "SELECT t.id, u.name, a.name, t.assignmentDate, t.notes, t.type, t.spokeTo, t.timeSpent FROM ticketAssignment t LEFT JOIN user u ON u.id = t.user " +
                                            " LEFT JOIN user a ON a.id = t.assignedTo WHERE t.ticket = ? ORDER BY t.assignmentDate;";
        

        try {
            int counter                     = 1; 
            stmt                            = transconn.prepareStatement(sqlTicketLogs);
            stmt.setInt(1, ticketId);
            ticketRS                        = stmt.executeQuery();
            while (ticketRS.next()) {
                counter                     = 1;
                Element ticketLogsEl        = toAppend.addElement("logs");
                //ticketLogsEl.addAttribute("id", ticketRS.getString(1));
                ticketLogsEl.addAttribute("user", ticketRS.getString(2));
                //ticketLogsEl.addAttribute("spokeTo", ticketRS.getString(3));
                ticketLogsEl.addAttribute("date", ticketRS.getString(4));
                //ticketLogsEl.addAttribute("timeSpent", ticketRS.getString(5));
                ticketLogsEl.addAttribute("notes", ticketRS.getString(6).replaceAll("\r\n", "---"));
                //ticketLogsEl.addAttribute("change", HandlerUtils.nullToEmpty(ticketRS.getString(7)));
            }

            stmt                            = transconn.prepareStatement(sqlTicketAssignment);
            stmt.setInt(1, ticketId);
            ticketRS                        = stmt.executeQuery();
            while (ticketRS.next()) {
                counter                     = 1;
                Element ticketAssignEl      = toAppend.addElement("assignments");
                //ticketAssignEl.addAttribute("id", ticketRS.getString(1));
                ticketAssignEl.addAttribute("user", ticketRS.getString(2));
               //ticketAssignEl.addAttribute("assignedTo", ticketRS.getString(3));
                ticketAssignEl.addAttribute("date", ticketRS.getString(4));
                ticketAssignEl.addAttribute("notes", ticketRS.getString(5).replaceAll("\r\n", "---"));
                //ticketAssignEl.addAttribute("change", HandlerUtils.nullToEmpty(ticketRS.getString(6)));
                //ticketAssignEl.addAttribute("spokeTo", ticketRS.getString(7));                
                //ticketAssignEl.addAttribute("timeSpent", ticketRS.getString(8));
            }
            
          
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(ticketRS);
            close(stmt);
        }
    }

    private void getTroubleTicketDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int ticketId                        = HandlerUtils.getRequiredInteger(toHandle, "ticketId");
        PreparedStatement stmt              = null;
        ResultSet ticketRS                  = null;

        String sqlTicketLogs                = "SELECT t.id, u.name, t.spokeTo, t.date, t.timeSpent, t.notes,t.type FROM ticketLogs t LEFT JOIN user u ON u.id = t.user " +
                                            " WHERE t.ticket = ? ORDER BY t.date;";

        String sqlTicketAssignment          = "SELECT t.id, u.name, a.name, t.assignmentDate, t.notes, t.type, t.spokeTo, t.timeSpent FROM ticketAssignment t LEFT JOIN user u ON u.id = t.user " +
                                            " LEFT JOIN user a ON a.id = t.assignedTo WHERE t.ticket = ? ORDER BY t.assignmentDate;";
        String selectTicket                 = "SELECT u.name, a.name, c.name, p.description, CONCAT(t.notes, ' ', GROUP_CONCAT(IFNULL(tL.notes, '') SEPARATOR '\r\n')),t.open  " +
                                            " FROM ticket t LEFT JOIN location l ON l.id = t.location LEFT JOIN customer cu ON cu.id = l.customer LEFT JOIN BOSS_Location BL ON BL.usbn_location = l.id" +
                                            " LEFT JOIN user u ON u.id = t.owner LEFT JOIN user a ON a.id = t.assignedTo LEFT JOIN ticketCategory c ON c.id = t.category " +
                                            " LEFT JOIN ticketProblem p ON p.id = t.problem LEFT JOIN ticketResolution r ON r.id = t.resolution LEFT JOIN ticketLogs tL ON tL.ticket = t.id  WHERE t.id= ?";
        


        try {
            int counter                     = 1; 
            stmt                            = transconn.prepareStatement(sqlTicketLogs);
            stmt.setInt(1, ticketId);
            ticketRS                        = stmt.executeQuery();
            while (ticketRS.next()) {
                counter                     = 1;
                Element ticketLogsEl        = toAppend.addElement("logs");
                ticketLogsEl.addAttribute("id", ticketRS.getString(counter++));
                ticketLogsEl.addAttribute("user", ticketRS.getString(counter++));
                ticketLogsEl.addAttribute("spokeTo", ticketRS.getString(counter++));
                ticketLogsEl.addAttribute("date", ticketRS.getString(counter++));
                ticketLogsEl.addAttribute("timeSpent", ticketRS.getString(counter++));
                ticketLogsEl.addAttribute("notes", ticketRS.getString(counter++).replaceAll("\r\n", "---"));
                ticketLogsEl.addAttribute("change", HandlerUtils.nullToEmpty(ticketRS.getString(counter++)));
            }

            stmt                            = transconn.prepareStatement(sqlTicketAssignment);
            stmt.setInt(1, ticketId);
            ticketRS                        = stmt.executeQuery();
            while (ticketRS.next()) {
                counter                     = 1;
                Element ticketAssignEl      = toAppend.addElement("assignments");
                ticketAssignEl.addAttribute("id", ticketRS.getString(counter++));
                ticketAssignEl.addAttribute("user", ticketRS.getString(counter++));
                ticketAssignEl.addAttribute("assignedTo", ticketRS.getString(counter++));
                ticketAssignEl.addAttribute("date", ticketRS.getString(counter++));
                ticketAssignEl.addAttribute("notes", ticketRS.getString(counter++).replaceAll("\r\n", "---"));
                ticketAssignEl.addAttribute("change", HandlerUtils.nullToEmpty(ticketRS.getString(counter++)));
                ticketAssignEl.addAttribute("spokeTo", ticketRS.getString(counter++));                
                ticketAssignEl.addAttribute("timeSpent", ticketRS.getString(counter++));
            }
            
            stmt                            = transconn.prepareStatement(selectTicket);
            stmt.setInt(1, ticketId);
            ticketRS                        = stmt.executeQuery();
            if (ticketRS.next()) {
                counter                     = 1;
                 Element ticketDataEl        = toAppend.addElement("details");  
                 ticketDataEl.addAttribute("owner", ticketRS.getString(counter++));
                 ticketDataEl.addAttribute("assignedTo", ticketRS.getString(counter++));
                 ticketDataEl.addAttribute("categoryString", ticketRS.getString(counter++));
                 ticketDataEl.addAttribute("problem", ticketRS.getString(counter++));                
                 ticketDataEl.addAttribute("notes", ticketRS.getString(counter++).replaceAll("\r\n", "---"));
                 ticketDataEl.addAttribute("dateCreated", ticketRS.getString(counter++));
                
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(ticketRS);
            close(stmt);
        }
    }

    private void createTroubleTicket(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int assignedTo                      = HandlerUtils.getRequiredInteger(toHandle, "assignedTo");
        int location                        = HandlerUtils.getOptionalInteger(toHandle, "location");
        String locationName                 = HandlerUtils.getRequiredString(toHandle, "locationName");
        int category                        = HandlerUtils.getOptionalInteger(toHandle, "category");
        int problem                         = HandlerUtils.getOptionalInteger(toHandle, "problem");
        String open                         = HandlerUtils.getRequiredString(toHandle, "date");
        String notes                        = HandlerUtils.getRequiredString(toHandle, "notes");
        String subscribers                  = HandlerUtils.getOptionalString(toHandle, "subscribers");
        boolean shipment                    = HandlerUtils.getOptionalBoolean(toHandle, "shipment");
        String cateroryString               = "", problemString = "";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetails = null;
        //logger.debug("Shopment:"+shipment);
        if(subscribers==null || subscribers.equals("")) {
            subscribers                         = "0";
        }

        String checkOpenTickets             = " SELECT id FROM ticket WHERE location = ? AND category = ? AND problem = ? AND close is NULL";
        String createTroubleTicket          = " INSERT INTO ticket (owner, assignedTo, location, category, problem, open, notes, dateCreated, dateUpdated) VALUES (?, ?, ?, ?, ?, ?, ?, DATE(now()),DATE(now())) ";
        String checkTicketUpdates           = " SELECT id FROM ticketUpdates WHERE ticket = ? AND user = ?";
        String insertTicketUpdates          = " INSERT INTO ticketUpdates (ticket, user) VALUES (?, ?) ";
        String getUserInfo                  = " SELECT name, email FROM user WHERE id = ?";
        String getLastId                    = " SELECT LAST_INSERT_ID()";        
        

       try {
            if (location <= 0) {
                stmt                        = transconn.prepareStatement("SELECT usbn_location FROM BOSS_Location WHERE id = ?");
                stmt.setInt(1, HandlerUtils.getRequiredInteger(toHandle, "bossLocation"));
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    location                = rs.getInt(1);
                }
            }
            
            if (category <= 0) {
                //Creating new category
                stmt                        = transconn.prepareStatement("INSERT INTO ticketCategory (name) VALUES (?)");
                stmt.setString(1, HandlerUtils.getRequiredString(toHandle, "categoryString"));
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement("SELECT LAST_INSERT_ID()");
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    category                = rs.getInt(1);
                }
            }

            if (problem <= 0) {
                //Creating new problem
                stmt                        = transconn.prepareStatement("INSERT INTO ticketProblem (category, description) VALUES (?, ?)");
                stmt.setInt(1, category);
                stmt.setString(2, HandlerUtils.getRequiredString(toHandle, "problemString"));
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement("SELECT LAST_INSERT_ID()");
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    problem                 = rs.getInt(1);
                }
            }

            stmt                            = transconn.prepareStatement(checkOpenTickets);
            stmt.setInt(1, location);
            stmt.setInt(2, category);
            stmt.setInt(3, problem);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                addErrorDetail(toAppend, "An open ticket for this location for the same issue is still open.  Please check the ticket status for more information.");
            } else {
                stmt                        = transconn.prepareStatement(createTroubleTicket);
                stmt.setInt(1, callerId);
                stmt.setInt(2, assignedTo);
                stmt.setInt(3, location);
                stmt.setInt(4, category);
                stmt.setInt(5, problem);
                stmt.setString(6, open);
                stmt.setString(7, notes);
                stmt.executeUpdate();
                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    int ticketId            = rs.getInt(1);

                    String logMessage       = "Added ticket for '" + location + "'";
                    logger.portalDetail(callerId, "createTicket", 0, "ticket", ticketId, logMessage, transconn);

                    stmt                    = transconn.prepareStatement(insertTicketUpdates);
                    stmt.setInt(1, ticketId);
                    stmt.setInt(2, callerId);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(checkTicketUpdates);
                    stmt.setInt(1, ticketId);
                    stmt.setInt(2, assignedTo);
                    rs                      = stmt.executeQuery();
                    if (!rs.next()) {
                        stmt                = transconn.prepareStatement(insertTicketUpdates);
                        stmt.setInt(1, ticketId);
                        stmt.setInt(2, assignedTo);
                        stmt.executeUpdate();
                    }

                    stmt                    = transconn.prepareStatement("SELECT name FROM ticketCategory WHERE id = ?");
                    stmt.setInt(1, category);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        cateroryString      = rs.getString(1);
                    }

                    stmt                    = transconn.prepareStatement("SELECT description FROM ticketProblem WHERE id = ?");
                    stmt.setInt(1, problem);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        problemString      = rs.getString(1);
                    }

                    String subjectLine      = "New Ticket from US Beverage NET, Inc.";
                    subjectLine             = " New Ticket Notification for Ticket #"+ticketId +" ";
                    StringBuilder ticketInformation
                                            = new StringBuilder();
                    ticketInformation.append("<tr align=justify><td colspan=4>A new ticket has been assinged to you for <strong>");
                    ticketInformation.append(HandlerUtils.nullToEmpty(locationName));
                    ticketInformation.append("</strong>");

                    stmt                    = transconn.prepareStatement(getUserInfo);
                    stmt.setInt(1, callerId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        ticketInformation.append(" by ");
                        ticketInformation.append(HandlerUtils.nullToEmpty(rs.getString(1)));
                    }

                    ticketInformation.append(".</td></tr>");
                    ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                    ticketInformation.append("<tr align=justify><td>Category: </td><td colspan=3>");
                    ticketInformation.append(HandlerUtils.nullToEmpty(cateroryString));
                    ticketInformation.append("</td></tr>");
                    ticketInformation.append("<tr align=justify><td>Problem: </td><td colspan=3>");
                    ticketInformation.append(HandlerUtils.nullToEmpty(problemString));
                    ticketInformation.append("</td></tr>");
                    ticketInformation.append("<tr align=justify><td>Notes: </td><td colspan=3>");
                    ticketInformation.append(HandlerUtils.nullToEmpty(notes));
                    ticketInformation.append("</td></tr>");
                    ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                    ticketInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>bevBoss</a> to access the ticket for more information.</td></tr>");
                    ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                    ticketInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                    ticketInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                    ticketInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                    ticketInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");
                    if(assignedTo!=callerId){
                        stmt                = transconn.prepareStatement(getUserInfo);
                        stmt.setInt(1, assignedTo);
                        rs                  = stmt.executeQuery();
                        if (rs.next()) {
                            sendMail(" ", "tech@usbeveragenet.com", rs.getString(2), "support@usbeveragenet.com", subjectLine, "sendMail", ticketInformation, false);
                            //logger.debug("Mail Sent:"+ticketId+" : "+rs.getString(2));
                        }
                    }
                    toAppend.addElement("ticketId").addText(String.valueOf(ticketId));
                    
                    stmt                    = transconn.prepareStatement("SELECT id,name,email from user WHERE id IN("+subscribers+");");
                    rs                      = stmt.executeQuery();                    
                    while (rs.next()) {    
                        subjectLine             = " Subscriber Notification for Ticket #"+ticketId +" ";
                        stmt                = transconn.prepareStatement(checkTicketUpdates);
                        stmt.setInt(1, ticketId);
                        stmt.setInt(2, rs.getInt(1));
                        if(rs.getInt(1)!=callerId){
                            sendMail(" ", "tech@usbeveragenet.com", rs.getString(3), "support@usbeveragenet.com", subjectLine, "sendMail", ticketInformation, false);
                        }
                        rsDetails           = stmt.executeQuery();
                        if (!rsDetails.next()) {
                            stmt                    = transconn.prepareStatement(insertTicketUpdates);
                            stmt.setInt(1, ticketId);
                            stmt.setInt(2, rs.getInt(1));
                            stmt.executeUpdate();
                        }
                    }
                } else {
                    toAppend.addElement("ticketId").addText("-1");
                    logger.dbError("first call to LAST_INSERT_ID in createTicket failed to return a result");
                    throw new HandlerException("Database Error");
                }
                
                
                
                if(shipment && category!=3) {
                    stmt                        = transconn.prepareStatement(createTroubleTicket);
                    stmt.setInt(1, callerId);
                    stmt.setInt(2, 61);
                    stmt.setInt(3, location);
                    stmt.setInt(4, 3);
                    stmt.setInt(5, problem);
                    stmt.setString(6, open);
                    stmt.setString(7, notes);
                    stmt.executeUpdate();
                    stmt                        = transconn.prepareStatement(getLastId);
                    rs                          = stmt.executeQuery();
                    if (rs.next()) {
                        int ticketId            = rs.getInt(1);
                        String logMessage       = "Added ticket for '" + location + "'";
                        logger.portalDetail(callerId, "createTicket", 0, "ticket", ticketId, logMessage, transconn);

                        stmt                    = transconn.prepareStatement(insertTicketUpdates);
                        stmt.setInt(1, ticketId);
                        stmt.setInt(2, callerId);
                        stmt.executeUpdate();

                        stmt                    = transconn.prepareStatement(checkTicketUpdates);
                        stmt.setInt(1, ticketId);
                        stmt.setInt(2, 61);
                        rs                      = stmt.executeQuery();
                        if (!rs.next()) {
                            stmt                = transconn.prepareStatement(insertTicketUpdates);
                            stmt.setInt(1, ticketId);
                            stmt.setInt(2, 61);
                            stmt.executeUpdate();
                        }

                        stmt                    = transconn.prepareStatement("SELECT name FROM ticketCategory WHERE id = ?");
                        stmt.setInt(1, 3);
                        rs                      = stmt.executeQuery();
                        if (rs.next()) {
                            cateroryString      = rs.getString(1);
                        }

                        stmt                    = transconn.prepareStatement("SELECT description FROM ticketProblem WHERE id = ?");
                        stmt.setInt(1, problem);
                        rs                      = stmt.executeQuery();
                        if (rs.next()) {
                            problemString      = rs.getString(1);
                        }

                        String subjectLine      = "New Ticket from US Beverage NET, Inc.";
                        subjectLine             = " New Ticket Notification for Ticket #"+ticketId +" ";
                        StringBuilder ticketInformation
                                                = new StringBuilder();
                        ticketInformation.append("<tr align=justify><td colspan=4>A new ticket has been assinged to you for <strong>");
                        ticketInformation.append(HandlerUtils.nullToEmpty(locationName));
                        ticketInformation.append("</strong>");

                        stmt                    = transconn.prepareStatement(getUserInfo);
                        stmt.setInt(1, callerId);
                        rs                      = stmt.executeQuery();
                        if (rs.next()) {
                            ticketInformation.append(" by ");
                            ticketInformation.append(HandlerUtils.nullToEmpty(rs.getString(1)));
                        }

                        ticketInformation.append(".</td></tr>");
                        ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                        ticketInformation.append("<tr align=justify><td>Category: </td><td colspan=3>");
                        ticketInformation.append(HandlerUtils.nullToEmpty(cateroryString));
                        ticketInformation.append("</td></tr>");
                        ticketInformation.append("<tr align=justify><td>Problem: </td><td colspan=3>");
                        ticketInformation.append(HandlerUtils.nullToEmpty(problemString));
                        ticketInformation.append("</td></tr>");
                        ticketInformation.append("<tr align=justify><td>Notes: </td><td colspan=3>");
                        ticketInformation.append(HandlerUtils.nullToEmpty(notes));
                        ticketInformation.append("</td></tr>");
                        ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                        ticketInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>bevBoss</a> to access the ticket for more information.</td></tr>");
                        ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                        ticketInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                        ticketInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                        ticketInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                        ticketInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");

                        stmt                    = transconn.prepareStatement(getUserInfo);
                        stmt.setInt(1, 61);
                        rs                      = stmt.executeQuery();
                        if (rs.next()) {
                            sendMail("", "tech@usbeveragenet.com", rs.getString(2), "support@usbeveragenet.com", subjectLine, "sendMail", ticketInformation, false);
                            //logger.debug("Mail Sent:"+ticketId+" : "+rs.getString(2));
                        }
                        toAppend.addElement("ticketId").addText(String.valueOf(ticketId));

                        stmt                    = transconn.prepareStatement("SELECT id,name,email from user WHERE id IN("+subscribers+");");
                        rs                      = stmt.executeQuery();                    
                        while (rs.next()) {    
                            subjectLine             = " Subscriber Notification for Ticket #"+ticketId +" ";
                            stmt                = transconn.prepareStatement(checkTicketUpdates);
                            stmt.setInt(1, ticketId);
                            stmt.setInt(2, rs.getInt(1));
                            if(rs.getInt(1)!= callerId){
                                sendMail("", "tech@usbeveragenet.com", rs.getString(3), "support@usbeveragenet.com", subjectLine, "sendMail", ticketInformation, false);
                            }
                            rsDetails           = stmt.executeQuery();
                            if (!rsDetails.next()) {
                                stmt                    = transconn.prepareStatement(insertTicketUpdates);
                                stmt.setInt(1, ticketId);
                                stmt.setInt(2, rs.getInt(1));
                                stmt.executeUpdate();
                            }
                        }
                    } else {
                        toAppend.addElement("ticketId").addText("-1");
                        logger.dbError("first call to LAST_INSERT_ID in createTicket failed to return a result");
                        throw new HandlerException("Database Error");
                    }
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void updateTroubleTicket(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int ticketId                        = HandlerUtils.getRequiredInteger(toHandle, "ticketId");
        String spokeTo                      = HandlerUtils.getOptionalString(toHandle, "spokeTo");
        int timeSpent                       = HandlerUtils.getRequiredInteger(toHandle, "timeSpent");
        String date                         = HandlerUtils.getRequiredString(toHandle, "date");
        String notes                        = HandlerUtils.getRequiredString(toHandle, "notes");
        boolean close                       = HandlerUtils.getOptionalBoolean(toHandle, "closed");
        String change                       = HandlerUtils.getOptionalString(toHandle, "change");
        logger.debug("Ticket Status:"+change);
        change                              = HandlerUtils.nullToEmpty(change);
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String checkOpenTickets             = " SELECT CONCAT(c.name, ' : ', l.name), t.category, t.problem FROM ticket t LEFT JOIN location l ON l.id = t.location " +
                                            " LEFT JOIN customer c ON c.id = l.customer WHERE t.id = ? AND t.close is NULL ";
        String insertTicketLogs             = " INSERT INTO ticketLogs (ticket, user, spokeTo, date, timeSpent,type, notes) VALUES (?, ?, ?, ?, ?, ?, ?); ";

        try {
            stmt                            = transconn.prepareStatement(checkOpenTickets);
            stmt.setInt(1, ticketId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                stmt                        = transconn.prepareStatement(insertTicketLogs);
                stmt.setInt(1, ticketId);
                stmt.setInt(2, callerId);
                stmt.setString(3, spokeTo);
                stmt.setString(4, date);
                stmt.setInt(5, timeSpent);
                stmt.setString(7, notes);
                stmt.setString(6, change);
                stmt.executeUpdate();

                String logMessage           = "Inserted ticket log for '" + ticketId + "'";
                logger.portalDetail(callerId, "updateTroubleTicket", 0, "ticket", ticketId, logMessage, transconn);

                String getUserEmail         = " SELECT u.email,tU.user,t.assignedTo  FROM ticketUpdates tU LEFT JOIN user u ON u.id = tU.user LEFT JOIN ticket t ON t.id = tU.ticket WHERE tU.ticket =  ? AND u.id != ?";

                String locationName         = rs.getString(1);
                String subjectLine          = "Ticket Update notification from US Beverage NET, Inc.";
                StringBuilder ticketInformation
                                            = new StringBuilder();
                String status               = "updated";
                if (close) {
                    // Closing ticket
                    int resolution          = HandlerUtils.getOptionalInteger(toHandle, "resolution");
                    status                  = "closed";
                    subjectLine             = "Closed Ticket notification from US Beverage NET, Inc.";
                    subjectLine             = "Ticket #"+ticketId +" Closed";
                    String closeTroubleTicket
                                            = " UPDATE ticket SET resolution = ?, close = ? WHERE id = ? ";
                    if (resolution <= 0) {
                        //Creating new resolution
                        stmt                = transconn.prepareStatement("INSERT INTO ticketResolution (category, problem, description) VALUES (?, ?, ?)");
                        stmt.setInt(1, rs.getInt(2));
                        stmt.setInt(2, rs.getInt(3));
                        stmt.setString(3, HandlerUtils.getRequiredString(toHandle, "resolutionString"));
                        stmt.executeUpdate();

                        stmt                = transconn.prepareStatement("SELECT LAST_INSERT_ID()");
                        rs                  = stmt.executeQuery();
                        if (rs.next()) {
                            resolution      = rs.getInt(1);
                        }
                    }

                    stmt                    = transconn.prepareStatement(closeTroubleTicket);
                    stmt.setInt(1, resolution);
                    stmt.setString(2, date);
                    stmt.setInt(3, ticketId);
                    stmt.executeUpdate();
                }
                
                if(change.equals("Snooze")){
                    stmt                        = transconn.prepareStatement("UPDATE ticket SET snooze = ? WHERE id = ?");
                    stmt.setString(1, date);
                    stmt.setInt(2, ticketId);
                    stmt.executeUpdate();
                    subjectLine             = "Ticket #"+ticketId +" Snoozed";
                }
                
                if(change.equals("On Hold")){
                    stmt                        = transconn.prepareStatement("UPDATE ticket SET onHold = DATE(?) WHERE id = ?");
                    stmt.setString(1, date);
                    stmt.setInt(2, ticketId);
                    stmt.executeUpdate();
                    subjectLine             = "Ticket #"+ticketId +" On-Hold";
                }
                 if(change.equals("Open Ticket")){
                    stmt                        = transconn.prepareStatement("UPDATE ticket SET onHold = NULL WHERE id = ?");                    
                    stmt.setInt(1, ticketId);
                    stmt.executeUpdate();
                    subjectLine             = "Ticket #"+ticketId +" Re Opened";
                }
                 
                stmt                        = transconn.prepareStatement("UPDATE ticket SET dateUpdated = DATE(now()) WHERE id = ?");
                stmt.setInt(1, ticketId);
                stmt.executeUpdate();

                ticketInformation.append("<tr align=justify><td colspan=4>A ticket for <strong>");
                ticketInformation.append(HandlerUtils.nullToEmpty(locationName));
                ticketInformation.append("</strong> has been ");
                ticketInformation.append(HandlerUtils.nullToEmpty(status));
                ticketInformation.append(".<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td>Update: </td><td colspan=3>");
                ticketInformation.append(HandlerUtils.nullToEmpty(notes));
                ticketInformation.append("</td></tr>");
                ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>BevBoss</a> to access the ticket for more information</td></tr>");
                ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                ticketInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");

                stmt                    = transconn.prepareStatement(getUserEmail);
                stmt.setInt(1, ticketId);
                stmt.setInt(2, callerId);
                rs                      = stmt.executeQuery();
                String subscSubjectLine     = "Subscriber Notification for "+subjectLine ;
                while (rs.next()) {
                    int user                = rs.getInt(2);
                    int assignedTo          = rs.getInt(3);
                    if(user==assignedTo){
                        sendMail("", "tech@usbeveragenet.com", rs.getString(1), "support@usbeveragenet.com", subjectLine, "sendMail", ticketInformation, false);
                    } else {
                        sendMail("", "tech@usbeveragenet.com", rs.getString(1), "support@usbeveragenet.com", subscSubjectLine, "sendMail", ticketInformation, false);
                    }
                }
            } else {
                addErrorDetail(toAppend, "This ticket is either closed or cannot be found.  Please contact IT for support");
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void reassignTroubleTicket(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int ticketId                        = HandlerUtils.getRequiredInteger(toHandle, "ticketId");
        int assignedTo                      = HandlerUtils.getRequiredInteger(toHandle, "assignedTo");
        String date                         = HandlerUtils.getRequiredString(toHandle, "date");
        String notes                        = HandlerUtils.getRequiredString(toHandle, "notes");
        boolean escalated                   = HandlerUtils.getOptionalBoolean(toHandle, "escalated");
        String change                       = HandlerUtils.getOptionalString(toHandle, "change");
        String spokeTo                      = HandlerUtils.getOptionalString(toHandle, "spokeTo");
        int timeSpent                       = HandlerUtils.getOptionalInteger(toHandle, "timeSpent");
        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String checkOpenTickets             = " SELECT t.owner, CONCAT(c.name, ' : ', l.name) FROM ticket t LEFT JOIN location l ON l.id = t.location " +
                                            " LEFT JOIN customer c ON c.id = l.customer WHERE t.id = ? AND t.close is NULL";
        String reassignTroubleTicket        = " INSERT INTO ticketAssignment (ticket, user, assignedTo, assignmentDate, notes,type, spokeTo, timeSpent) VALUES (?, ?, ?, ?, ?,?, ?, ?) ";
        String updateTroubleTicket          = " UPDATE ticket SET assignedTo = ?, dateUpdated= DATE(now()) WHERE id = ? ";
        String getUserEmail                 = " SELECT u.email,tU.user,t.assignedTo  FROM ticketUpdates tU LEFT JOIN user u ON u.id = tU.user LEFT JOIN ticket t ON t.id = tU.ticket WHERE tU.ticket =  ? AND u.id != ?";
        String getUserInfo                  = " SELECT name, email FROM user WHERE id = ?";
        String checkTicketUpdates           = " SELECT id FROM ticketUpdates WHERE ticket = ? AND user = ?";
        String subscribeTroubleTicket       = " INSERT INTO ticketUpdates (ticket, user) VALUES (?, ?) ";        

        try {
            stmt                            = transconn.prepareStatement(checkOpenTickets);
            stmt.setInt(1, ticketId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                if (escalated) {
                    stmt                    = transconn.prepareStatement(" UPDATE ticket SET escalated = 1 WHERE id = ? ");
                    stmt.setInt(1, ticketId);
                    stmt.executeUpdate();
                }
                String locationName         = rs.getString(2);
                stmt                        = transconn.prepareStatement(reassignTroubleTicket);
                stmt.setInt(1, ticketId);
                stmt.setInt(2, callerId);
                stmt.setInt(3, assignedTo);
                stmt.setString(4, date);
                stmt.setString(5, notes);
                stmt.setString(6, change);
                stmt.setString(7, HandlerUtils.nullToEmpty(spokeTo));
                stmt.setInt(8, timeSpent);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(updateTroubleTicket);
                stmt.setInt(1, assignedTo);
                stmt.setInt(2, ticketId);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(checkTicketUpdates);
                stmt.setInt(1, ticketId);
                stmt.setInt(2, assignedTo);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {
                    stmt                    = transconn.prepareStatement(subscribeTroubleTicket);
                    stmt.setInt(1, ticketId);
                    stmt.setInt(2, assignedTo);
                    stmt.executeUpdate();
                }
               
                String subjectLine          = "Ticket Re-Assignment from US Beverage NET, Inc.";
                subjectLine                 = "Ticket #"+ticketId +(escalated ? " Escalated " : " Re-Assigned ");
                StringBuilder ticketInformation
                                            = new StringBuilder();

                ticketInformation.append("<tr align=justify><td colspan=4>An open ticket has been" + (escalated ? " escalated " : " assigned ") + "to <strong>");

                stmt                        = transconn.prepareStatement(getUserInfo);
                stmt.setInt(1, assignedTo);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    ticketInformation.append(HandlerUtils.nullToEmpty(rs.getString(1)));
                }
                
                stmt                        = transconn.prepareStatement("UPDATE ticket SET dateUpdated = DATE(now()) WHERE id = ?");
                stmt.setInt(1, ticketId);
                stmt.executeUpdate();

                ticketInformation.append("</strong> for Location: <strong>");
                ticketInformation.append(HandlerUtils.nullToEmpty(locationName));
                ticketInformation.append("</strong>.");
                ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td>Notes: </td><td colspan=3>");
                ticketInformation.append(HandlerUtils.nullToEmpty(notes));
                ticketInformation.append("</td></tr>");
                ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>BevBoss</a> to access the ticket for more information</td></tr>");
                ticketInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                ticketInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                ticketInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");

                stmt                        = transconn.prepareStatement(getUserEmail);
                stmt.setInt(1, ticketId);
                stmt.setInt(2, callerId);
               String subscSubjectLine     = "Subscriber Notification for "+subjectLine ;
                while (rs.next()) {
                    int user                = rs.getInt(2);
                    int ticketAssignedTo    = rs.getInt(3);
                    if(user==ticketAssignedTo){
                        sendMail("", "tech@usbeveragenet.com", rs.getString(1), "support@usbeveragenet.com", subjectLine, "sendMail", ticketInformation, false);
                    } else {
                        sendMail("", "tech@usbeveragenet.com", rs.getString(1), "support@usbeveragenet.com", subscSubjectLine, "sendMail", ticketInformation, false);
                    }
                }
            } else {
                addErrorDetail(toAppend, "This ticket is either closed or cannot be found.  Please contact IT for support.");
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void subscribeTroubleTicket(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int ticketId                        = HandlerUtils.getRequiredInteger(toHandle, "ticketId");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String checkOpenTickets             = " SELECT id FROM ticket WHERE id = ? AND close is NULL";
        String checkTicketUpdates           = " SELECT id FROM ticketUpdates WHERE ticket = ? AND user = ?";
        String subscribeTroubleTicket       = " INSERT INTO ticketUpdates (ticket, user) VALUES (?, ?) ";

        try {
            stmt                            = transconn.prepareStatement(checkOpenTickets);
            stmt.setInt(1, ticketId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                stmt                        = transconn.prepareStatement(checkTicketUpdates);
                stmt.setInt(1, ticketId);
                stmt.setInt(2, callerId);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {
                    stmt                    = transconn.prepareStatement(subscribeTroubleTicket);
                    stmt.setInt(1, ticketId);
                    stmt.setInt(2, callerId);
                    stmt.executeUpdate();
                } else {
                    addErrorDetail(toAppend, "You already have subscribed to this ticket.");
                }
            } else {
                addErrorDetail(toAppend, "This ticket is either closed or cannot be found.  Please contact IT for support.");
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getTicketCategory(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, innerRS = null;

        String sqlCategory                  = "SELECT id, name FROM ticketCategory ORDER BY name";
        String sqlProblem                   = "SELECT id, description FROM ticketProblem WHERE category = ? ORDER BY description";
                                            
        try {
            stmt                            = transconn.prepareStatement(sqlCategory);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element categoryListEl      = toAppend.addElement("category");
                categoryListEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                categoryListEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));

                stmt                        = transconn.prepareStatement(sqlProblem);
                stmt.setInt(1, rs.getInt(1));
                innerRS                     = stmt.executeQuery();
                while (innerRS.next()) {
                    Element problemListEl   = categoryListEl.addElement("problem");
                    problemListEl.addElement("id").addText(String.valueOf(innerRS.getInt(1)));
                    problemListEl.addElement("description").addText(HandlerUtils.nullToEmpty(innerRS.getString(2)));
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(innerRS);
            close(stmt);
        }
    }

    private void getTicketResolution(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String sql                          = "SELECT id, category, description FROM ticketResolution ";
      
        try {
            stmt                            = transconn.prepareStatement(sql);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element categoryListEl      = toAppend.addElement("resolution");
                categoryListEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                categoryListEl.addElement("category").addText(String.valueOf(rs.getInt(2)));
                categoryListEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    /**  Get all users who have requested location status updates
     *
     *   args: none
     *   result:
     *   <email>address1@domain.com</email>
     *   <email>address2@domain.com</email>
     *   <email>...</email>
     *
     */
    private void getBOSSUsers(Element toHandle, Element toAppend) throws HandlerException {

        String allBOSSUsers                 = "SELECT id, name, email FROM user WHERE customer = 0 AND notifyOnLocationStatus = 1 ORDER BY name";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(allBOSSUsers);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element userEl              = toAppend.addElement("user");
                userEl.addElement("userId").addText(String.valueOf(rs.getInt(1)));
                userEl.addElement("fullName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                userEl.addElement("email").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getBOSSUsers: " + sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }

    }
    
    
     private void getBOSSProjectUsers(Element toHandle, Element toAppend) throws HandlerException {

        String allBOSSUsers                 = "SELECT id, name, email FROM user WHERE  id IN (60,198,166,201,212,203,199,3302)  ORDER BY name";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(allBOSSUsers);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element userEl              = toAppend.addElement("user");
                userEl.addElement("userId").addText(String.valueOf(rs.getInt(1)));
                userEl.addElement("fullName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                userEl.addElement("email").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getBOSSUsers: " + sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }

    }

    private void getLocationContact(Element toHandle, Element toAppend) throws HandlerException {

        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");

        String selectLocationContact        = "SELECT CONCAT(location_contact, ' (', location_contact_title, ') : ', location_ph) FROM BOSS_Location " +
                                            " WHERE usbn_location = ? ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectLocationContact);
            stmt.setInt(1, locationId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                toAppend.addElement("contact").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getBOSSUsers: " + sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }

    }
    
    
    private void getDepartments(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String selectDepartments            = "SELECT id, name FROM department WHERE id IN (1,2,3,4,5); ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectDepartments);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element deptEl              = toAppend.addElement("department");
                deptEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                deptEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getDepartments: " + sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
     private void getProjectDepartments(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String selectDepartments            = "SELECT id, name FROM department WHERE id IN (1,5,6,7,8,9,10,11,14); ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectDepartments);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element deptEl              = toAppend.addElement("department");
                deptEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                deptEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getDepartments: " + sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
    
    private void getPlatforms(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String selectPlatforms              = "SELECT id, name FROM platform; ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectPlatforms);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element platEl              = toAppend.addElement("platform");
                platEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                platEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getPlatforms: " + sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
    private void getProjects(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);               
        int project                         = HandlerUtils.getOptionalInteger(toHandle, "projectId");       
        int department                      = HandlerUtils.getOptionalInteger(toHandle, "department");  
        int platform                        = HandlerUtils.getOptionalInteger(toHandle, "platform");  
        int status                          = HandlerUtils.getOptionalInteger(toHandle, "status");  
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString");       
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetail= null;

        String selectProjects               = "SELECT DISTINCT p.id, p.name,p.title, u.name, p.assignedTo, a.name, p.department, d.name,p.platform, pl.name, p.issue, p.start, IFNULL(p.end,p.estimatedEnd), p.notes, createTime, updateTime , p.status, p.environment, p.priority  " +
                                            " FROM project p LEFT JOIN user u ON u.id = p.owner LEFT JOIN user a ON a.id = p.assignedTo " +
                                            " LEFT JOIN department d ON d.id=p.department LEFT JOIN platform pl ON pl.id = p.platform " ;
        String selectProjectLog             = "SELECT notes,updateTime FROM projectLog WHERE project= ? ORDER BY updateTime DESC ";
        String selectOwner                  = "SELECT  GROUP_CONCAT( DISTINCT u.name SEPARATOR ',') FROM projectDeptMap dM LEFT JOIN department d ON d.id=dM.department"
                                            + " LEFT JOIN user u ON u.id=d.owner  WHERE project= ?";
        int assignedTo                      = callerId;
        if(callerId ==198 || callerId ==203 || callerId ==199 || callerId ==525) {
            assignedTo                      = 0;
        }
        if(project >1000){
            project                         =project- 1000;
            selectProjects                  += " WHERE p.id = ?  ";
            selectProjects                  += "   ORDER BY p.start, p.id; ";
            
        } else { 
            selectProjects                  += " WHERE p.id <> 0 ";
            if(department >0 ) {
                selectProjects              += " AND   p.department = ?  ";
            } 
            if(status >0 ) { 
                selectProjects              += " AND  ( p.status = ? OR p.status = ?) ";
            }
            if(assignedTo > 0){
                selectProjects              += " AND  ( p.assignedTo = ? OR d.owner =? )  ";
            }
            if(platform >0 ) {
                selectProjects              += " AND   p.platform = ?  ";
            } 
            if(searchString!=null && !searchString.equals("")) {
                selectProjects              += " AND ( (p.id+1000) like '%"+searchString+"%' OR p.title LIKE '%"+searchString+"%' OR p.name LIKE '%"+searchString+"%'  OR d.name LIKE '%"+searchString+"%'  OR pl.name LIKE '%"+searchString+"%' OR u.name LIKE '%"+searchString+"%' OR a.name LIKE '%"+searchString+"%' ) ";
            }
            
            selectProjects                  += "   ORDER BY p.start, p.id; ";
        }
        
        try {
            int counter                     = 1;
            stmt                            = transconn.prepareStatement(selectProjects);             
            if(project >0){                
                stmt.setInt(1, project);                
            } else {
                int colCount                = 1;
                if(department > 0){
                    stmt.setInt(colCount++, department);
                }
                if(status > 0){
                    if(status == 12) {
                        stmt.setInt(colCount++, 1);
                        stmt.setInt(colCount++, 2);
                    } else {
                        stmt.setInt(colCount++, status);
                        stmt.setInt(colCount++, status);
                    }
                }
                if(assignedTo> 0){
                    stmt.setInt(colCount++, assignedTo);                    
                    stmt.setInt(colCount++, assignedTo);                    
                }
                 if(platform > 0){
                    stmt.setInt(colCount++, platform);
                }
            }
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element projectDataEl       = toAppend.addElement("data");
                int id                      = rs.getInt(counter++);
                projectDataEl.addAttribute("id", String.valueOf(id));
                projectDataEl.addAttribute("projectId", String.valueOf(id+1000));
                //
                projectDataEl.addAttribute("name", rs.getString(counter++));
                projectDataEl.addAttribute("title", rs.getString(counter++));
                projectDataEl.addAttribute("owner", rs.getString(counter++));
                projectDataEl.addAttribute("assignedToId",  String.valueOf(rs.getInt(counter++)));
                projectDataEl.addAttribute("assignedTo", rs.getString(counter++));
                projectDataEl.addAttribute("deptId",  String.valueOf(rs.getString(counter++)));
                projectDataEl.addAttribute("dept", rs.getString(counter++));
                projectDataEl.addAttribute("platformId",  String.valueOf(rs.getInt(counter++)));
                projectDataEl.addAttribute("platform", rs.getString(counter++));
                projectDataEl.addAttribute("issue", rs.getString(counter++));                
                projectDataEl.addAttribute("startDate",  HandlerUtils.nullToEmpty(rs.getString(counter++)));
                projectDataEl.addAttribute("endDate",  HandlerUtils.nullToEmpty(rs.getString(counter++)));
                projectDataEl.addAttribute("notes",  HandlerUtils.nullToEmpty(rs.getString(counter++)).replaceAll("\r\n", "---"));
                projectDataEl.addAttribute("createTime", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                projectDataEl.addAttribute("updateTime",  HandlerUtils.nullToEmpty(rs.getString(counter++)));
                projectDataEl.addAttribute("status",  String.valueOf(rs.getInt(counter++)));
                projectDataEl.addAttribute("environment",  String.valueOf(rs.getInt(counter++)));
                projectDataEl.addAttribute("priority",  String.valueOf(rs.getInt(counter++)));
               /* stmt                        = transconn.prepareStatement(selectOwner);
                stmt.setInt(1,id);
                rsDetail                    = stmt.executeQuery();
                if(rsDetail.next()){
                    projectDataEl.addAttribute("assignedTo", rsDetail.getString(1));
                }*/
                stmt                        = transconn.prepareStatement(selectProjectLog);
                stmt.setInt(1,id);
                rsDetail                    = stmt.executeQuery();
                while(rsDetail.next()){
                     Element projectLogEl       = projectDataEl.addElement("projectLog");
                     projectLogEl.addAttribute("log",  HandlerUtils.nullToEmpty(rsDetail.getString(1)).replaceAll("\r\n", "---"));
                     projectLogEl.addAttribute("time",  HandlerUtils.nullToEmpty(rsDetail.getString(2)));
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetail);
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getProjectDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int projectId                       = HandlerUtils.getRequiredInteger(toHandle, "projectId");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectProjectDetails         = "SELECT pD.id, u.name, pD.date, pD.notes FROM projectDetails pD LEFT JOIN user u ON u.id = pD.user " +
                                            " WHERE pD.project = ? ORDER BY pD.date;";

        try {
            int counter                     = 1;
            stmt                            = transconn.prepareStatement(selectProjectDetails);
            stmt.setInt(1, projectId);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element projectDetEl        = toAppend.addElement("details");
                projectDetEl.addAttribute("id", rs.getString(counter++));
                projectDetEl.addAttribute("user", rs.getString(counter++));
                projectDetEl.addAttribute("date", rs.getString(counter++));                
                projectDetEl.addAttribute("notes", rs.getString(counter++).replaceAll("\r\n", "---"));
            }            
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }    
    
    private void createProject(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");
        String title                        = HandlerUtils.getOptionalString(toHandle, "title");
        String name                         = HandlerUtils.getRequiredString(toHandle, "name");
        int assignedTo                      = HandlerUtils.getRequiredInteger(toHandle, "assignedTo");
        String department                   = HandlerUtils.getRequiredString(toHandle, "department");
        int platform                        = HandlerUtils.getRequiredInteger(toHandle, "platform");
        int issue                           = HandlerUtils.getRequiredInteger(toHandle, "issue");
        String start                        = HandlerUtils.getRequiredString(toHandle, "startDate");
        String estimatedDate                = HandlerUtils.getRequiredString(toHandle, "estimatedDate");
        String notes                        = HandlerUtils.getOptionalString(toHandle, "notes");
        String createTime                   = HandlerUtils.getRequiredString(toHandle, "createTime");
        int status                          = HandlerUtils.getOptionalInteger(toHandle, "status");
        int environment                     = HandlerUtils.getOptionalInteger(toHandle, "environment");
        int priority                        = HandlerUtils.getOptionalInteger(toHandle, "priority");
        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String createProject                = "INSERT INTO project (name, owner, assignedTo, department, platform, issue, start, estimatedEnd, notes,createTime,updateTime, status, environment,priority,title) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?); ";
        String getUserInfo                  = "SELECT name, email FROM user WHERE id = ?; ";
        String getLastId                    = "SELECT LAST_INSERT_ID(); ";
        String updateProject                = "UPDATE  project SET  name = ?, owner = ?, assignedTo = ?,department =?, platform = ?, issue = ?, start = ?, estimatedEnd = ?,  updateTime = ?, status = ?, environment = ?, priority = ?, title = ?  WHERE id = ?";
        String insertProjectLog             = "INSERT INTO projectLog (project,notes,updateTime) VALUES (?,?,?);";
        String updaterojectFromSelect       = "INSERT INTO project (name, owner, assignedTo, department, platform, issue, start, estimatedEnd, notes,createTime,updateTime, status, environment,priority,title) (SELECT name, (SELECT owner FROM department WHERE id=?), assignedTo, ?, platform, issue, start, estimatedEnd, notes,createTime,updateTime, status, environment,priority,title FROM project WHERE id =? ); ";

        try {
            if(id >0){
                String userName             = "";                
                String updateTime           = HandlerUtils.getRequiredString(toHandle, "updateTime");
                int projDept                = 0;
                if(department.contains(",")){                
                stmt                        = transconn.prepareStatement("SELECT department FROM project WHERE id=?;");
                stmt.setInt(1, id);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    projDept                = rs.getInt(1);                    
                }                
                } else {                    
                    projDept                = Integer.parseInt(department);
                }
                stmt                        = transconn.prepareStatement("SELECT owner FROM department WHERE id=?;");
                stmt.setInt(1, projDept);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    assignedTo                      = rs.getInt(1);
                }
                String projectChanges       =getProjectChanges(toHandle,callerId,id,projDept,assignedTo);                
                stmt                        = transconn.prepareStatement(updateProject);
                stmt.setString(1, name);
                stmt.setInt(2, callerId);
                stmt.setInt(3, assignedTo);
                stmt.setInt(4, projDept);
                stmt.setInt(5, platform);
                stmt.setInt(6, issue);
                stmt.setString(7, start);
                stmt.setString(8, estimatedDate);               
                stmt.setString(9, updateTime);
                stmt.setInt(10, status);
                stmt.setInt(11, environment);
                stmt.setInt(12, priority);
                stmt.setString(13, title);
                stmt.setInt(14, id);
                stmt.executeUpdate();
                
                
                
                String callerEmail          = "";
                String subjectLine          = "An update/notification regarding the task #"+String.valueOf(id+1000);
                StringBuilder projectInformation
                                            = new StringBuilder();
                //projectInformation.append("<tr align=justify><td colspan=4>A  project <strong>'");
                //projectInformation.append(HandlerUtils.nullToEmpty(name));
                //projectInformation.append("'</strong> has been modified and assigned to you");

                stmt                        = transconn.prepareStatement(getUserInfo);
                stmt.setInt(1, callerId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    //projectInformation.append(" by ");
                   // projectInformation.append(HandlerUtils.nullToEmpty(rs.getString(1)));
                    userName            = HandlerUtils.nullToEmpty(rs.getString(1));
                    callerEmail         = HandlerUtils.nullToEmpty(rs.getString(2));
                }


                //logger.debug(userName+"-"+projectChanges);
                if(notes!=null && !notes.equals("")){
                    projectChanges          +=" Notes:"+notes;
                    stmt                    = transconn.prepareStatement(insertProjectLog);
                    stmt.setInt(1, id);
                    stmt.setString(2, userName+" - "+projectChanges);     
                    stmt.setString(3, updateTime);
                    stmt.executeUpdate();
                }

                

                //projectInformation.append(".</td></tr>");
                projectInformation.append("<tr align=center valign=top><td height=20 colspan=4>&nbsp;</td></tr>");
                projectInformation.append("<tr align=justify><td>Head Line: </td><td colspan=3>");
                projectInformation.append(HandlerUtils.nullToEmpty(name));
                projectInformation.append("</td></tr>");
                projectInformation.append("<tr align=justify><td height='10px'></td><td colspan=3>");                    
                projectInformation.append("</td></tr>");
               // projectInformation.append("<tr align=justify><td>Start Date: </td><td colspan=3>");
                //projectInformation.append(HandlerUtils.nullToEmpty(start));
                //projectInformation.append("</td></tr>");
                //projectInformation.append("<tr align=justify><td>Estimated End Date: </td><td colspan=3>");
                //projectInformation.append(HandlerUtils.nullToEmpty(estimatedDate));
                //projectInformation.append("</td></tr>");
                projectInformation.append("<tr align=justify><td valign='top'>Change Description: </td><td colspan=3>");                
                projectInformation.append(HandlerUtils.nullToEmpty(projectChanges+" New Comments: "+HandlerUtils.nullToEmpty(notes)));
                projectInformation.append("</td></tr>");
                projectInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                projectInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>bevBoss</a> to access the project for more information.</td></tr>");
                projectInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                projectInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                projectInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                projectInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                projectInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");
                if(callerId!=assignedTo){  
                    stmt                    = transconn.prepareStatement(getUserInfo);
                    stmt.setInt(1, assignedTo);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        if(status == 2){
                            sendMail("An update/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", rs.getString(2), "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);
                        }
                    }
                 }
                if(status == 3) {
                    sendMail("A Testing/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", "ProjectManagement-Testing@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);                    
                    
                }
                if(department.contains(",")){
                String dept[]               = department.split(",");                
                for (String dept1 : dept) {    
                    if(Integer.parseInt(dept1)!=projDept) {
                         stmt                        = transconn.prepareStatement(updaterojectFromSelect);
                         stmt.setInt(1,Integer.parseInt(dept1) );
                         stmt.setInt(2, Integer.parseInt(dept1));
                         stmt.setInt(3,id );
                         stmt.executeUpdate();
                         stmt                        = transconn.prepareStatement("SELECT u.id,u.email FROM department d LEFT JOIN user u ON u.id=d.owner WHERE d.id=?;");
                         stmt.setInt(1, Integer.parseInt(dept1));
                         rs                          = stmt.executeQuery();
                         if (rs.next()) {  
                             if(callerId!=rs.getInt(1)){
                                 String email               = HandlerUtils.nullToEmpty(rs.getString(2));
                                 stmt                        = transconn.prepareStatement(getLastId);
                                 rs                          = stmt.executeQuery();
                                 if (rs.next()) {
                                     id                      = rs.getInt(1);
                                 }
                                 if(status == 2){
                                     sendMail("An update/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", email, "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);
                                 }
                             }
                         }   
                          
                    }
                }
                    
                }
                /*if(callerEmail!=null && !callerEmail.equals("")){
                    sendMail("An update/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", callerEmail, "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);
                    
                }*/
                
            } else {
                String dept[]               = department.split(",");
                for (String dept1 : dept) {                    
                    stmt                        = transconn.prepareStatement("SELECT owner FROM department WHERE id=?;");
                    stmt.setInt(1, Integer.parseInt(dept1));                    
                    rs                          = stmt.executeQuery();
                    if (rs.next()) {
                        assignedTo                      = rs.getInt(1);
                    }
                    
                    stmt                    = transconn.prepareStatement(createProject);
                    stmt.setString(1, name);
                    stmt.setInt(2, callerId);
                    stmt.setInt(3, assignedTo);
                    stmt.setInt(4, Integer.parseInt(dept1));
                    stmt.setInt(5, platform);
                    stmt.setInt(6, issue);
                    stmt.setString(7, start);
                    stmt.setString(8, estimatedDate);
                    stmt.setString(9, notes);
                    stmt.setString(10, createTime);
                    stmt.setString(11, createTime);
                    stmt.setInt(12, status);
                    stmt.setInt(13, environment);
                    stmt.setInt(14, priority);
                    stmt.setString(15, title);
                    stmt.executeUpdate();
                
                    stmt                        = transconn.prepareStatement(getLastId);
                    rs                          = stmt.executeQuery();
                    if (rs.next()) {
                        id                      = rs.getInt(1);

                     
                        String subjectLine      = "An update/notification regarding the task #"+String.valueOf(id+1000);
                        String callerEmail      = "";
                        StringBuilder projectInformation
                                                = new StringBuilder();
                        projectInformation.append("<tr align=justify><td colspan=4>The project <strong>'");
                        projectInformation.append(HandlerUtils.nullToEmpty(name));
                        projectInformation.append("'</strong> has been assigned to you");

                        stmt                    = transconn.prepareStatement(getUserInfo);
                        stmt.setInt(1, callerId);
                        rs                      = stmt.executeQuery();
                        if (rs.next()) {
                            projectInformation.append(" by ");
                            projectInformation.append(HandlerUtils.nullToEmpty(rs.getString(1)));
                            callerEmail         =HandlerUtils.nullToEmpty(rs.getString(2));
                        }

                        projectInformation.append(".</td></tr>");
                        projectInformation.append("<tr align=center valign=top><td height=20 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td>Head Line: </td><td colspan=3>");
                        projectInformation.append(HandlerUtils.nullToEmpty(name));
                        projectInformation.append("</td></tr>");
                        projectInformation.append("<tr align=justify><td height='10px'> </td><td colspan=3>");                    
                        projectInformation.append("</td></tr>");
                        //projectInformation.append("<tr align=justify><td>Start Date: </td><td colspan=3>");
                        //projectInformation.append(HandlerUtils.nullToEmpty(start));
                        //projectInformation.append("</td></tr>");
                        //projectInformation.append("<tr align=justify><td>Estimated End Date: </td><td colspan=3>");
                        //projectInformation.append(HandlerUtils.nullToEmpty(estimatedDate));
                        //projectInformation.append("</td></tr>");
                        projectInformation.append("<tr align=justify><td valign='top'>Change Description: </td><td colspan=3>");
                        projectInformation.append(HandlerUtils.nullToEmpty(notes));
                        projectInformation.append("</td></tr>");
                        projectInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>bevBoss</a> to access the project for more information.</td></tr>");
                        projectInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                        projectInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");
                        if(callerId!=assignedTo){   
                            stmt            = transconn.prepareStatement(getUserInfo);
                            stmt.setInt(1, assignedTo);
                            rs              = stmt.executeQuery();
                            if (rs.next()) {
                                sendMail("An update/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", rs.getString(2), "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);
                            }
                        }
                       /* if(callerId!=assignedTo){
                            if(callerEmail!=null && !callerEmail.equals("")){
                                sendMail("An update/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", callerEmail, "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);
                            }
                        }*/

                    } else {
                        logger.dbError("first call to LAST_INSERT_ID in createProject failed to return a result");
                        throw new HandlerException("Database Error");
                    }
                }
            } 
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
     private void updateMultiProject(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String projectId                    = HandlerUtils.getRequiredString(toHandle, "id");         
        int department                      = HandlerUtils.getOptionalInteger(toHandle, "department");
        int platform                        = HandlerUtils.getOptionalInteger(toHandle, "platform");
        int issue                           = HandlerUtils.getOptionalInteger(toHandle, "issue");        
        String estimatedDate                = HandlerUtils.getOptionalString(toHandle, "estimatedDate");        
        int status                          = HandlerUtils.getOptionalInteger(toHandle, "status");
        int environment                     = HandlerUtils.getOptionalInteger(toHandle, "environment");
        int priority                        = HandlerUtils.getOptionalInteger(toHandle, "priority");
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        String selectProject                = "SELECT name,status,assignedTo,department,platform,issue,estimatedEnd,status, environment , priority, notes FROM project WHERE id= ?";
        String getUserInfo                  = "SELECT name, email FROM user WHERE id = ?; ";
        String allType[]                    = {"Project","Issue","ChangeRequest"};
        String allPriority[]                = {"--Select--","High","Medium","Low"};
        String allEnvironment[]             = {"--Select--","Development","Local","UAT","Pre-Prod","Live"};
        String allStatus[]                  = {"--Select--","Open","Assigned","Testing","QA-Failed","Deployed","Delayed","Prod-Passed","Live-Passed","Closed","UAT-Failed","Pre.Prod-Failed","Live-Failed"};
       

        try {
            String ids[]                    = projectId.split(",");
            for(int i=0;i<ids.length;i++){
                int id                      = Integer.parseInt(ids[i]) ;
                String projectChanges       = "";
                int assignedTo              =0;
                if(id >0){
                    String name             = "", notes = "", oldEndDate ="";
                    int oldDept             = 0, oldPlatform =0, oldIssue = 0, oldStatus= 0,oldEnvi=0,oldPriority = 0; 
                    stmt                    = transconn.prepareStatement(selectProject);
                    stmt.setInt(1, id);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        name                = HandlerUtils.nullToEmpty(rs.getString(1));
                        status              = rs.getInt(2);
                        assignedTo          = rs.getInt(3);
                        oldDept             = rs.getInt(4);
                        oldPlatform         = rs.getInt(5);
                        oldIssue            = rs.getInt(6);
                        oldEndDate          = HandlerUtils.nullToEmpty(rs.getString(7));
                        oldStatus           = rs.getInt(8);
                        oldEnvi             = rs.getInt(9);
                        oldPriority         = rs.getInt(10);
                        notes               = HandlerUtils.nullToEmpty(rs.getString(11));
                        if(issue > 0 && oldIssue!=issue){
                            stmt            = transconn.prepareStatement("UPDATE  project SET issue = ?, updateTime = now()  WHERE id = ?");
                            stmt.setInt(1, issue);
                            stmt.setInt(2, id);
                            stmt.executeUpdate();
                            projectChanges  +="Type:"+allType[issue]+" ";
                        }
                        if(department > 0&& oldDept!=department){  
                            stmt            = transconn.prepareStatement("UPDATE  project SET department =?, updateTime = now() WHERE id = ?");
                            stmt.setInt(1, department);
                            stmt.setInt(2, id);
                            stmt.executeUpdate();
                            //projectChanges                 +="Technology:"+deptName+" ";
                        }
                        if(platform>0 && oldPlatform!=platform){
                            stmt            = transconn.prepareStatement("UPDATE  project SET platform = ?, updateTime = now()   WHERE id = ?");
                           stmt.setInt(1, platform);
                           stmt.setInt(2, id);
                           stmt.executeUpdate();
                           //projectChanges                 +="Platform :"+platformName+" ";
                        }   
                        if(environment > 0 && oldEnvi!=environment){
                            stmt            = transconn.prepareStatement("UPDATE  project SET environment = ?, updateTime = now()   WHERE id = ?");
                            stmt.setInt(1, environment);
                            stmt.setInt(2, id);
                            stmt.executeUpdate();
                            projectChanges  +="Environment:"+allEnvironment[environment]+" ";
                        }
                        if(priority > 0 && oldPriority!=priority){ 
                            stmt            = transconn.prepareStatement("UPDATE  project SET priority = ?, updateTime = now()  WHERE id = ?");
                            stmt.setInt(1, priority);
                            stmt.setInt(2, id);
                            stmt.executeUpdate();
                            projectChanges  +="Priority:"+allPriority[priority]+" ";
                        }
                        if(status > 0 && oldStatus!=status){
                            stmt            = transconn.prepareStatement("UPDATE  project SET status = ?, updateTime = now() WHERE id = ?");
                            stmt.setInt(1, status);
                            stmt.setInt(2, id);
                            stmt.executeUpdate();
                            projectChanges  +="Status:"+allStatus[status]+" ";
                        }
                        if(estimatedDate!=null && !estimatedDate.equals("") &&!oldEndDate.equals(estimatedDate)) {
                            stmt            = transconn.prepareStatement("UPDATE  project SET estimatedEnd = ?, updateTime = now() WHERE id = ?");
                            stmt.setString(1, estimatedDate);
                            stmt.setInt(2, id);
                            stmt.executeUpdate();
                            projectChanges   +="Estimated End:"+estimatedDate;
                        }
                        String userName             = "";   
                        String callerEmail          = "";
                        String subjectLine          = "An update/notification regarding the task #"+String.valueOf(id+1000);
                        StringBuilder projectInformation
                                                    = new StringBuilder();
                        //projectInformation.append("<tr align=justify><td colspan=4>A  project <strong>'");
                        //projectInformation.append(HandlerUtils.nullToEmpty(name));
                        //projectInformation.append("'</strong> has been modified and assigned to you");

                        stmt                        = transconn.prepareStatement(getUserInfo);
                        stmt.setInt(1, callerId);
                        rs                          = stmt.executeQuery();
                        if (rs.next()) {
                            //projectInformation.append(" by ");
                           // projectInformation.append(HandlerUtils.nullToEmpty(rs.getString(1)));
                            userName            = HandlerUtils.nullToEmpty(rs.getString(1));
                            callerEmail         = HandlerUtils.nullToEmpty(rs.getString(2));
                        }






                        //projectInformation.append(".</td></tr>");
                        projectInformation.append("<tr align=center valign=top><td height=20 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td>Head Line: </td><td colspan=3>");
                        projectInformation.append(HandlerUtils.nullToEmpty(name));
                        projectInformation.append("</td></tr>");
                        projectInformation.append("<tr align=justify><td height='10px'></td><td colspan=3>");                    
                        projectInformation.append("</td></tr>");
                       // projectInformation.append("<tr align=justify><td>Start Date: </td><td colspan=3>");
                        //projectInformation.append(HandlerUtils.nullToEmpty(start));
                        //projectInformation.append("</td></tr>");
                        //projectInformation.append("<tr align=justify><td>Estimated End Date: </td><td colspan=3>");
                        //projectInformation.append(HandlerUtils.nullToEmpty(estimatedDate));
                        //projectInformation.append("</td></tr>");
                        projectInformation.append("<tr align=justify><td valign='top'>Change Description: </td><td colspan=3>");                
                        projectInformation.append(HandlerUtils.nullToEmpty(projectChanges+" New Comments: "+HandlerUtils.nullToEmpty(notes)));
                        projectInformation.append("</td></tr>");
                        projectInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>bevBoss</a> to access the project for more information.</td></tr>");
                        projectInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
                        projectInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
                        projectInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");
                        if(callerId!=assignedTo){  
                            stmt                    = transconn.prepareStatement(getUserInfo);
                            stmt.setInt(1, assignedTo);
                            rs                      = stmt.executeQuery();
                            if (rs.next()) {
                                if(status == 2){
                                    sendMail("An update/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", rs.getString(2), "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);
                                }
                            }
                         }
                        if(status == 3) {
                            sendMail("A Testing/notification regarding the task #"+String.valueOf(id+1000), "tech@usbeveragenet.com", "ProjectManagement-Testing@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", projectInformation, false);                    

                        }
                     }
                }
               
                
            } 
            
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
        
    private String getProjectChanges(Element toHandle,int user,int project,int department,int assignedTo) throws HandlerException {

        String message                      = "";   
        String name                         = HandlerUtils.getRequiredString(toHandle, "name");
        String title                        = HandlerUtils.getOptionalString(toHandle, "title");        
        //int department                      = HandlerUtils.getRequiredInteger(toHandle, "department");
        int platform                        = HandlerUtils.getRequiredInteger(toHandle, "platform");
        int issue                           = HandlerUtils.getRequiredInteger(toHandle, "issue");
        String start                        = HandlerUtils.getRequiredString(toHandle, "startDate");
        String estimatedDate                = HandlerUtils.getRequiredString(toHandle, "estimatedDate");        
        int status                          = HandlerUtils.getOptionalInteger(toHandle, "status");
        int environment                     = HandlerUtils.getOptionalInteger(toHandle, "environment");
        int priority                        = HandlerUtils.getOptionalInteger(toHandle, "priority");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetail= null;
        String allType[]                    = {"Project","Issue","ChangeRequest"};
        String allPriority[]                = {"--Select--","High","Medium","Low"};
        String allEnvironment[]             = {"--Select--","Development","Local","UAT","Pre-Prod","Live"};
        String allStatus[]                  = {"--Select--","Open","Assigned","Testing","QA-Failed","Deployed","Delayed","Prod-Passed","Live-Passed","Closed","UAT-Failed","Pre.Prod-Failed","Live-Failed"};

        String selectProjects               = "SELECT DISTINCT p.id, p.name,  p.assignedTo, a.name,  p.departments, d.name,p.platform, pl.name, p.issue, p.start,p.estimatedEnd, p.status, p.environment, p.priority,  " +
                                            " (SELECT name FROM user WHERE id =? ),(SELECT name FROM platform WHERE id =? ),(SELECT name FROM department WHERE id =? ),  p.title FROM project p LEFT JOIN user u ON u.id = p.owner LEFT JOIN user a ON a.id = p.assignedTo " +
                                            " LEFT JOIN department d ON d.id=p.department  LEFT JOIN platform pl ON pl.id = p.platform WHERE p.id= ? " ;
        
         
        try {             
            stmt                            = transconn.prepareStatement(selectProjects);            
            stmt.setInt(1, assignedTo);
            stmt.setInt(2, platform);                   
            stmt.setInt(3, department);
            stmt.setInt(4, project);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                String oldName              = HandlerUtils.nullToEmpty(rs.getString(2));
                int oldUser                 = rs.getInt(3);
                String oldUserName          = HandlerUtils.nullToEmpty(rs.getString(4));
                String oldDept              = HandlerUtils.nullToEmpty(rs.getString(5));
                String oldDeptName          = HandlerUtils.nullToEmpty(rs.getString(6));
                int oldPlatform             = rs.getInt(7);
                String oldPlatformName      = HandlerUtils.nullToEmpty(rs.getString(8));
                int oldIssue                = rs.getInt(9);
                String oldStartDate         = HandlerUtils.nullToEmpty(rs.getString(10));
                String oldEndDate           = HandlerUtils.nullToEmpty(rs.getString(11));
                int oldStatus               = rs.getInt(12);
                int oldEnv                  = rs.getInt(13);
                int oldPriority             = rs.getInt(14);
                String UserName             = HandlerUtils.nullToEmpty(rs.getString(15));
                String platformName         = HandlerUtils.nullToEmpty(rs.getString(16));                
                String deptName             = HandlerUtils.nullToEmpty(rs.getString(17));
                String oldTitle              = HandlerUtils.nullToEmpty(rs.getString(18));
                
                
                if(!oldTitle.equals(title)){                    
                    message                 +=" Title:"+title +" ";
                }
                if(!oldName.equals(name)){                    
                    message                 +=" Head Line:"+name +" ";
                }
                if(oldIssue!=issue){
                    message                 +="Type:"+allType[issue]+" ";
                }
                if(assignedTo!=oldUser) {
                    message                 +="Owner:"+UserName+" ";
                }
               // logger.debug("Dept"+oldDept+":"+department);
                if(!oldDept.equals (department)){                    
                    message                 +="Technology:"+deptName+" ";
                }
                if(oldPlatform!=platform){
                    message                 +="Platform :"+platformName+" ";
                }
                if(oldEnv!=environment){
                    message                 +="Environment:"+allEnvironment[environment]+" ";
                }
                if(oldPriority!=priority){               
                    message                 +="Priority:"+allPriority[priority]+" ";
                }
                 if(oldStatus!=status){
                    message                 +="Status:"+allStatus[status]+" ";
                }
                if(!oldStartDate.equals(start)) {
                    message                 +="StartDate:"+start+" ";
                }
                if(!oldEndDate.equals(estimatedDate)) {
                    message                 +="Estimated End:"+estimatedDate;
                }
                
               
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetail);
            close(rs);
            close(stmt);
        }
        return message;
    }
    
    


    private void addUpdateProjectDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);        
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;
        String updateProject                = "UPDATE project SET updateTime= ? WHERE id = ?";

        try {
            int colCount                    = 1;
            Iterator updateProjectDetails   = toHandle.elementIterator("updateProjectDetails");
            while (updateProjectDetails.hasNext()) {
                Element projectDetails      = (Element) updateProjectDetails.next();
                int id                      = HandlerUtils.getRequiredInteger(projectDetails, "id");
                String notes                = HandlerUtils.getRequiredString(projectDetails, "notes");
                String updateTime           = HandlerUtils.getRequiredString(projectDetails, "updateTime");
                int project                 = HandlerUtils.getRequiredInteger(projectDetails, "project");

                String updateProjectDetail  = "UPDATE projectDetails SET notes = ? WHERE id = ? ; ";
                

                stmt                        = transconn.prepareStatement(updateProjectDetail);
                stmt.setString(colCount++, notes);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
                
                stmt                        = transconn.prepareStatement(updateProject);
                stmt.setString(1, updateTime);
                stmt.setInt(2, project);
                stmt.executeUpdate();
            }

            Iterator addProjectDetails      = toHandle.elementIterator("addProjectDetails");
            while (addProjectDetails.hasNext()) {
                Element projectDetails      = (Element) addProjectDetails.next();
                int project                 = HandlerUtils.getRequiredInteger(projectDetails, "project");
                String date                 = HandlerUtils.getRequiredString(projectDetails, "date");
                String notes                = HandlerUtils.getRequiredString(projectDetails, "notes");
                String updateTime           = HandlerUtils.getRequiredString(projectDetails, "updateTime");


                String addProjectDetail     = " INSERT INTO projectDetails (project, user, date, notes) " +
                                            " VALUES (?, ?, ?, ?) ";
                String getLastId            = "SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement(addProjectDetail);
                stmt.setInt(colCount++, project);
                stmt.setInt(colCount++, callerId);
                stmt.setString(colCount++, date);
                stmt.setString(colCount++, notes);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {
                    logger.dbError("first call to LAST_INSERT_ID in addProjectDetails failed to return a result");
                    throw new HandlerException("Database Error");
                }
                stmt                        = transconn.prepareStatement(updateProject);
                stmt.setString(1, updateTime);
                stmt.setInt(2, project);
                stmt.executeUpdate();
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    


    private void changeProjectDate(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int project                         = HandlerUtils.getRequiredInteger(toHandle, "project");
        String startDate                    = HandlerUtils.getRequiredString(toHandle, "startDate");
        String estimatedDate                = HandlerUtils.getRequiredString(toHandle, "estimatedDate");

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;
        String oldStart                     = null, oldEstimate = null, callerName = null, projectName = null;
        int owner                           = -1;
        String getProjectInfo               = "SELECT p.name, p.start, p.estimatedEnd, p.owner FROM project p WHERE p.id = ? ";
        String updateProject                = "UPDATE project SET start = ?, estimatedEnd = ? WHERE id = ? ; ";
        String getUserInfo                  = "SELECT name, email FROM user WHERE id = ?";
        
        try {
            stmt                            = transconn.prepareStatement(getProjectInfo);
            stmt.setInt(1, project);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                projectName                 = rs.getString(1);
                oldStart                    = rs.getString(2);
                oldEstimate                 = rs.getString(3);
                owner                       = rs.getInt(4);
            }
            
            stmt                            = transconn.prepareStatement(getUserInfo);
            stmt.setInt(1, callerId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                callerName                  = rs.getString(1);
            }
            
            stmt                            = transconn.prepareStatement(updateProject);
            stmt.setString(1, startDate);
            stmt.setString(2, estimatedDate);
            stmt.setInt(3, project);
            stmt.executeUpdate();
            String subjectLine              = "Project Date Change Information from US Beverage NET, Inc.";
            StringBuilder projectDateInformation
                                            = new StringBuilder();
            projectDateInformation.append("<tr align=justify><td colspan=4>The Project <strong>'");
            projectDateInformation.append(HandlerUtils.nullToEmpty(projectName));
            projectDateInformation.append("'</strong>, dates has been changed by <strong>");
            projectDateInformation.append(HandlerUtils.nullToEmpty(callerName));
            projectDateInformation.append("</strong>");
            projectDateInformation.append(".</td></tr>");
            projectDateInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
            projectDateInformation.append("<tr align=justify><td>Old Start Date: </td><td colspan=3>");
            projectDateInformation.append(HandlerUtils.nullToEmpty(oldStart));
            projectDateInformation.append("</td></tr>");
            projectDateInformation.append("<tr align=justify><td>New Start Date: </td><td colspan=3>");
            projectDateInformation.append(HandlerUtils.nullToEmpty(startDate));
            projectDateInformation.append("</td></tr>");
            projectDateInformation.append("<tr align=justify><td>Old Estimated Date: </td><td colspan=3>");
            projectDateInformation.append(HandlerUtils.nullToEmpty(oldEstimate));
            projectDateInformation.append("</td></tr>");
            projectDateInformation.append("<tr align=justify><td>New Estimated End Date: </td><td colspan=3>");
            projectDateInformation.append(HandlerUtils.nullToEmpty(estimatedDate));
            projectDateInformation.append("</td></tr>");
            projectDateInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
            projectDateInformation.append("<tr align=justify><td colspan=4>Please login to <a href='http://bevboss.net/'>bevBoss</a> to access the projectDate for more information.</td></tr>");
            projectDateInformation.append("<tr align=center valign=middle><td height=20 colspan=4>&nbsp;</td></tr>");
            projectDateInformation.append("<tr align=justify><td colspan=4>Thank You,</td></tr>");
            projectDateInformation.append("<tr align=justify><td colspan=4>US Beverage Net Support</td></tr>");
            projectDateInformation.append("<tr align=center valign=middle><td height=35 colspan=4>&nbsp;</td></tr>");
            projectDateInformation.append("<tr align=justify><td colspan=4><strong>This email was automatically generated; please do not reply.</strong></td></tr><tr><td colspan=4>&nbsp;</td></tr>");
            stmt                    = transconn.prepareStatement(getUserInfo);
            stmt.setInt(1, owner);
            rs                      = stmt.executeQuery();
            if (rs.next()) {
                sendMail("USBN Project Date Change", "tech@usbeveragenet.com", rs.getString(2), "support@usbeveragenet.com", subjectLine, "sendMail", projectDateInformation, false);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }


    private void closeProject(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int projectId                       = HandlerUtils.getRequiredInteger(toHandle, "id");        
        int reopen                          = HandlerUtils.getOptionalInteger(toHandle, "reopen");

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;
        String updateProject                = "UPDATE project SET end = ? WHERE id = ?; ";
        String selectProject                = "SELECT id FROM project WHERE id = ?; ";
        try {
            if(reopen> 0){
                stmt                        = transconn.prepareStatement("UPDATE project SET end = null WHERE id = ?; ");                
                stmt.setInt(1, projectId);
                stmt.executeUpdate();
            } else {
                String date                 = HandlerUtils.getRequiredString(toHandle, "date");
                stmt                            = transconn.prepareStatement(selectProject);
                stmt.setInt(1, projectId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(updateProject);
                    stmt.setString(1, date);
                    stmt.setInt(2, projectId);
                    stmt.executeUpdate();
                } else {
                    logger.debug("Not a valid Project");
                }
                
            } 
            
         } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getLocationNotes(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectProjectDetails         = "SELECT lL.id, u.name, lL.date, lL.notes FROM locationLogs lL " +
                                            " LEFT JOIN user u ON u.id = lL.user WHERE lL.location = ? ORDER BY lL.date;";

        try {
            int counter                     = 1;
            stmt                            = transconn.prepareStatement(selectProjectDetails);
            stmt.setInt(1, locationId);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element locationDetEl       = toAppend.addElement("details");
                locationDetEl.addAttribute("id", rs.getString(counter++));
                locationDetEl.addAttribute("user", rs.getString(counter++));
                locationDetEl.addAttribute("date", rs.getString(counter++));
                locationDetEl.addAttribute("notes", rs.getString(counter++).replaceAll("\r\n", "---"));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }


    private void addUpdateLocationNotes(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            int colCount                    = 1;
            Iterator updateLocationNotes    = toHandle.elementIterator("updateLocationNotes");
            while (updateLocationNotes.hasNext()) {
                Element locationNotes       = (Element) updateLocationNotes.next();
                int id                      = HandlerUtils.getRequiredInteger(locationNotes, "id");
                String notes                = HandlerUtils.getRequiredString(locationNotes, "notes");

                stmt                        = transconn.prepareStatement("UPDATE locationLogs SET notes = ? WHERE id = ?;");
                stmt.setString(colCount++, notes);
                stmt.setInt(colCount++, id);
                stmt.executeUpdate();
            }

            Iterator addLocationNotes       = toHandle.elementIterator("addLocationNotes");
            while (addLocationNotes.hasNext()) {
                Element locationNotes       = (Element) addLocationNotes.next();
                int locationId              = HandlerUtils.getRequiredInteger(locationNotes, "locationId");
                String date                 = HandlerUtils.getRequiredString(locationNotes, "date");
                String notes                = HandlerUtils.getRequiredString(locationNotes, "notes");


                String addLocationNote      = " INSERT INTO locationLogs (location, user, date, notes) " +
                                            " VALUES (?, ?, ?, ?) ";
                String getLastId            = "SELECT LAST_INSERT_ID()";

                stmt                        = transconn.prepareStatement(addLocationNote);
                stmt.setInt(colCount++, locationId);
                stmt.setInt(colCount++, callerId);
                stmt.setString(colCount++, date);
                stmt.setString(colCount++, notes);
                stmt.executeUpdate();

                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {                    
                    logger.dbError("first call to LAST_INSERT_ID in addLocationNotes failed to return a result");
                    throw new HandlerException("Database Error");
                } else {
                    logger.portalDetail(callerId, "updateBOSSLocation", 0, "BOSS_Location", locationId, "", transconn);
                }
            }
            
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }

    private void getInvoiceItems(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectInvoiceItems           = "SELECT id, name FROM invoiceItems WHERE attached = 1 ORDER BY name";

        try {
            int counter                     = 1;
            stmt                            = transconn.prepareStatement(selectInvoiceItems);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element invoiceItemsEl      = toAppend.addElement("items");
                invoiceItemsEl.addAttribute("id", rs.getString(counter++));
                invoiceItemsEl.addAttribute("name", rs.getString(counter++));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    private void getLocationInvoiceItems(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectLocationInvoiceItems   = "SELECT lII.id, iI.id, iI.name, IF(lII.recurring = 1, 'Yes', 'No'), lII.amount FROM locationInvoiceItems lII " +
                                            " LEFT JOIN invoiceItems iI ON iI.id = lII.item WHERE lII.location = ? ORDER BY iI.name;";

        try {
            int counter                     = 1;
            stmt                            = transconn.prepareStatement(selectLocationInvoiceItems);
            stmt.setInt(1, locationId);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element locationItemsEl     = toAppend.addElement("locationItems");
                locationItemsEl.addAttribute("id", rs.getString(counter++));
                locationItemsEl.addAttribute("item", rs.getString(counter++));
                locationItemsEl.addAttribute("name", rs.getString(counter++));
                locationItemsEl.addAttribute("recurring", rs.getString(counter++));
                locationItemsEl.addAttribute("amount", rs.getString(counter++));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }


    private void addDeleteLocationInvoiceItems(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        ResultSet rs                        = null;
        PreparedStatement stmt              = null;

        try {
            Iterator deleteLocationInvoiceItems
                                            = toHandle.elementIterator("deleteLocationInvoiceItems");
            while (deleteLocationInvoiceItems.hasNext()) {
                Element locationInvoiceItems= (Element) deleteLocationInvoiceItems.next();
                int id                      = HandlerUtils.getRequiredInteger(locationInvoiceItems, "id");

                String deleteLocationItem   = " DELETE FROM locationInvoiceItems WHERE id = ?;";
                stmt                        = transconn.prepareStatement(deleteLocationItem);
                stmt.setInt(1, id);
                stmt.executeUpdate();
            }
            
            Iterator addLocationInvoiceItems
                                            = toHandle.elementIterator("addLocationInvoiceItems");
            while (addLocationInvoiceItems.hasNext()) {
                int colCount                = 1;
                Element locationInvoiceItems= (Element) addLocationInvoiceItems.next();
                int item                    = HandlerUtils.getRequiredInteger(locationInvoiceItems, "item");
                int recurring               = HandlerUtils.getRequiredInteger(locationInvoiceItems, "recurring");

                stmt                        = transconn.prepareStatement("SELECT id FROM locationInvoiceItems WHERE location = ? AND item = ?");
                stmt.setInt(1, locationId);
                stmt.setInt(2, item);
                rs                          = stmt.executeQuery();
                if (!rs.next()) {

                    String addLocationItem  = " INSERT INTO locationInvoiceItems (location, item, recurring) " +
                                            " VALUES (?, ?, ?); ";
                    String getLastId        = "SELECT LAST_INSERT_ID()";

                    stmt                    = transconn.prepareStatement(addLocationItem);
                    stmt.setInt(colCount++, locationId);
                    stmt.setInt(colCount++, item);
                    stmt.setInt(colCount++, recurring);
                    stmt.executeUpdate();

                    stmt                    = transconn.prepareStatement(getLastId);
                    rs                      = stmt.executeQuery();
                    if (!rs.next()) {
                        logger.dbError("first call to LAST_INSERT_ID in addLocationInvoiceItems failed to return a result");
                        throw new HandlerException("Database Error");
                    }
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
     private void getBrewStyleLogo(Element toHandle, Element toAppend) throws HandlerException {
        
        PreparedStatement stmt              = null;
        String location                     = null;
        ResultSet rs                        = null, rsDetails = null;
        
        String selectBrew                   = " SELECT p.name,logo,twitterHandle,p.id FROM productSet p LEFT JOIN breweryLogo bL ON bL.productSet=p.id  "
                                            + " where productSetType=7  ORDER by p.id ;";
         String selectStyle                 = " SELECT p.name,logo,p.id FROM productSet p LEFT JOIN styleLogo bL ON bL.productSet=p.id  "
                                            + " where productSetType=9  ORDER by p.id ;";
        
        
        //String selectBrew                   = "SELECT bL.brewery, CONCAT(bL.logo, IF(bL.type = 0, '.png', IF(bL.type = 1, '.jpg', '.gif'))) " +
          //                                  " FROM  breweryLogo bL ORDER BY bL.brewery ;";
        
       // String selectStyle                  = "SELECT sL.style, sL.logo FROM  styleLogo sL ORDER BY sL.style ;";
         
       try {
           
               stmt                         = transconn.prepareStatement(selectBrew);
               
               rsDetails                    = stmt.executeQuery();
               while(rsDetails.next()) {
                   String name           	= rsDetails.getString(1);
                   String logo           	= HandlerUtils.nullToEmpty(rsDetails.getString(2));
                   String twitter           	= HandlerUtils.nullToEmpty(rsDetails.getString(3));
                   
                   Element breweryEl    	= toAppend.addElement("Brewery");
                   breweryEl.addElement("name").addText(HandlerUtils.nullToEmpty(name));
                   breweryEl.addElement("fileName").addText(HandlerUtils.nullToEmpty(logo));
                   breweryEl.addElement("twitterHandle").addText(HandlerUtils.nullToEmpty(twitter));
                   //breweryEl.addElement("logo").addText("http://beerboard.tv/USBN.BeerBoard.UI/Images/logo/"+logo+".png");
                   //breweryEl.addElement("fbLogo").addText("http://beerboard.tv/USBN.BeerBoard.UI/Images/FBlogo/"+logo+".png");
                   if(logo==null || logo.equals("")) {
                       breweryEl.addElement("avail").addText(String.valueOf(0));
                   } else {
                       breweryEl.addElement("avail").addText(String.valueOf(1));
                   }
                   breweryEl.addElement("productSet").addText(String.valueOf(rsDetails.getInt(4)));
                                       
                   }
               stmt                         = transconn.prepareStatement(selectStyle);
               
               rsDetails                    = stmt.executeQuery();
               while(rsDetails.next()) {
                   String name           	= rsDetails.getString(1);
                   String logo           	= HandlerUtils.nullToEmpty(rsDetails.getString(2));
                   
                   Element styleEl    		= toAppend.addElement("Style");
                   styleEl.addElement("name").addText(HandlerUtils.nullToEmpty(name));
                   styleEl.addElement("fileName").addText(HandlerUtils.nullToEmpty(logo));
                   //styleEl.addElement("logo").addText("http://beerboard.tv/USBN.BeerBoard.UI/Images/glass/" +logo+".png");
                   //styleEl.addElement("fbLogo").addText("http://beerboard.tv/USBN.BeerBoard.UI/Images/FBglass/" +logo+".png");   
                    if(logo==null || logo.equals("")) {
                       styleEl.addElement("avail").addText(String.valueOf(0));
                   } else {
                       styleEl.addElement("avail").addText(String.valueOf(1));
                   }
                   styleEl.addElement("productSet").addText(String.valueOf(rsDetails.getInt(3)));
                                       
                   }
           
            
           
        } catch ( Exception sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(rsDetails);
            close(stmt);
        }
   }
     
     
     
     private void updateBrewStyleLogo(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int type                            = HandlerUtils.getRequiredInteger(toHandle, "type");
        String brewery                      = HandlerUtils.getRequiredString(toHandle, "brewery");
        String twitter                      = HandlerUtils.getOptionalString(toHandle, "twitterHandle");
        String logo                         = HandlerUtils.getRequiredString(toHandle, "logo");
        int productSet                      = HandlerUtils.getRequiredInteger(toHandle, "productSet");
        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        
        String updatebrewLogo               = "UPDATE breweryLogo SET logo = ?, type = 0,brewery = ?, twitterHandle= ? WHERE productSet = ? ; ";
        String updatestyleLogo              = "UPDATE styleLogo SET logo = ?,style = ?  WHERE productSet = ? ; ";
        String updateRequest                = "UPDATE logoRequest SET closed = true WHERE id = ?; ";
        String selectRequest                = "SELECT id FROM logoRequest WHERE name = ? AND closed = false ; ";
        String selectBrewLogo               = "SELECT id FROM breweryLogo WHERE productSet = ?";
        String selectStyleLogo              = "SELECT id FROM styleLogo WHERE productSet = ?";

        try {
            if(type == 1 ) {
                stmt                            = transconn.prepareStatement(selectBrewLogo);
                stmt.setInt(1, productSet);
                rs                              = stmt.executeQuery();
                if(rs.next()) { 
                    stmt                        = transconn.prepareStatement(updatebrewLogo);
                    stmt.setString(1, logo);
                    stmt.setString(2, brewery);
                    stmt.setString(3, twitter);
                    stmt.setInt(4, productSet);
                    stmt.executeUpdate();
                    
                } else {
                    stmt                        = transconn.prepareStatement("INSERT INTO breweryLogo (productSet,brewery,logo,twitterHandle ) Values (?,?,?,?); ");
                    stmt.setInt(1, productSet);
                    stmt.setString(2, brewery);
                    stmt.setString(3, logo);
                    stmt.setString(4, twitter);
                    stmt.executeUpdate();
                   logger.debug("Brew Logo Inserted");
                }
                
            } else if(type == 2 ) {
                stmt                            = transconn.prepareStatement(selectStyleLogo);
                stmt.setInt(1, productSet);
                rs                              = stmt.executeQuery();
                if(rs.next()) { 
                    stmt                        = transconn.prepareStatement(updatestyleLogo);
                    stmt.setString(1, logo);
                    stmt.setString(2, brewery);
                    stmt.setInt(3, productSet);
                    stmt.executeUpdate();
                    logger.debug("Style Updated");
                } else {
                    stmt                        = transconn.prepareStatement("INSERT INTO styleLogo (productSet,style,logo ) Values (?,?,?); ");
                    stmt.setInt(1, productSet);
                    stmt.setString(2, brewery);
                    stmt.setString(3, logo);                    
                    stmt.executeUpdate();
                   logger.debug("Style Logo Inserted");
                    
                }
            }
           
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {   
            close(rs);
            close(stmt);
            
        }
    }
     
     
     private void addLogoRequest(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int type                            = HandlerUtils.getRequiredInteger(toHandle, "type");
        String name                         = HandlerUtils.getRequiredString(toHandle, "name");
        String logo                         = HandlerUtils.getRequiredString(toHandle, "logo");
        String notes                        = HandlerUtils.getOptionalString(toHandle, "notes");
        

        PreparedStatement stmt              = null;
        
        String insertRequest                = " INSERT INTO logoRequest (type, name, logo,notes) " +
                                            " VALUES (?, ?, ?, ?); ";

        try {
            stmt                            = transconn.prepareStatement(insertRequest);
            stmt.setInt(1, type);
            stmt.setString(2, name);
            stmt.setString(3, logo);
            stmt.setString(4, notes);
            stmt.executeUpdate();
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {            
            close(stmt);
        }
    }
      
      
      private void getLogoRequest(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        boolean getClosed                   = HandlerUtils.getRequiredBoolean(toHandle, "isClosed");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        String selectRequest                = "SELECT id,type, name, logo,notes FROM logoRequest WHERE closed = ? ;";  
         try {
             stmt                         	= transconn.prepareStatement(selectRequest);
             stmt.setBoolean(1, getClosed);
             rs                 			= stmt.executeQuery();
             while(rs.next()) {
                 Element logoRqEl    		= toAppend.addElement("logoRequest");
                 logoRqEl.addElement("id").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                 logoRqEl.addElement("type").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                 logoRqEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                 logoRqEl.addElement("logoName").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                 logoRqEl.addElement("logo").addText("http://beerboard.tv/USBN.BeerBoard.UI/Images/glass/" +rs.getString(4));
                 logoRqEl.addElement("notes").addText(HandlerUtils.nullToEmpty(rs.getString(5).replaceAll("\r\n", "---")));
             }
                 
             
         } catch ( Exception sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
      }
      
      
    private void getErrorLogs(Element toHandle, Element toAppend) throws HandlerException {
        
        int callerId                        = getCallerId(toHandle);
        int platform                        = HandlerUtils.getRequiredInteger(toHandle, "platform");
        DateTimeParameter startDate         = HandlerUtils.getRequiredTimestamp(toHandle, "startDate");
        DateTimeParameter endDate           = HandlerUtils.getRequiredTimestamp(toHandle, "endDate");
        
        String selectLog                    = "SELECT  id, platform, timestamp, message, category FROM errorLogs  WHERE  platform = ? AND timestamp between  ? AND ?  AND active = 1  ";
        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        try {
            stmt                            = transconn.prepareStatement(selectLog);
            stmt.setInt(1, platform);
            stmt.setString(2, startDate.toString());
            stmt.setString(3, endDate.toString());
            rs                              = stmt.executeQuery();   
            while (rs.next()) {
                int i                       = 1;
                Element eLog              = toAppend.addElement("errorLogs");
                eLog.addElement("id").addText(HandlerUtils.nullToEmpty(rs.getString(i++)));
                eLog.addElement("platform").addText(HandlerUtils.nullToEmpty(rs.getString(i++)));
                eLog.addElement("timestamp").addText(HandlerUtils.nullToEmpty(rs.getString(i++)));
                eLog.addElement("message").addText(HandlerUtils.nullToEmpty(rs.getString(i++)));
                eLog.addElement("category").addText(HandlerUtils.nullToEmpty(rs.getString(i++)));
                
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getErrorLogs: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }

    }
    
    
    private void closeErrorLogs(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int errorId                         = HandlerUtils.getRequiredInteger(toHandle, "id");
        

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;
        String updateError                  = "UPDATE errorLogs SET active = 0 WHERE id = ?; ";
        String selectError                  = "SELECT id FROM errorLogs WHERE id = ?; ";
        try {
            stmt                            = transconn.prepareStatement(selectError);
            stmt.setInt(1, errorId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                stmt                        = transconn.prepareStatement(updateError);
                stmt.setInt(1, errorId);
                stmt.executeUpdate();
            } else {
                 logger.debug("Not a valid ErrorLog");
            }
         } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
    private void addBOSSArchive(Element toHandle, Element toAppend) throws HandlerException {
        addBossAccountRecivableArchive(toHandle, toAppend);
        addBossCashReciptArchive(toHandle, toAppend);
        addBossDashboardArchive(toHandle, toAppend);
        addBossInventoryArchive(toHandle, toAppend);
        addBossRecurringArchive(toHandle, toAppend);
        addBossSalesArchive(toHandle, toAppend);
        addBossTransactionArchive(toHandle, toAppend);
        addBossBadDebtArchive(toHandle, toAppend);
    }
    
    
    private void addBossDashboardArchive(Element toHandle, Element toAppend) throws HandlerException {
        ReportType reportType               = ReportType.instanceOf("Yesterday");

        String selectStatus                 = "(SELECT 1, COUNT(id) FROM locationDetails WHERE active =1 AND preInstall = 1 AND scheduled = 1 AND billing = 1) " +
                                            " UNION " +
                                            " (SELECT 2, COUNT(id) FROM locationDetails WHERE active =1 AND preInstall = 1 AND scheduled = 1 AND billing = 0) " +
                                            " UNION " +
                                            " (SELECT 3, COUNT(id) FROM locationDetails WHERE active =1 AND preInstall = 1 AND scheduled = 0 AND billing = 0) " +
                                            " UNION " +
                                            " (SELECT 4, COUNT(BL.id) FROM BOSS_Location BL LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " WHERE BL.sendToInstall = 0);";
        String selectRecurringRevenue       = " SELECT IFNULL(B.Bill_State,0), ROUND(SUM(lAM.amount * lAM.billMonths)/12,2), SUM(lAM.setup) FROM BOSS_Location BL " +
                                            " LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " LEFT JOIN locationAccountMap lAM ON lAM.location = BL.id LEFT JOIN Bill B ON B.location_id = BL.id " +
                                            " WHERE lD.active = 1 GROUP BY IFNULL(B.Bill_State,0) ORDER BY IFNULL(B.Bill_State,0) ";
        String selectAmountDue              = " SELECT i.type, COUNT(i.id), SUM(i.outstanding) FROM " +
                                            " (SELECT id, outstanding, IF(date < SUBDATE(NOW(), INTERVAL 3 MONTH), 0, 1) AS type " +
                                            " FROM invoice WHERE active = 1 AND received IS NULL) AS i GROUP BY i.type; ";
        String selectCurrentRevenue         = " SELECT SUM(iD.amount) FROM invoice i LEFT JOIN invoiceDetails iD ON iD.invoice = i.id " +
                                            " WHERE i.active = 1 AND i.approved = 1 AND i.date >= DATE_FORMAT(NOW() ,'%Y-%m-01') ";
        String selectUnderContractRevenue   = " SELECT ROUND(SUM(lAM.amount * lAM.billMonths)/12,2), SUM(lAM.setup) FROM BOSS_Location BL " +
                                            " LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN locationAccountMap lAM ON lAM.location = BL.id " + 
                                            " WHERE BL.sendToInstall = 0; ";
        String selectOpenTicketCount        = " (SELECT 1, COUNT(id) FROM ticket WHERE category IN (1,2,6,8,9) AND close IS NULL) " +
                                            " UNION " +
                                            " (SELECT 2, COUNT(id) FROM ticket WHERE category IN (1,2,6,8,9) AND close IS NULL AND escalated = 0 AND open < SUBDATE(CONCAT(LEFT(NOW(),11),'07:00:00'),INTERVAL 7 DAY)) " +
                                            " UNION " +
                                            " (SELECT 3, COUNT(id) FROM ticket WHERE close IS NULL AND category = 7) " +
                                            " UNION " +
                                            " (SELECT 4, COUNT(id) FROM ticket WHERE category IN (1,2,6,8,9) AND  close > SUBDATE(CONCAT(LEFT(NOW(),11),'07:00:00'),INTERVAL 7 DAY)) " +
                                            " UNION " +
                                            " (SELECT 5, COUNT(id) FROM ticket WHERE close IS NULL) ";
        String selectTierCount              = " SELECT t.tier, ROUND(SUM(t.cnt)/COUNT(t.date),0) FROM (SELECT tier, COUNT(id) AS cnt, date FROM tierSummary WHERE date >= LEFT(?,10) " +
                                            " GROUP BY tier, date) AS t GROUP BY t.tier; ";
        String insertArchive                = "INSERT INTO bossDashboardArchive (stat1, stat2, stat3, stat4, stat5, tier1, tier2, tier3, tier4, tier5, totalTier, openTicket, delayedTicket, gateway, closed, caller, expectedRevenue, expectedSetupFee, currentRevenue, countPastDue, amountDue, monthlyRevenue, underContractRevenue, archive)" +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? );";
        String selectArchive                = "SELECT DATE(archive) FROM bossDashboardArchive WHERE DATE(archive) =  DATE(?);";
        String deleteArchive                = "DELETE FROM bossDashboardArchive WHERE DATE(archive) =  DATE(?);";

        ResultSet rs                        = null;
        PreparedStatement stmt              = null;
        Calendar currentDate                = Calendar.getInstance();
        int stat1                           = 0, stat2 = 0, stat3 = 0, stat4 = 0, stat5 = 0;
        int tier1                           = 0, tier2 = 0, tier3 = 0, tier4 = 0, tier5 = 0;
        int open                            = 0, delayed = 0, gateway = 0, closed = 0, caller = 0;
        double totalCount                   = 0;
        double expectedRevenue              = 0, expectedSetupFee =0, currentRevenue = 0, countPastDue = 0, amountDue = 0, monthlyRevenue = 0, underContractRevenue= 0;
        try {
            String archive                  = dbDateFormat.format(currentDate.getTime());
            stmt                            = transconn.prepareStatement(selectStatus);
            rs                              = stmt.executeQuery();
            while (rs.next()) {

                switch(rs.getInt(1)) {
                case 1:
                    stat1                   = rs.getInt(2);
                break;
                case 2:
                    stat2                   = rs.getInt(2);
                break;
                case 3:
                    stat3                   = rs.getInt(2);
                break;
                case 4:
                    stat4                   = rs.getInt(2);
                break;
                case 5:
                    stat5                   = rs.getInt(2);
                break;
                }
            }
            DateParameter validatedDate     = new DateParameter(reportType.toStartDate());
            stmt                            = transconn.prepareStatement(selectTierCount);
            stmt.setString(1, validatedDate.toString());
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                switch(rs.getInt(1)) {
                    case 1:
                        tier1               = rs.getInt(2);
                    break;
                    case 2:
                        tier2               = rs.getInt(2);
                    break;
                    case 3:
                        tier3               = rs.getInt(2);
                    break;
                    case 4:
                        tier4               = rs.getInt(2);
                    break;
                    case 5:
                        tier5               = rs.getInt(2);
                    break;
                    }


                if (rs.getInt(1) < 4) {
                    totalCount              += rs.getDouble(2);
                    }
                }

            stmt                            = transconn.prepareStatement(selectOpenTicketCount);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                switch (rs.getInt(1)) {
                    case 1:
                        open                = rs.getInt(2);
                        break;
                    case 2:
                        delayed             = rs.getInt(2);
                        break;
                    case 3:
                        gateway             = rs.getInt(2);
                        break;
                    case 4:
                        closed              = rs.getInt(2);
                        break;
                    case 5:
                        caller              = rs.getInt(2);
                    break;

                }
            }

            stmt                            = transconn.prepareStatement(selectRecurringRevenue);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                if (rs.getInt(1) == 0) {
                    expectedRevenue         = rs.getDouble(2);
                    expectedSetupFee        = rs.getDouble(3);
                } else {
                    currentRevenue          = rs.getDouble(2);
                }
            }
            //Amount Due

            stmt                            = transconn.prepareStatement(selectAmountDue);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                if (rs.getInt(1) == 0) {
                        countPastDue        = rs.getDouble(2);
                } 
                amountDue                   += rs.getDouble(3);
            }

            //Current Revenue
            stmt                            = transconn.prepareStatement(selectCurrentRevenue);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                monthlyRevenue              = rs.getDouble(1);
            }
            //Under Contract Revenue
            stmt                            = transconn.prepareStatement(selectUnderContractRevenue);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                underContractRevenue        = rs.getDouble(1);
            }

            stmt                            = transconn.prepareStatement(selectArchive);
            stmt.setString(1, archive);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                stmt                        = transconn.prepareStatement(deleteArchive);
                stmt.setString(1, archive);
                stmt.executeUpdate();
            }

            stmt                            = transconn.prepareStatement(insertArchive); 
            stmt.setInt(1, stat1);
            stmt.setInt(2, stat2);
            stmt.setInt(3, stat3);
            stmt.setInt(4, stat4);
            stmt.setInt(5, stat5);
            stmt.setInt(6, tier1);
            stmt.setInt(7, tier2);
            stmt.setInt(8, tier3);
            stmt.setInt(9, tier4);
            stmt.setInt(10, tier5);
            stmt.setDouble(11, totalCount);
            stmt.setInt(12, open);
            stmt.setInt(13, delayed);
            stmt.setInt(14, gateway);
            stmt.setInt(15, closed);
            stmt.setInt(16, caller);
            stmt.setDouble(17, expectedRevenue);
            stmt.setDouble(18, expectedSetupFee);
            stmt.setDouble(19, currentRevenue );
            stmt.setDouble(20, countPastDue );
            stmt.setDouble(21, amountDue );
            stmt.setDouble(22, monthlyRevenue );
            stmt.setDouble(23, underContractRevenue);
            stmt.setString(24, archive);
            stmt.executeUpdate();


        } catch (SQLException sqle) {
            logger.dbError("Database error in getDashBoardLocationStatus: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }

            
            
            

        }
         
         
         private void addBossRecurringArchive(Element toHandle, Element toAppend) throws HandlerException {
             String sql                     = "SELECT A.type, A.name, A.cycle, BL.location_name, ROUND((lAM.amount * lAM.billMonths)/12,2), lAM.setup FROM accounts A " +
                                            " LEFT JOIN locationAccountMap lAM on lAM.account = A.id LEFT JOIN BOSS_Location BL ON BL.id = lAM.location " +
                                            " LEFT JOIN locationDetails lD ON lD.location = BL.usbn_location " +
                                            " WHERE  lD.active = 1 AND lD.preInstall = 1 AND lD.billing = ? " + 
                                            GetFilterString(0) + " ORDER BY A.type, A.name, BL.location_name;";
             String insertArchive           = "INSERT INTO bossRecurringArchive (type, account, cycle, location, monthly, setup, archive) "+
                                            " VALUES (?, ?, ?, ?, ?, ?, ?);";
             String selectArchive           = "SELECT DATE(archive) FROM bossRecurringArchive WHERE DATE(archive) =  DATE(?);";
             String deleteArchive           = "DELETE FROM bossRecurringArchive WHERE DATE(archive) =  DATE(?);";
             
             PreparedStatement stmt         = null;
             ResultSet rs                   = null;
             Calendar currentDate           = Calendar.getInstance();
             try {
                 String archive             = dbDateFormat.format(currentDate.getTime());
                 stmt                       = transconn.prepareStatement(selectArchive);
                 stmt.setString(1, archive);
                 rs                         = stmt.executeQuery();
                 if (rs.next()) {
                     stmt                   = transconn.prepareStatement(deleteArchive);
                     stmt.setString(1, archive);
                     stmt.executeUpdate();
                 }
                 stmt                       = transconn.prepareStatement(sql);
                 stmt.setInt(1,  1);
                 rs                         = stmt.executeQuery();
                 while (rs.next()) {
                     int colCount           = 1;
                     int type               = rs.getInt(colCount++);
                     String account         = rs.getString(colCount++);
                     int cycle              = rs.getInt(colCount++);
                     String location        = rs.getString(colCount++);
                     double monthly         = rs.getDouble(colCount++);
                     double setup           = rs.getDouble(colCount++);
                     stmt                   = transconn.prepareStatement(insertArchive);
                     stmt.setInt(1, type);
                     stmt.setString(2, account);
                     stmt.setInt(3, cycle);
                     stmt.setString(4, location);
                     stmt.setDouble(5, monthly);
                     stmt.setDouble(6, setup);
                     stmt.setString(7, archive);
                     stmt.executeUpdate();
                 }
             } catch (SQLException sqle) {
                 logger.dbError("Database error in getDashBoardLocationStatus: " + sqle.getMessage());
                 throw new HandlerException(sqle);
             } finally {
                 close(rs);
                 close(stmt);
             }
            
            

        }
         
         
         private void addBossAccountRecivableArchive(Element toHandle, Element toAppend) throws HandlerException {
             
             String sql                     = "SELECT i.id, a.name, i.invoiceNumber, i.amount, i.outstanding, i.date, DATEDIFF(NOW(),i.date) age, i.received FROM invoice i " +
                                            " LEFT JOIN accounts a ON a.id = i.account  WHERE i.active = 1 AND i.approved = 1 AND i.outstanding <> 0 AND i.received IS NULL  ";
             String insertArchive           = "INSERT INTO bossAccountRecivableArchive (receivedId, account, invoice, amount, outstanding, date, age, archive) "+
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?);";
             String selectArchive           = "SELECT DATE(archive) FROM bossAccountRecivableArchive WHERE DATE(archive) =  DATE(?);";
             String deleteArchive           = "DELETE FROM bossAccountRecivableArchive WHERE DATE(archive) =  DATE(?);";
             PreparedStatement stmt         = null;
             ResultSet rs                   = null;
             Calendar currentDate           = Calendar.getInstance();
             try {
                 String archive             = dbDateFormat.format(currentDate.getTime());
                 stmt                       = transconn.prepareStatement(selectArchive);
                 stmt.setString(1, archive);
                 rs                         = stmt.executeQuery();
                 if (rs.next()) {
                     stmt                   = transconn.prepareStatement(deleteArchive);
                     stmt.setString(1, archive);
                     stmt.executeUpdate();
                 }
                 stmt                       = transconn.prepareStatement(sql);
                 rs                         = stmt.executeQuery();
                 while (rs.next()) {
                     int colCount           = 1;
                     int rid                = rs.getInt(colCount++);
                     String account         = rs.getString(colCount++);
                     int invoice            = rs.getInt(colCount++);
                     double amount          = rs.getDouble(colCount++);
                     double outstanding     = rs.getDouble(colCount++);
                     String date            = rs.getString(colCount++);
                     int age                = rs.getInt(colCount++);
                     String received        = rs.getString(colCount++);
                     if(received == null) {
                         received            = "0000-00-00";
                     }
                     stmt                   = transconn.prepareStatement(insertArchive);
                     stmt.setInt(1, rid);
                     stmt.setString(2, account);
                     stmt.setInt(3, invoice);
                     stmt.setDouble(4, amount);
                     stmt.setDouble(5, outstanding);
                     stmt.setString(6, date);
                     stmt.setInt(7, age);
                     stmt.setString(8, received);
                     stmt.setString(8, archive);
                     stmt.executeUpdate();
                 }
             } catch (SQLException sqle) {
                 logger.dbError("Database error in getDashBoardLocationStatus: " + sqle.getMessage());
                 throw new HandlerException(sqle);
             } finally {
                 close(rs);
                 close(stmt);
             }  
         }
         
         
         private void addBossCashReciptArchive(Element toHandle, Element toAppend) throws HandlerException {
             
            PreparedStatement stmt          = null;
            ResultSet rs                    = null;
            Calendar currentDate            = Calendar.getInstance();
            Calendar requestDate            = Calendar.getInstance();
            
            SimpleDateFormat dateFormat1    = new SimpleDateFormat("yyyy-MM-dd");           
            requestDate.set(Calendar.DAY_OF_MONTH, 1);
            String startDate                = dateFormat1.format(requestDate.getTime());
            requestDate.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));
            String endDate                   = dateFormat1.format(requestDate.getTime());
            
            try {
                String archive              = dbDateFormat.format(currentDate.getTime());
                String sql                  = "SELECT p.id, p.received, IF(p.method = 1, 'Check', IF(p.method = 2, 'Credit', 'EFT')), a.name, i.invoiceNumber, pIM.amount, i.date, " +
                                            " IF(i.outstanding > 0, CONCAT('Partial Payment - ', p.details), p.details) FROM payment p " +
                                            " LEFT JOIN paymentInvoiceMap pIM ON pIM.payment = p.id LEFT JOIN invoice i ON i.id = pIM.invoice " +
                                            " LEFT JOIN accounts a ON a.id = p.account WHERE p.received BETWEEN ? AND ? ORDER BY p.received DESC, p.method, a.name;";
                String insertArchive        = "INSERT INTO bossCashReciptArchive (reciptId, method, account, invoice, amount, received, date, details, archive) "+
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);";
                String selectArchive        = "SELECT DATE(archive) FROM bossCashReciptArchive WHERE DATE(archive) =  DATE(?);";
                String deleteArchive        = "DELETE FROM bossCashReciptArchive WHERE DATE(archive) =  DATE(?);";
                
                stmt                        = transconn.prepareStatement(selectArchive);   
                stmt.setString(1, archive);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(deleteArchive);
                    stmt.setString(1, archive);
                    stmt.executeUpdate();
                }
                
                stmt                        = transconn.prepareStatement(sql);
                stmt.setString(1, startDate);
                stmt.setString(2, endDate);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    int colCount            = 1;                    
                    int id                  = rs.getInt(colCount++);
                    String received         = rs.getString(colCount++);
                    String method           = rs.getString(colCount++);
                    String account          = rs.getString(colCount++);
                    int invoice             = rs.getInt(colCount++);
                    double amount           = rs.getDouble(colCount++);
                    String date             = rs.getString(colCount++);
                    String details          = rs.getString(colCount++);
                    
                    stmt                    = transconn.prepareStatement(insertArchive);
                    stmt.setInt(1, id);
                    stmt.setString(2, method);
                    stmt.setString(3, account);
                    stmt.setInt(4, invoice);
                    stmt.setDouble(5, amount);
                    stmt.setString(6, received);
                    stmt.setString(7, date);
                    stmt.setString(8, details);
                    stmt.setString(9, archive);
                    stmt.executeUpdate();
                }
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
                throw new HandlerException(sqle);
            } finally {
                close(rs);
                close(stmt);
            }
         }
         
         
         private void addBossSalesArchive(Element toHandle, Element toAppend) throws HandlerException {
            
            String groupBy                  = " a.type DESC, a.name, i.id, itemMain, i.date ";
            String sql                      = "SELECT a.type type, a.name, i.invoiceNumber, iD.item itemMain, " +
                                            " SUM(iD.amount * iD.quantity) amount, i.date FROM invoice i LEFT JOIN accounts a ON a.id = i.account " +
                                            " LEFT JOIN invoiceDetails iD ON iD.invoice = i.id WHERE i.active = 1 AND i.approved = 1 AND i.date BETWEEN ? AND ? " +
                                            " GROUP BY " + groupBy + " ORDER BY " + groupBy;
            
            String insertArchive            = "INSERT INTO bossSalesArchive (type, account, invoice, item, amount, date, archive) "+
                                              " VALUES(?, ?, ?, ?, ?, ?, ?);";
             String selectArchive           = "SELECT DATE(archive) FROM bossSalesArchive WHERE DATE(archive) =  DATE(?);";
             String deleteArchive           = "DELETE FROM bossSalesArchive WHERE DATE(archive) =  DATE(?);";
            PreparedStatement stmt          = null;
            ResultSet rs                    = null;
            Calendar currentDate            = Calendar.getInstance();
            Calendar requestDate            = Calendar.getInstance();
            
            SimpleDateFormat dateFormat1    = new SimpleDateFormat("yyyy-MM-dd");           
            requestDate.set(Calendar.DAY_OF_MONTH, 1);
            String startDate                = dateFormat1.format(requestDate.getTime());
            requestDate.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));
            String endDate                  = dateFormat1.format(requestDate.getTime());


            try {
                String archive              = dbDateFormat.format(currentDate.getTime());
                stmt                        = transconn.prepareStatement(selectArchive);
                stmt.setString(1, archive);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(deleteArchive);
                    stmt.setString(1, archive);
                    stmt.executeUpdate();
                }                
                stmt                        = transconn.prepareStatement(sql);
                stmt.setString(1, startDate);
                stmt.setString(2, endDate);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    int colCount            = 1;
                    int type                = rs.getInt(colCount++);
                    String account          = rs.getString(colCount++);
                    int invoice             = rs.getInt(colCount++);
                    int item                = rs.getInt(colCount++);
                    double amount           = rs.getDouble(colCount++);
                    String date             = rs.getString(colCount++);
                    
                    stmt                    = transconn.prepareStatement(insertArchive);
                    stmt.setInt(1, type);
                    stmt.setString(2, account);
                    stmt.setInt(3, invoice);
                    stmt.setInt(4, item);
                    stmt.setDouble(5, amount);
                    stmt.setString(6, date);
                    stmt.setString(7, archive);
                    stmt.executeUpdate();
                }
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
                throw new HandlerException(sqle);
            } finally {
                close(rs);
                close(stmt);
            }
         }
         
         
         private void addBossTransactionArchive(Element toHandle, Element toAppend) throws HandlerException {
             
            PreparedStatement stmt          = null;
            ResultSet rs                    = null, invoiceRS = null;
            Calendar currentDate            = Calendar.getInstance();
            Calendar requestDate            = Calendar.getInstance();
            
            SimpleDateFormat dateFormat1    = new SimpleDateFormat("yyyy-MM-dd");           
            requestDate.set(Calendar.DAY_OF_MONTH, 1);
            String startDate                = dateFormat1.format(requestDate.getTime());
            requestDate.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));
            String endDate                  = dateFormat1.format(requestDate.getTime());

            String sql                      = "(SELECT 1, a.name, i.id, i.invoiceNumber, i.date, i.amount, i.outstanding FROM accounts a LEFT JOIN invoice i ON i.account = a.id " +
                                            " WHERE i.active = 1 AND i.approved = 1 AND i.date BETWEEN ? AND ? ORDER BY i.date DESC) " +
                                            " UNION " +
                                            " (SELECT 2, a.name, p.id, p.details, p.received, p.amount, p.outstanding FROM accounts a LEFT JOIN payment p ON p.account = a.id " +
                                            " WHERE p.received BETWEEN ? AND ? ORDER BY p.received DESC) " +
                                            " ORDER BY date DESC;";
            String insertArchive            = "INSERT INTO bossTransactionArchive (type, account, transactionId, info, date, amount, balance, archive )" +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, ?)"  ;      
             String selectArchive           = "SELECT DATE(archive) FROM bossTransactionArchive WHERE DATE(archive) =  DATE(?);";
             String deleteArchive           = "DELETE FROM bossTransactionArchive WHERE DATE(archive) =  DATE(?);";
            try {
                String archive              = dbDateFormat.format(currentDate.getTime());
                stmt                        = transconn.prepareStatement(selectArchive);
                stmt.setString(1, archive);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(deleteArchive);
                    stmt.setString(1, archive);
                    stmt.executeUpdate();
                }
                
                stmt                        = transconn.prepareStatement(sql);
                stmt.setString(1, startDate);
                stmt.setString(2, endDate);
                stmt.setString(3, startDate);
                stmt.setString(4, endDate);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    int colCount            = 1;
                    int type                = rs.getInt(colCount++);
                    String account          = rs.getString(colCount++);
                    int id                  = rs.getInt(colCount++);
                    String info             = rs.getString(colCount++);
                    String date             = rs.getString(colCount++);
                    double amount           = rs.getDouble(colCount++);
                    double balance          = rs.getDouble(colCount++);
                    
                    stmt                    = transconn.prepareStatement(insertArchive);
                    stmt.setInt(1, type);
                    stmt.setString(2, account);
                    stmt.setInt(3, id);
                    stmt.setString(4, info);
                    stmt.setString(5, date);
                    stmt.setDouble(6, amount);
                    stmt.setDouble(7, balance);                    
                    stmt.setString(8, archive);
                    stmt.executeUpdate();
                }
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
                throw new HandlerException(sqle);
            } finally {
                close(invoiceRS);
                close(rs);
                close(stmt);
            }
         }
         
         
         private void addBossInventoryArchive(Element toHandle, Element toAppend) throws HandlerException {
             
             PreparedStatement stmt         = null;
             ResultSet rs                   = null, rs1 = null,innerRS = null;
             Calendar currentDate           = Calendar.getInstance();
             Calendar requestDate           = Calendar.getInstance();
             SimpleDateFormat dateFormat1   = new SimpleDateFormat("yyyy-MM-dd"); 
             String endDate                 = dateFormat1.format(requestDate.getTime());
             requestDate.add(Calendar.MONTH, -1);
             String startDate               = dateFormat1.format(requestDate.getTime());
             
             String selectArchive           = "SELECT id FROM bossInventoryArchive WHERE DATE(archive) =  DATE(?);";
             String deleteArchive           = "DELETE FROM bossInventoryArchive WHERE id =  ? ;";
             String deleteTypeArchive       = "DELETE FROM bossInventoryTypeArchive WHERE  archiveId=  ?";
             String sql                     = "SELECT e.id, e.name, e.parValue, e.alertPoint, e.price, e.quantity FROM equipment e WHERE e.active = ? ORDER BY e.name";
             String selectEquipmentHistory  = "(SELECT eD.type, SUM(eDD.startQuantity-eDD.endQuantity) FROM equipmentDepletion eD " +
                                            " LEFT JOIN equipmentDepletionDetails eDD ON eDD.depletion = eD.id WHERE eDD.equipment = ? AND eD.date BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY) " +
                                            " GROUP BY eD.type ORDER BY eD.type) " +
                                            " UNION " +
                                            "(SELECT eT.type, SUM(eTD.quantity) FROM equipmentTransfer eT " +
                                            " LEFT JOIN equipmentTransferDetails eTD ON eTD.transfer = eT.id WHERE eTD.equipment = ? AND eT.date BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY) " +
                                            " GROUP BY eT.type ORDER BY eT.type) " +
                                            " UNION " +
                                            " (SELECT 5, SUM(pOD.quantity) FROM purchaseOrder pO LEFT JOIN purchaseOrderDetails pOD ON pOD.purchaseOrder = pO.id " +
                                            " WHERE pO.received IS NOT NULL AND pOD.equipment = ? AND pO.date BETWEEN ? AND ADDDATE(?, INTERVAL 1 DAY)) " +
                                            " ORDER BY type";
             String insertArchive           = "INSERT INTO bossInventoryArchive (equipment, name, par, alert, price, quantity, archive) VALUES (?, ?, ?, ?, ?, ?, ?);";
             String insertDetailArchive     = "INSERT INTO bossInventoryTypeArchive (archiveId, type, quantity) VALUES (?, ?, ?);";
             String getLastId               = " SELECT LAST_INSERT_ID()";
             try {
                  String archive            = dbDateFormat.format(currentDate.getTime());
                  stmt                      = transconn.prepareStatement(selectArchive);
                  stmt.setString(1, archive);
                  rs                        = stmt.executeQuery();
                  while (rs.next()) {
                      int id = rs.getInt(1);
                      stmt                  = transconn.prepareStatement(deleteArchive);
                      stmt.setInt(1, id);
                      stmt.executeUpdate();
                      stmt                  = transconn.prepareStatement(deleteTypeArchive);
                      stmt.setInt(1, id);
                      stmt.executeUpdate();
                  }
                  stmt                      = transconn.prepareStatement(sql);
                  stmt.setInt(1, 1);
                  rs                        = stmt.executeQuery();
                  while (rs.next()) {
                      int colCount          = 1;
                      int equipmentId       = rs.getInt(colCount++); 
                      String name= rs.getString(colCount++);
                      int par=rs.getInt(colCount++);
                      int alert = rs.getInt(colCount++);
                      String price = rs.getString(colCount++);
                      int quantity = rs.getInt(colCount++);
                      stmt                  = transconn.prepareStatement(insertArchive);
                      stmt.setInt(1, equipmentId);
                      stmt.setString(2, name);
                      stmt.setInt(3, par);
                      stmt.setInt(4, alert);
                      stmt.setString(5, price);
                      stmt.setInt(6, quantity);
                      stmt.setString(7, archive);
                      stmt.executeUpdate();
                      stmt                  = transconn.prepareStatement(getLastId);
                      rs1                   = stmt.executeQuery();
                      if (rs1.next()) {
                          int archiveid= rs1.getInt(1);
                          stmt               = transconn.prepareStatement(selectEquipmentHistory);
                          stmt.setInt(1, equipmentId);
                          stmt.setString(2, startDate);
                          stmt.setString(3, endDate);
                          stmt.setInt(4, equipmentId);
                          stmt.setString(5, startDate);
                          stmt.setString(6, endDate);
                          stmt.setInt(7, equipmentId);
                          stmt.setString(8, startDate);
                          stmt.setString(9, endDate);
                          innerRS            = stmt.executeQuery();
                          while (innerRS.next()) {
                              int type =innerRS.getInt(1);
                              quantity = innerRS.getInt(2);
                              stmt           = transconn.prepareStatement(insertDetailArchive);
                              stmt.setInt(1, archiveid);
                              stmt.setInt(2, type);
                              stmt.setInt(3, quantity);
                              //logger.debug("Type:"+type+"  qty:"+quantity);
                              stmt.executeUpdate();
                          }
                      }
                  }
              } catch (SQLException sqle) {
                  logger.dbError("Database error: "+sqle.toString());
                  throw new HandlerException(sqle);
              } finally {
                  close(rs);
                  close(stmt);
              }
         }
         
         
         private void addBossBadDebtArchive(Element toHandle, Element toAppend) throws HandlerException {
            
            String groupBy                  = " a.type DESC, a.name, i.id, itemMain, p.received ";
            String sql                      = "SELECT DISTINCT p.id, p.received, a.name, i.id, p.amount, p.details,a.type type,iD.item itemMain, i.date FROM badDebt p " +
                                            " LEFT JOIN badDebtInvoiceMap pIM ON pIM.badDebt = p.id LEFT JOIN invoice i ON i.id = pIM.invoice " +
                                            " LEFT JOIN accounts a ON a.id = p.account LEFT JOIN invoiceDetails iD ON iD.invoice=i.id WHERE p.received BETWEEN ? AND ? "
                                            + " GROUP BY " + groupBy + " ORDER BY " + groupBy;
            
            String insertArchive            = "INSERT INTO bossBadDebtArchive (badDebt, received, account, invoice, amount, details,type,item,invoiceDate, archive) "+
                                              " VALUES(?, ?, ?, ?, ?, ?, ?,?,?,?);";
             String selectArchive           = "SELECT DATE(archive) FROM bossBadDebtArchive WHERE DATE(archive) =  DATE(?);";
             String deleteArchive           = "DELETE FROM bossBadDebtArchive WHERE DATE(archive) =  DATE(?);";
            PreparedStatement stmt          = null;
            ResultSet rs                    = null;
            Calendar currentDate            = Calendar.getInstance();
            Calendar requestDate            = Calendar.getInstance();
            
            SimpleDateFormat dateFormat1    = new SimpleDateFormat("yyyy-MM-dd");           
            requestDate.set(Calendar.DAY_OF_MONTH, 1);
            String startDate                = dateFormat1.format(requestDate.getTime());
            requestDate.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));
            String endDate                  = dateFormat1.format(requestDate.getTime());


            try {
                String archive              = dbDateFormat.format(currentDate.getTime());
                stmt                        = transconn.prepareStatement(selectArchive);
                stmt.setString(1, archive);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    stmt                    = transconn.prepareStatement(deleteArchive);
                    stmt.setString(1, archive);
                    stmt.executeUpdate();
                }                
                stmt                        = transconn.prepareStatement(sql);
                stmt.setString(1, startDate);
                stmt.setString(2, endDate);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    int colCount            = 1;
                    int badDebt             = rs.getInt(colCount++);
                    String received         = rs.getString(colCount++);
                    String account          = rs.getString(colCount++);
                    int invoice             = rs.getInt(colCount++);                    
                    double amount           = rs.getDouble(colCount++);
                    String details          = rs.getString(colCount++);
                    int type                = rs.getInt(colCount++);
                    int item                = rs.getInt(colCount++);
                    String invoiceDate      = rs.getString(colCount++);
                    
                    
                    stmt                    = transconn.prepareStatement(insertArchive);
                    stmt.setInt(1, badDebt);
                    stmt.setString(2, received);
                    stmt.setString(3, account);
                    stmt.setInt(4, invoice);                    
                    stmt.setDouble(5, amount);
                    stmt.setString(6, details);
                    stmt.setInt(7, type);
                    stmt.setInt(8, item);
                    stmt.setString(9, invoiceDate);
                    stmt.setString(10, archive);
                    stmt.executeUpdate();
                }
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
                throw new HandlerException(sqle);
            } finally {
                close(rs);
                close(stmt);
            }
         }
         
         
         private void getBossArchive(Element toHandle, Element toAppend) throws HandlerException {
             
             int callerId                   = getCallerId(toHandle);
             int type                       = HandlerUtils.getRequiredInteger(toHandle, "type");
             String selectDashboardArchive  = "SELECT  DISTINCT(DATE(archive)) FROM bossDashboardArchive;";
             String selectRecurringArchive  = "SELECT  DISTINCT(DATE(archive)) FROM bossRecurringArchive;";
             String selectAccountArchive    = "SELECT  DISTINCT(DATE(archive)) FROM bossAccountRecivableArchive;";
             String selectCashArchive       = "SELECT  DISTINCT(DATE(archive)) FROM bossCashReciptArchive;";
             String selectSalesArchive      = "SELECT  DISTINCT(DATE(archive)) FROM bossSalesArchive; ";
             String selectBadDebtArchive    = "SELECT  DISTINCT(DATE(archive)) FROM bossBadDebtArchive; ";
             String selectTransactionArchive="SELECT  DISTINCT(DATE(archive)) FROM bossTransactionArchive;";
             String selectInventoryArchive  ="SELECT  DISTINCT(DATE(archive)) FROM bossInventoryArchive;";
             
             PreparedStatement stmt         = null;
             ResultSet rs                   = null, invoiceRS = null;
             try { 
                 switch(type) {
                     case 1:
                         stmt               = transconn.prepareStatement(selectDashboardArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl 
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                     case 2:
                         stmt               = transconn.prepareStatement(selectRecurringArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                     case 3:
                         stmt               = transconn.prepareStatement(selectAccountArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                     case 4:
                         stmt               = transconn.prepareStatement(selectCashArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                     case 5:
                         stmt               = transconn.prepareStatement(selectSalesArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                     case 6:
                         stmt               = transconn.prepareStatement(selectTransactionArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                     case 7:
                         stmt               = transconn.prepareStatement(selectInventoryArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                     case 8:
                         stmt               = transconn.prepareStatement(selectBadDebtArchive);
                         rs                 = stmt.executeQuery();
                         while (rs.next()) {
                             Element archiveEl
                                            = toAppend.addElement("archive");
                             archiveEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                         }
                         break;
                 }
             } catch (SQLException sqle) {
                 logger.dbError("Database error: "+sqle.toString());
                 throw new HandlerException(sqle);
             } finally {            
                 close(rs);
                 close(stmt);
             }
         }
         
         
         private void getBossDashboardArchive(Element toHandle, Element toAppend) throws HandlerException {
             
             int callerId                   = getCallerId(toHandle);
             String archive                 = HandlerUtils.getRequiredString(toHandle, "archive");
             int type                       = HandlerUtils.getRequiredInteger(toHandle, "type");
             String selectType1             = "SELECT stat1, stat2, stat3, stat4, stat5 "
                                            + " FROM bossDashboardArchive WHERE DATE(archive) = ?;";
             String selectType2             = "SELECT  tier1, tier2, tier3, tier4, tier5, totalTier "
                                            + " FROM bossDashboardArchive WHERE DATE(archive) = ?;";
             String selectType3             = "SELECT openTicket, delayedTicket, gateway, closed, caller "
                                            + " FROM bossDashboardArchive WHERE DATE(archive) = ?;";
             String selectType4             = "SELECT  expectedRevenue, expectedSetupFee, currentRevenue, countPastDue, amountDue, monthlyRevenue, underContractRevenue "
                                            + " FROM bossDashboardArchive WHERE DATE(archive) = ?;";
             
             PreparedStatement stmt         = null;
             ResultSet rs                   = null;
             try {   
                 switch(type) {
                     case 1:
                         stmt               = transconn.prepareStatement(selectType1);
                         stmt.setString(1, archive);
                         rs                 = stmt.executeQuery();
                         Element statusData = toAppend.addElement("locationStatus");          
                         if (rs.next()) {
                             int colCount   = 1;
                             Element status = statusData.addElement("data");
                             status.addAttribute("state", "1");
                             status.addAttribute("count", String.valueOf(rs.getInt(colCount++)));
                             status         = statusData.addElement("data");
                             status.addAttribute("state", "2");
                             status.addAttribute("count", String.valueOf(rs.getInt(colCount++)));
                             status         = statusData.addElement("data");
                             status.addAttribute("state", "3");
                             status.addAttribute("count", String.valueOf(rs.getInt(colCount++)));
                             status         = statusData.addElement("data");
                             status.addAttribute("state", "4");
                             status.addAttribute("count", String.valueOf(rs.getInt(colCount++)));
                         }
                         break;
                     case 3:
                         stmt               = transconn.prepareStatement(selectType2);
                         stmt.setString(1, archive);
                         rs                 = stmt.executeQuery();
                         Element tierData   = toAppend.addElement("tier");
                         Element tier       = tierData.addElement("data");
                         if (rs.next()) {
                             int colCount   = 1;
                             tier.addAttribute("tier1Count", String.valueOf(rs.getInt(colCount++)));
                             tier.addAttribute("tier2Count", String.valueOf(rs.getInt(colCount++)));
                             tier.addAttribute("tier3Count", String.valueOf(rs.getInt(colCount++)));
                             tier.addAttribute("tier4Count", String.valueOf(rs.getInt(colCount++)));
                             tier.addAttribute("tier5Count", String.valueOf(rs.getInt(colCount++)));
                             tier.addAttribute("totalCount", String.valueOf(rs.getDouble(colCount++)));
                         }
                         break;
                     case 4:
                         stmt               = transconn.prepareStatement(selectType3);
                         stmt.setString(1, archive);
                         rs                 = stmt.executeQuery();
                         Element ticketData = toAppend.addElement("tickets");
                         Element tickets    = ticketData.addElement("data");
                         if (rs.next()) {
                             int colCount   = 1;                             
                             tickets.addAttribute("open", String.valueOf(rs.getInt(colCount++)));
                             tickets.addAttribute("delayed", String.valueOf(rs.getInt(colCount++)));
                             tickets.addAttribute("gateway", String.valueOf(rs.getInt(colCount++)));
                             tickets.addAttribute("closed", String.valueOf(rs.getInt(colCount++)));
                             tickets.addAttribute("caller", String.valueOf(rs.getInt(colCount++)));
                         }
                         break;
                     case 2:
                         stmt               = transconn.prepareStatement(selectType4);
                         stmt.setString(1, archive);
                         rs                 = stmt.executeQuery();
                         Element billData   = toAppend.addElement("billing"); 
                         Element billing    = billData.addElement("data");
                         if (rs.next()) {
                             int colCount                    = 1;
                             billing.addAttribute("expectedRevenue", rs.getString(colCount++)); 
                             billing.addAttribute("expectedSetupFee", rs.getString(colCount++));
                             billing.addAttribute("currentRevenue", rs.getString(colCount++));
                             billing.addAttribute("countPastDue", rs.getString(colCount++));
                             billing.addAttribute("amountDue" ,rs.getString(colCount++));
                             billing.addAttribute("monthlyRevenue",rs.getString(colCount++));
                             billing.addAttribute("underContractRevenue",rs.getString(colCount++));
                         }
                         break;
                 }
             } catch (SQLException sqle) {
                 logger.dbError("Database error: "+sqle.toString());
                 throw new HandlerException(sqle);
             } finally {            
                 close(rs);
                 close(stmt);
             }
         }
         
         
         private void getBossRecurringArchive(Element toHandle, Element toAppend) throws HandlerException {

            int callerId                    = getCallerId(toHandle);
            String archive                  = HandlerUtils.getRequiredString(toHandle, "archive");
            String selectArchive            = "SELECT type, account, cycle, location, monthly, setup "
                                            + " FROM bossRecurringArchive WHERE DATE(archive) = ?;";

            PreparedStatement stmt          = null;
            ResultSet rs                    = null;

            try {            
                stmt                        = transconn.prepareStatement(selectArchive);
                stmt.setString(1, archive);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                Element invoiceDetailsEl    = toAppend.addElement("data");
                invoiceDetailsEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
                invoiceDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                invoiceDetailsEl.addElement("cycle").addText(String.valueOf(rs.getInt(colCount++)));
                invoiceDetailsEl.addElement("location").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                invoiceDetailsEl.addElement("monthly").addText(String.valueOf(rs.getDouble(colCount++)));
                invoiceDetailsEl.addElement("setup").addText(String.valueOf(rs.getDouble(colCount++)));
            }
            } catch (SQLException sqle) {
                logger.dbError("Database error: "+sqle.toString());
                throw new HandlerException(sqle);
            } finally {
                close(rs);
                close(stmt);
            }
         }
         
         
         private void getBossAccountRecivableArchive(Element toHandle, Element toAppend) throws HandlerException {

            int callerId                    = getCallerId(toHandle);
            String archive                  = HandlerUtils.getRequiredString(toHandle, "archive");
            String selectArchive            = "SELECT receivedId, account, invoice, amount, outstanding, date, age, received "
                                            + " FROM bossAccountRecivableArchive WHERE DATE(archive) = ?;";

            PreparedStatement stmt          = null;
            ResultSet rs                    = null;

            try {            
                stmt                        = transconn.prepareStatement(selectArchive);
                stmt.setString(1, archive);
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    int colCount            = 1;
                    Element invoiceDetailsEl= toAppend.addElement("data");
                    invoiceDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                    invoiceDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    invoiceDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
                    invoiceDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    invoiceDetailsEl.addElement("outstanding").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                    invoiceDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++).substring(0, 10)));
                    invoiceDetailsEl.addElement("age").addText(String.valueOf(rs.getInt(colCount++)));
                    invoiceDetailsEl.addElement("received").addText("");
                }


        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
                close(rs);
                close(stmt);
            }
         }
         
         
         private void getBossCashReciptArchive(Element toHandle, Element toAppend) throws HandlerException {
            
             int callerId                   = getCallerId(toHandle);
            String archive                  = HandlerUtils.getRequiredString(toHandle, "archive");
            String selectArchive            = "SELECT reciptId, method, account, invoice, amount, received, date, details "
                                            + " FROM bossCashReciptArchive WHERE DATE(archive) = ?;";

            PreparedStatement stmt          = null;
            ResultSet rs                    = null;

            try {            
                stmt                        = transconn.prepareStatement(selectArchive);
                stmt.setString(1, archive);
                rs                          = stmt.executeQuery();
                    while (rs.next()) {
                        int colCount        = 1;
                        Element paymentDetailsEl
                                            = toAppend.addElement("data");
                        paymentDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));                    
                        paymentDetailsEl.addElement("method").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                        paymentDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                        paymentDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
                        paymentDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                        paymentDetailsEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++).substring(0, 10)));
                        paymentDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++).substring(0, 10)));
                        paymentDetailsEl.addElement("details").addText(String.valueOf(rs.getString(colCount++)));
                    }


        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
                close(rs);
                close(stmt);
            }
         }
    
    
    private void getBossSalesArchive(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String archive                      = HandlerUtils.getRequiredString(toHandle, "archive");
        String selectArchive                = "SELECT type, account, invoice, item, amount, date "
                                            + " FROM bossSalesArchive WHERE DATE(archive) = ?;";
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
      
        try {            
            stmt                            = transconn.prepareStatement(selectArchive);
            stmt.setString(1, archive);
            rs                              = stmt.executeQuery();
        while (rs.next()) {
            int colCount                    = 1;
            Element invoiceDetailsEl        = toAppend.addElement("data");
            invoiceDetailsEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("item").addText(String.valueOf(rs.getInt(colCount++)));
            invoiceDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            invoiceDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++).substring(0, 10)));
        }
    
    
    } catch (SQLException sqle) {
    logger.dbError("Database error: "+sqle.toString());
    throw new HandlerException(sqle);
    } finally {
    close(rs);
    close(stmt);
    }
        
    }
    
    
    private void getBossBadDebtArchive(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String archive                      = HandlerUtils.getRequiredString(toHandle, "archive");
        String selectArchive                = "SELECT badDebt, received, account, invoice, amount, details,type ,item , invoiceDate "
                                            + " FROM bossBadDebtArchive WHERE DATE(archive) = DATE(?);";
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        
        try {            
            stmt                            = transconn.prepareStatement(selectArchive);
            stmt.setString(1, archive);
            rs                              = stmt.executeQuery();
        while (rs.next()) {
            int colCount                    = 1;
            Element badDebtDetailsEl        = toAppend.addElement("data");
            badDebtDetailsEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
            badDebtDetailsEl.addElement("received").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("invoice").addText(String.valueOf(rs.getInt(colCount++)));
            badDebtDetailsEl.addElement("amount").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
            badDebtDetailsEl.addElement("details").addText(String.valueOf(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("type").addText(String.valueOf(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("item").addText(String.valueOf(rs.getString(colCount++)));
            badDebtDetailsEl.addElement("invoiceDate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
        }
    
    
    } catch (SQLException sqle) {
    logger.dbError("Database error: "+sqle.toString());
    throw new HandlerException(sqle);
    } catch (Exception e) {
    logger.debug("error: "+e.getMessage());    
    }finally {
    close(rs);
    close(stmt);
    }
        
    }
    
    
    private void getBossTransactionArchive(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String archive                      = HandlerUtils.getRequiredString(toHandle, "archive");
        String selectArchive                = "SELECT type, account, transactionId, info, date, amount, balance "
                                            + " FROM bossTransactionArchive WHERE DATE(archive) = ?;";
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        
        try {            
            stmt                            = transconn.prepareStatement(selectArchive);
            stmt.setString(1, archive);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                Element transactionEl       = toAppend.addElement("transaction");
                transactionEl.addElement("type").addText(String.valueOf(rs.getInt(colCount++)));
                transactionEl.addElement("account").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                transactionEl.addElement("info").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                transactionEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++).substring(0, 10)));
                transactionEl.addElement("amount").addText(String.valueOf(rs.getDouble(colCount++)));
                transactionEl.addElement("balance").addText(String.valueOf(rs.getDouble(colCount++)));
            }
    
    
    } catch (SQLException sqle) {
    logger.dbError("Database error: "+sqle.toString());
    throw new HandlerException(sqle);
    } finally {
    close(rs);
    close(stmt);
    }
    }
    
    
    private void getBossInventoryArchive(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String archive                      = HandlerUtils.getRequiredString(toHandle, "archive");
        String selectArchive                = "SELECT id, equipment,name, par, alert, price, quantity "
                                            + " FROM bossInventoryArchive WHERE DATE(archive) = ?;";
         String selectType                  = "SELECT  type, quantity "
                                            + " FROM bossInventoryTypeArchive WHERE archiveId = ?;";
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, innerRS = null;
        
        try {            
            stmt                            = transconn.prepareStatement(selectArchive);
            stmt.setString(1, archive);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int colCount                = 1;
                int archiveId              = rs.getInt(colCount++);
                Element equipmentListEl     = toAppend.addElement("equipment");
                equipmentListEl.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                equipmentListEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                equipmentListEl.addElement("par").addText(String.valueOf(rs.getInt(colCount++)));
                equipmentListEl.addElement("alert").addText(String.valueOf(rs.getInt(colCount++)));
                equipmentListEl.addElement("price").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                equipmentListEl.addElement("quantity").addText(String.valueOf(rs.getInt(colCount++)));
                
                stmt                        = transconn.prepareStatement(selectType);
                stmt.setInt(1, archiveId);
                
                innerRS                     = stmt.executeQuery();
                while (innerRS.next()) {
                    Element depletionEl     = equipmentListEl.addElement("data");
                    depletionEl.addElement("type").addText(String.valueOf(innerRS.getInt(1)));
                    depletionEl.addElement("quantity").addText(String.valueOf(innerRS.getInt(2)));
                }
            }
    
    } catch (SQLException sqle) {
    logger.dbError("Database error: "+sqle.toString());
    throw new HandlerException(sqle);
    } finally {
    close(innerRS);
     close(rs);
    close(stmt);
    }
    }
    
    private void getRateCard(Element toHandle, Element toAppend) throws HandlerException {

        int rateCard                        = HandlerUtils.getOptionalInteger(toHandle, "rateCard");
        String getLocationRates             = "SELECT rC.id, rC.minimum, rC.amount, rC.setup, rC.amountIncrement, rC.setupIncrement, rC.multiples, rC.description FROM rateCard rC " ;
                                            

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        if(rateCard > 0) {
            getLocationRates += "WHERE rC.id =?;";
        }

        try {
           
            stmt                            = transconn.prepareStatement(getLocationRates);
            if(rateCard > 0) {
                stmt.setInt(1,rateCard);
            }
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int counter                 = 1;
                               
                Element rCEl       = toAppend.addElement("rateCard");
                rCEl.addElement("id").addText(String.valueOf(rs.getInt(counter++)));
                rCEl.addElement("minimum").addText(String.valueOf(rs.getInt(counter++)));
                rCEl.addElement("amount").addText(String.valueOf(rs.getDouble(counter++)));
                rCEl.addElement("setup").addText(String.valueOf(rs.getDouble(counter++)));
                rCEl.addElement("amountIncrement").addText(String.valueOf(rs.getDouble(counter++)));
                rCEl.addElement("setupIncrement").addText(String.valueOf(rs.getDouble(counter++)));
                rCEl.addElement("multiples").addText(String.valueOf(rs.getInt(counter++)));
                rCEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(counter++)));
                
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    public String getHttpData(URL urL) {
        String graph                        =null;
        try {
            String inputLine;
            HttpURLConnection conn         = (HttpURLConnection) urL.openConnection();
            BufferedReader in               = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer  b                 = new StringBuffer();
            while ((inputLine = in.readLine()) != null)
             b.append(inputLine + "\n");
            in.close();
            graph                           = b.toString();
        }catch (Exception e) {
            logger.debug(e.getMessage());
        }
        return graph;

    }
    
    
    private void calibrateLines(Element toHandle, Element toAppend) throws HandlerException {

        DateTimeParameter startDate         = HandlerUtils.getRequiredTimestamp(toHandle, "startDate");
        DateTimeParameter endDate           = HandlerUtils.getRequiredTimestamp(toHandle, "endDate");
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        int callerId                        = getCallerId(toHandle);
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        logger.debug("Location ID: " + locationId);

        String selectSystem                 = "SELECT id, systemId FROM system WHERE id = (SELECT system FROM line WHERE id = ?)";
        String selectOldPulses              = "SELECT p.value, p.date FROM pulses p LEFT JOIN line l ON l.lineIndex = p.line WHERE p.date < ? AND p.location = ? AND p.system = ? AND l.id = ? " +
                                            " ORDER BY p.date DESC LIMIT 1";
        String selectPulses                 = "SELECT DATE(?), TIME(?), TIME(?), IFNULL(MAX(value),0), IFNULL(MIN(value),0), IFNULL(MAX(value),0) - ?, "
                                            + " IF(TIMEDIFF(MIN(date), ?) > '01:00:00', TRUE, FALSE) FROM pulses p " +
                                            " LEFT JOIN line l ON l.lineIndex = p.line WHERE p.date BETWEEN  ? AND ? AND p.location = ? AND p.system = ? AND l.id = ?";
        String insertCalibration            = "INSERT INTO calibrationPeriod (location, system ,line, date, startTime, endTime, pulses, oldCalibration, calibration) " +
                                            " VALUES (?, ?, ?, ?, ?, ?, ?, (SELECT value FROM calibration WHERE location = ? AND system = ? AND line = (SELECT lineIndex FROM line WHERE id = ?)), ?) ;";
        String updateCalibration            = "UPDATE calibration SET value = ? WHERE location = ? AND system = ? AND line = (SELECT lineIndex FROM line WHERE id = ?)";

            try {
                               
                Iterator i                  = toHandle.elementIterator("line");
                while (i.hasNext()) {
                    Element lineEl          = (Element) i.next();
                    int lineId              = HandlerUtils.getRequiredInteger(lineEl, "lineId");
                    double ounces           = HandlerUtils.getRequiredDouble(lineEl, "ounces");

                    int oldValue            = 0, system = 0, systemId = 0;
                    
                    stmt                    = transconn.prepareStatement(selectSystem);
                    stmt.setInt(1, lineId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        system              = rs.getInt(1);
                        systemId            = rs.getInt(2);
                    }
                    
                    String startString      = startDate.toString();
                    String endString        = endDate.toString();
                    String oldDate          = "2005-01-01 07:00:00";

                    logger.debug("Line ID: " + lineId + " was calibrated with " + String.valueOf(ounces) + " ounces");
                    logger.debug("Calibration period is : " + startString + " to " + endString);
                    stmt                    = transconn.prepareStatement(selectOldPulses);
                    stmt.setString(1, startString);
                    stmt.setInt(2, locationId);
                    stmt.setInt(3, systemId);
                    stmt.setInt(4, lineId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        oldValue            = rs.getInt(1);
                        oldDate             = rs.getString(2);
                    } 
                    
                    stmt                    = transconn.prepareStatement(selectPulses);
                    stmt.setString(1, startString);
                    stmt.setString(2, startString);
                    stmt.setString(3, endString);
                    stmt.setInt(4, oldValue);
                    stmt.setString(5, oldDate);
                    stmt.setString(6, startString);
                    stmt.setString(7, endString);
                    stmt.setInt(8, locationId);
                    stmt.setInt(9, systemId);
                    stmt.setInt(10, lineId);
                    rs                      = stmt.executeQuery();
                    if (rs.next()) {
                        String date         = rs.getString(1);
                        String startTime    = rs.getString(2);
                        String endTime      = rs.getString(3);
                        int maxValue        = rs.getInt(4);
                        int minValue        = rs.getInt(5);
                        int value           = rs.getInt(6);

                        boolean sameValue   = (maxValue == minValue ? true : false);

                        if (!sameValue && (minValue < oldValue)) {
                            value           = maxValue - minValue;
                        } else if (!sameValue && (oldValue == 0 && rs.getBoolean(7))) {
                            value           = maxValue - minValue;
                        }

                        if(value != 0) {
                            
                            double calibration
                                            = (ounces/value) * 10000;
                            //logger.debug("Line Poured Pulses: " + value + "; New Calibration: " + calibration);
                            stmt            = transconn.prepareStatement(insertCalibration);
                            stmt.setInt(1, locationId);
                            stmt.setInt(2, system);
                            stmt.setInt(3, lineId);
                            stmt.setString(4, date);
                            stmt.setString(5, startString);
                            stmt.setString(6, endString);
                            stmt.setInt(7,value);
                            stmt.setDouble(8, locationId);
                            stmt.setDouble(9, system);
                            stmt.setDouble(10, lineId);
                            stmt.setDouble(11, calibration);
                            stmt.executeUpdate();

                            if (calibration < 1) {
                                calibration = 600;
                            }

                            stmt            = transconn.prepareStatement(updateCalibration);
                            stmt.setDouble(1, calibration);
                            stmt.setInt(2, locationId);
                            stmt.setInt(3, system);
                            stmt.setInt(4, lineId);
                            stmt.executeUpdate();
                        }
                    }
                }
            } catch (SQLException sqle) {
                logger.dbError("Database error in lineCleaning: " + sqle.getMessage());
                throw new HandlerException(sqle);
            }
    }
    
    
    private void getPackingSlip(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString");
        int customerId                      = HandlerUtils.getOptionalInteger(toHandle, "customerId");
        int locationId                      = HandlerUtils.getOptionalInteger(toHandle, "locationId");
        int userId                          = HandlerUtils.getOptionalInteger(toHandle, "userId");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        int paramId                         = 0;

        String sql                          = "SELECT pS.id,BC.Customer_Name,BL.id,BL.location_name,orderDate,u.name "
                                            + " FROM packingSlip pS LEFT JOIN BOSS_Location BL ON BL.id=pS.location LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id "
                                            + " LEFT JOIN user u ON u.id=pS.user ";
        if(customerId >0 ){
            sql                             += " WHERE BC.id = ? ";
            paramId                         = customerId;
        } else if(locationId >0){
            sql                             += " WHERE BL.id = ? ";
            paramId                         = locationId;
        }
        sql                                 += "  ORDER BY pS.orderDate,pS.location DESC;";
        
        try {
            stmt                            = transconn.prepareStatement(sql);
            if(paramId>0){
                stmt.setInt(1, paramId);
            }
            rs                              = stmt.executeQuery();
            while(rs.next()){
                Element pSListEl            = toAppend.addElement("packingSlip");
                pSListEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                pSListEl.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                pSListEl.addElement("locationId").addText(String.valueOf(rs.getInt(3)));
                pSListEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                pSListEl.addElement("orderDate").addText(HandlerUtils.nullToEmpty(rs.getString(5)));
                pSListEl.addElement("createdBy").addText(HandlerUtils.nullToEmpty(rs.getString(6)));                 
                   
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getPackingSlipLocationDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "locationId");        
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        String selectPackingSlip            = "SELECT location_contact,location_street,"
                                            + "  CONCAT(location_city,' ',location_state,'-',location_zip),location_ph,a.name,a.addrStreet, CONCAT(a.addrCity,' ', a.addrState,'-', a.addrZip),BC.Customer_Name "
                                            + " FROM BOSS_Location BL LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN  locationAccountMap aM ON aM.location=BL.id "
                                            + " LEFT JOIN accounts a ON a.id=aM.account  WHERE BL.id= ?";   
        String selectEquipment              = " SELECT e.id,e.name FROM equipment e WHERE e.active=1 ORDER BY e.name;";
        try {
            stmt                            = transconn.prepareStatement(selectPackingSlip);            
            stmt.setInt(1,id);
            rs                              = stmt.executeQuery();
            if(rs.next()) {                
                toAppend.addElement("locContact").addText(HandlerUtils.nullToEmpty(rs.getString(1)));   
                toAppend.addElement("locAddr1").addText(HandlerUtils.nullToEmpty(rs.getString(2)));   
                toAppend.addElement("locAddr2").addText(HandlerUtils.nullToEmpty(rs.getString(3))); 
                toAppend.addElement("locPhone").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                toAppend.addElement("billContact").addText(HandlerUtils.nullToEmpty(rs.getString(5)));
                toAppend.addElement("billAddr1").addText(HandlerUtils.nullToEmpty(rs.getString(6)));   
                toAppend.addElement("billAddr2").addText(HandlerUtils.nullToEmpty(rs.getString(7)));                                 
                toAppend.addElement("customerName").addText(HandlerUtils.nullToEmpty(rs.getString(8)));
                
            }
            
            stmt                            = transconn.prepareStatement(selectEquipment);                        
            rs                              = stmt.executeQuery();
            while(rs.next()) {
                Element pSListEl            = toAppend.addElement("equipment");                
                pSListEl.addElement("equipmentId").addText(String.valueOf(rs.getInt(1)));
                pSListEl.addElement("equipmentName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));                
            }
            
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getPackingSlipDetails(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");        
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        String selectPackingSlip            = "SELECT location_contact,location_street,"
                                            + "  CONCAT(location_city,' ',location_state,'-',location_zip),location_ph,a.name,a.addrStreet, CONCAT(a.addrCity,' ', a.addrState,'-', a.addrZip),pS.customerContact "
                                            + " FROM packingSlip pS LEFT JOIN BOSS_Location BL ON BL.id=pS.location LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN  locationAccountMap aM ON aM.location=BL.id "
                                            + " LEFT JOIN accounts a ON a.id=aM.account  WHERE pS.id= ?";            
        String sql                          = " SELECT e.id,e.name,(SELECT quantity FROM packingSlipDetails pD WHERE pD.equipment=e.id AND pD.packingSlip=?) FROM equipment e WHERE e.active=1 ORDER BY e.name;";
        try {
            stmt                            = transconn.prepareStatement(selectPackingSlip);            
            stmt.setInt(1,id);
            rs                              = stmt.executeQuery();
            if(rs.next()) {                
                toAppend.addElement("locContact").addText(HandlerUtils.nullToEmpty(rs.getString(1)));   
                toAppend.addElement("locAddr1").addText(HandlerUtils.nullToEmpty(rs.getString(2)));   
                toAppend.addElement("locAddr2").addText(HandlerUtils.nullToEmpty(rs.getString(3))); 
                toAppend.addElement("locPhone").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                toAppend.addElement("billContact").addText(HandlerUtils.nullToEmpty(rs.getString(5)));
                toAppend.addElement("billAddr1").addText(HandlerUtils.nullToEmpty(rs.getString(6)));   
                toAppend.addElement("billAddr2").addText(HandlerUtils.nullToEmpty(rs.getString(7)));                 
                toAppend.addElement("customerContact").addText(HandlerUtils.nullToEmpty(rs.getString(8)));   
            }
            stmt                            = transconn.prepareStatement(sql);            
            stmt.setInt(1,id);
            rs                              = stmt.executeQuery();
            while(rs.next()) {
                Element pSListEl            = toAppend.addElement("packingSlipDetails");                
                pSListEl.addElement("equipmentId").addText(String.valueOf(rs.getInt(1)));
                pSListEl.addElement("equipmentName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                pSListEl.addElement("quantity").addText(String.valueOf(rs.getInt(3)));                 
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void updatePackingSlip(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        String orderDate                    = HandlerUtils.getRequiredString(toHandle, "orderDate");
        String customerContact              = HandlerUtils.getOptionalString(toHandle, "customerContact");
        String billContact                  = HandlerUtils.getOptionalString(toHandle, "billContact");
        String billAddr1                    = HandlerUtils.getRequiredString(toHandle, "billAddr1");
        String billAddr2                    = HandlerUtils.getRequiredString(toHandle, "billAddr2");
        String locContact                   = HandlerUtils.getRequiredString(toHandle, "locContact");
        String locAddr1                     = HandlerUtils.getRequiredString(toHandle, "locAddr1");
        String locAddr2                     = HandlerUtils.getRequiredString(toHandle, "locAddr2");
        String locPhone                     = HandlerUtils.getRequiredString(toHandle, "locPhone");

        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectCustomer               = "SELECT BC.Customer_Name, BL.location_name FROM BOSS_Location BL LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id WHERE BL.id = ? ";
        String selectPackingSlip            = "SELECT id FROM packingSlip WHERE  id = ? ";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        String updatePackingSlip            = "UPDATE packingSlip SET user = ?, shipAddr= ?, billAddr= ?, orderDate = ?, customerContact = ? WHERE id= ?";
        String insertPackingSlipDetails     = "INSERT INTO packingSlipDetails (packingSlip, equipment, quantity) VALUES (?,?,?) ";
        String updatePackingSlipDetails     = "UPDATE packingSlipDetails SET  quantity = ? WHERE equipment= ? AND packingSlip = ? ";
        String selectEquipment              = "SELECT id, name, price, quantity FROM equipment ";
        String insertEquipmentDepletion     = "INSERT INTO equipmentDepletion (user, location, type) VALUES (?,?,?) ";
        String insertEquipmentDepletionDet  = "INSERT INTO equipmentDepletionDetails (depletion, equipment, startQuantity, endQuantity) VALUES (?,?,?,?) ";
        String updateEquipmentQuantity      = "UPDATE equipment SET quantity = quantity + ? WHERE id = ?";
        String updateTotal                  = "UPDATE packingSlip SET total = ? WHERE id = ?";
        String selectEquipmentQty           = "SELECT equipment,quantity FROM packingSlipDetails  WHERE packingSlip=? ";

        HashMap<Integer, String> equipmentName
                                            = new HashMap<Integer, String>();
        HashMap<Integer, Double> equipmentPrice
                                            = new HashMap<Integer, Double>();
        HashMap<Integer, Integer> equipmentQty
                                            = new HashMap<Integer, Integer>();
        HashMap<Integer, Integer> previousEquipmentQty
                                            = new HashMap<Integer, Integer>();
        
        double total                        = 0 ;

        try {

            stmt                            = transconn.prepareStatement(selectPackingSlip);           
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int packingSlipId           = rs.getInt(1);
                
                stmt                        = transconn.prepareStatement(selectEquipmentQty);
                stmt.setInt(1, packingSlipId);
                 rs                          = stmt.executeQuery();
                while (rs.next()) {
                    previousEquipmentQty.put(rs.getInt(1),rs.getInt(2));                    
                }
                
                
                stmt                        = transconn.prepareStatement(selectEquipment);               
                rs                          = stmt.executeQuery();
                while (rs.next()) {
                    equipmentName.put(rs.getInt(1), rs.getString(2));
                    equipmentPrice.put(rs.getInt(1), rs.getDouble(3));
                    equipmentQty.put(rs.getInt(1), rs.getInt(4));
                }
                
                String customerName         = "Unknown Customer", locationName = "Unknown Location";
                stmt                        = transconn.prepareStatement(selectCustomer);
                stmt.setInt(1, locationId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    customerName            = rs.getString(1);
                    locationName            = rs.getString(2);
                }

                stmt                        = transconn.prepareStatement(updatePackingSlip);
                stmt.setInt(1, callerId);               
                stmt.setString(2, locContact + " " + locAddr1 + " " + locAddr2 + " " + locPhone);
                stmt.setString(3, billContact + " " + locationName + " " + billAddr1 + " " + billAddr2);
                stmt.setString(4, orderDate);
                stmt.setString(5, customerContact);
                stmt.setInt(6, packingSlipId);
                stmt.executeUpdate();

               
                StringBuilder newLocationEmail
                                            = new StringBuilder();
                newLocationEmail.append("<tr><td><table border=1 style='border: thin solid Black;'>");
                newLocationEmail.append("<tr><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' rowspan='4' valign='top' >Bill To:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(billContact);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' rowspan='4' valign='top' >Ship To:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(locContact);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locationName);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locAddr1);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(billAddr1);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locAddr2);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(billAddr2);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locPhone);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px; width: 15%;' valign='top' >Order Date:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(orderDate);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px; width: 15%;' valign='top' >Customer Contact:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(customerContact);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td colspan='6' align='center'><table style='border-style: solid; border-width: thin' width='100%'>");
                newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%; background-color: #C0C0C0;'>Item Description</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%; background-color: #C0C0C0;' >Quantity</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%; background-color: #C0C0C0;' >Price</td></tr>");

                stmt                        = transconn.prepareStatement(insertEquipmentDepletion);
                stmt.setInt(1, callerId);
                stmt.setInt(2, locationId);
                stmt.setInt(3, 1);
                stmt.executeUpdate();

                int depletionId             = 0;
                stmt                        = transconn.prepareStatement(getLastId);
                rs                          = stmt.executeQuery();
                if (rs.next()) {
                    depletionId             = rs.getInt(1);
                } else {
                    logger.dbError("first call to LAST_INSERT_ID in depletion failed to return a result");
                    throw new HandlerException("Database Error");
                }

                NumberFormat nf             = NumberFormat.getCurrencyInstance();

                Iterator equipments         = toHandle.elementIterator("equipment");
                while (equipments.hasNext()) {
                    Element equipment       = (Element) equipments.next();
                    int equipmentId         = HandlerUtils.getRequiredInteger(equipment, "id");
                    int quantity            = HandlerUtils.getRequiredInteger(equipment, "quantity");                   
                    if(previousEquipmentQty.containsKey(equipmentId)) {
                        int previousQuantity= previousEquipmentQty.get(equipmentId);
                        if(previousQuantity==quantity) {
                            newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%;'>" +  equipmentName.get(equipmentId) + "</td>");
                            newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                            newLocationEmail.append(quantity);
                            newLocationEmail.append("</td><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                            newLocationEmail.append(nf.format(equipmentPrice.get(equipmentId) * Integer.valueOf(quantity)));
                            total                   += (equipmentPrice.get(equipmentId) * Integer.valueOf(quantity));
                            newLocationEmail.append("</td></tr>");
                            previousEquipmentQty.remove(equipmentId);
                            logger.debug("Select:"+equipmentName.get(equipmentId)+":"+((equipmentQty.get(equipmentId))));
                        } else {
                            int newQuantity = previousQuantity-quantity;
                            newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%;'>" +  equipmentName.get(equipmentId) + "</td>");
                            newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                            newLocationEmail.append(quantity);
                            newLocationEmail.append("</td><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                            newLocationEmail.append(nf.format(equipmentPrice.get(equipmentId) * Integer.valueOf(quantity)));
                            total           += (equipmentPrice.get(equipmentId) * Integer.valueOf(quantity));
                            newLocationEmail.append("</td></tr>");

                            stmt            = transconn.prepareStatement(updatePackingSlipDetails);
                            stmt.setInt(1, quantity);
                            stmt.setInt(2, equipmentId);
                            stmt.setInt(3, packingSlipId);
                            stmt.executeUpdate();

                            stmt                    = transconn.prepareStatement(insertEquipmentDepletionDet);
                            stmt.setInt(1, depletionId);
                            stmt.setInt(2, equipmentId);
                            stmt.setInt(3, equipmentQty.get(equipmentId));
                            stmt.setInt(4, equipmentQty.get(equipmentId) + newQuantity);
                            stmt.executeUpdate();

                            stmt                    = transconn.prepareStatement(updateEquipmentQuantity);
                            stmt.setInt(1, newQuantity);
                            stmt.setInt(2, equipmentId);
                            stmt.executeUpdate();
                            logger.debug("Update:"+equipmentName.get(equipmentId)+":"+((equipmentQty.get(equipmentId))-newQuantity));
                            previousEquipmentQty.remove(equipmentId);
                        }                        
                    } else {
                        newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%;'>" +  equipmentName.get(equipmentId) + "</td>");
                        newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                        newLocationEmail.append(quantity);
                        newLocationEmail.append("</td><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                        newLocationEmail.append(nf.format(equipmentPrice.get(equipmentId) * Integer.valueOf(quantity)));
                        total                   += (equipmentPrice.get(equipmentId) * Integer.valueOf(quantity));
                        newLocationEmail.append("</td></tr>");

                        stmt                    = transconn.prepareStatement(insertPackingSlipDetails);
                        stmt.setInt(1, packingSlipId);
                        stmt.setInt(2, equipmentId);
                        stmt.setInt(3, quantity);
                        stmt.executeUpdate();

                        stmt                    = transconn.prepareStatement(insertEquipmentDepletionDet);
                        stmt.setInt(1, depletionId);
                        stmt.setInt(2, equipmentId);
                        stmt.setInt(3, equipmentQty.get(equipmentId));
                        stmt.setInt(4, equipmentQty.get(equipmentId) - quantity);
                        stmt.executeUpdate();

                        stmt                    = transconn.prepareStatement(updateEquipmentQuantity);
                        stmt.setInt(1, 0 - quantity);
                        stmt.setInt(2, equipmentId);
                        stmt.executeUpdate();
                        logger.debug("Insert:"+equipmentName.get(equipmentId)+":"+((equipmentQty.get(equipmentId))-quantity));
                    }
                }
                
                if(!previousEquipmentQty.isEmpty()) {
                     for (Integer key : previousEquipmentQty.keySet()) {
                         int delQty             = previousEquipmentQty.get(key);
                          stmt                  = transconn.prepareStatement("DELETE FROM packingSlipDetails WHERE equipment= ? AND packingSlip=?;");
                          stmt.setInt(1, key);
                          stmt.setInt(2, packingSlipId);
                          stmt.executeUpdate();
                          
                          stmt                  = transconn.prepareStatement(insertEquipmentDepletionDet);
                          stmt.setInt(1, depletionId);
                          stmt.setInt(2, key);
                          stmt.setInt(3, equipmentQty.get(key));
                          stmt.setInt(4, equipmentQty.get(key) + delQty);
                          stmt.executeUpdate();
                          
                          stmt                  = transconn.prepareStatement(updateEquipmentQuantity);
                          stmt.setInt(1, (delQty));
                          stmt.setInt(2, key);
                          logger.debug("DELETE:"+equipmentName.get(key)+":"+((equipmentQty.get(key))-(delQty*-1)));
                          stmt.executeUpdate();
                     }
                }

                newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 85%; align='right'>Total");
                newLocationEmail.append("</td><td /><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                newLocationEmail.append(nf.format(total));
                newLocationEmail.append("</td></tr></table>");

                newLocationEmail.append("</td></tr></table></td></tr>");

                String subjectLine          = "USBN Packing Slip - " + customerName + " : " + locationName;
                sendMail("USBN Packing Slip", "tech@usbeveragenet.com", "packingslip@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", newLocationEmail, false);

                stmt                       = transconn.prepareStatement(updateTotal);
                stmt.setDouble(1,total);
                stmt.setInt(2, packingSlipId);
                stmt.executeUpdate();
                logger.debug("Total:"+total);
            }
        } catch (Exception me) {
            logger.dbError("Cannot create packing slip: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void sendPackingSlipEmail(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "id");        

        PreparedStatement stmt              = null;
        ResultSet rs                        = null,rsEquipment = null;

        String selectPackingSlip            = "SELECT BC.Customer_Name,BL.location_name,location_contact,location_street,"
                                            + "  CONCAT(location_city,' ',location_state,'-',location_zip),location_ph,a.name,a.addrStreet, CONCAT(a.addrCity,' ', a.addrState,'-', a.addrZip),pS.customerContact, orderDate "
                                            + " FROM packingSlip pS LEFT JOIN BOSS_Location BL ON BL.id=pS.location LEFT JOIN BOSS_Customer BC ON BC.id = BL.customer_id LEFT JOIN  locationAccountMap aM ON aM.location=BL.id "
                                            + " LEFT JOIN accounts a ON a.id=aM.account  WHERE pS.id= ?";            
        String selectEquipmentQty           = "SELECT pSD.equipment,e.name,pSD.quantity,e.price FROM packingSlipDetails pSD LEFT JOIN equipment e ON e.id=pSD.equipment  WHERE packingSlip=?;";

       
        double total                        = 0 ;

        try {

            stmt                            = transconn.prepareStatement(selectPackingSlip);            
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                String customerName         = rs.getString(1);
                String locationName         = rs.getString(2);
                String locContact           = HandlerUtils.nullToEmpty(rs.getString(3));
                String locAddr1             = HandlerUtils.nullToEmpty(rs.getString(4));
                String locAddr2             = HandlerUtils.nullToEmpty(rs.getString(5));
                String locPhone             = HandlerUtils.nullToEmpty(rs.getString(6));
                String billContact          = HandlerUtils.nullToEmpty(rs.getString(7));
                String billAddr1            = HandlerUtils.nullToEmpty(rs.getString(8));
                String billAddr2            = HandlerUtils.nullToEmpty(rs.getString(9));
                String customerContact      = HandlerUtils.nullToEmpty(rs.getString(10));
                String orderDate            = HandlerUtils.nullToEmpty(rs.getString(11));
                
                
                StringBuilder newLocationEmail
                                            = new StringBuilder();
                newLocationEmail.append("<tr><td><table border=1 style='border: thin solid Black;'>");
                newLocationEmail.append("<tr><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' rowspan='4' valign='top' >Bill To:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(billContact);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' rowspan='4' valign='top' >Ship To:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(locContact);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locationName);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locAddr1);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(billAddr1);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locAddr2);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(billAddr2);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px;' colspan='2' valign='top'>");
                newLocationEmail.append(locPhone);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td style='height: 20px; width: 15%;' valign='top' >Order Date:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(orderDate);
                newLocationEmail.append("</td>");
                newLocationEmail.append("<td style='height: 20px; width: 15%;' valign='top' >Customer Contact:</td>");
                newLocationEmail.append("<td style='height: 20px; width: 30%;' colspan='2' valign='top'>");
                newLocationEmail.append(customerContact);
                newLocationEmail.append("</td></tr>");
                newLocationEmail.append("<tr><td colspan='6' align='center'><table style='border-style: solid; border-width: thin' width='100%'>");
                newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%; background-color: #C0C0C0;'>Item Description</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%; background-color: #C0C0C0;' >Quantity</td>");
                newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%; background-color: #C0C0C0;' >Price</td></tr>");

                NumberFormat nf             = NumberFormat.getCurrencyInstance();
                stmt                        = transconn.prepareStatement(selectEquipmentQty);                
                stmt.setInt(1, id);
                rsEquipment                 = stmt.executeQuery();
                while (rsEquipment.next()) {                    
                    int equipmentId         = rsEquipment.getInt(1);
                    String equipmentName    = rsEquipment.getString(2);
                    int quantity            = rsEquipment.getInt(3);                   
                    double prices           = rsEquipment.getDouble(4);
                   
                    newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 70%;'>" +  equipmentName + "</td>");
                    newLocationEmail.append("<td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                    newLocationEmail.append(quantity);
                    newLocationEmail.append("</td><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                    newLocationEmail.append(nf.format(prices * Integer.valueOf(quantity)));
                    total                   += (prices * Integer.valueOf(quantity));
                    newLocationEmail.append("</td></tr>");
                }
               
                newLocationEmail.append("<tr align='center'><td style='height: 20px; width: 85%; align='right'>Total");
                newLocationEmail.append("</td><td /><td style='border-right-style: solid; border-right-width: thin; height: 20px; width: 15%;' >");
                newLocationEmail.append(nf.format(total));
                newLocationEmail.append("</td></tr></table>");
                newLocationEmail.append("</td></tr></table></td></tr>");

                String subjectLine          = "USBN Packing Slip - " + customerName + " : " + locationName;
                sendMail("USBN Packing Slip", "tech@usbeveragenet.com", "packingslip@usbeveragenet.com", "support@usbeveragenet.com", subjectLine, "sendMail", newLocationEmail, false);
                toAppend.addElement("status").addText("Email Sent Successfully");
            }
        } catch (Exception me) {
            logger.dbError("Cannot create packing slip: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getBBTV(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int location                        = HandlerUtils.getRequiredInteger(toHandle, "locationId");        
        
        String selectBBTV                   = "SELECT id,name,emac,wmac,ipAddress,version,lastPing FROM bbtvUserMac WHERE location = ?;";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        boolean avail                       = false;
        
        try {
            stmt                            = transconn.prepareStatement(selectBBTV);
            stmt.setInt(1,location);
            rs                              = stmt.executeQuery();
            while(rs.next()) {
                Element bbtvEl                = toAppend.addElement("bbtv");
                bbtvEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                bbtvEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                bbtvEl.addElement("emac").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                bbtvEl.addElement("wmac").addText(HandlerUtils.nullToEmpty(rs.getString(4)));
                bbtvEl.addElement("ipAddress").addText(HandlerUtils.nullToEmpty(rs.getString(5)));
                bbtvEl.addElement("version").addText(HandlerUtils.nullToEmpty(rs.getString(6)));
                bbtvEl.addElement("lastPing").addText(HandlerUtils.nullToEmpty(rs.getString(7)));
                avail                       = true;
                
            }
            
            if(!avail) {
                Element bbtvEl                = toAppend.addElement("bbtv");
                bbtvEl.addElement("id").addText(String.valueOf(0));
                bbtvEl.addElement("name").addText(HandlerUtils.nullToEmpty("0"));
            }
        } catch (Exception me) {
            logger.dbError("Cannot create paramater file: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }

    
    private void addBBTV(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);        
        int location                        = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        String name                         = HandlerUtils.getOptionalString(toHandle, "name");
        String version                      = HandlerUtils.getOptionalString(toHandle, "version");
        String emac                         = HandlerUtils.getOptionalString(toHandle, "emac");
        String wmac                         = HandlerUtils.getOptionalString(toHandle, "wmac");
        String ipAddress                    = HandlerUtils.getOptionalString(toHandle, "ipAddress");
        
        int tile                            = 0, template = 0;
        
       
        
        String insertBBTV                   = "INSERT INTO bbtvUserMac (name,location,emac,wmac,ipAddress,version,tile,template) VALUES (?,?,?,?,?,?,?,?);";        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        if(name==null || name.equals("")){
            name                            = "Unknown BBTV";
        }
        if(emac==null || emac.equals("")){
            emac                            = "00.00.00.00.00.00";
        }
        if(wmac==null || wmac.equals("")){
            wmac                            = "00.00.00.00.00.00";
        }
        if(ipAddress==null || ipAddress.equals("")){
            ipAddress                       = "0.0.0.0";
        }
        try {
            stmt                            = transconn.prepareStatement("SELECT tile,template FROM bbtvUserMac WHERE location= ? AND admin=0 ORDER BY lastPing DESC LIMIT 1; ");
            stmt.setInt(1,location);
            rs                              = stmt.executeQuery();
            if(rs.next()) {
                tile                        = rs.getInt(1);
                template                    = rs.getInt(2);
            }
            
            stmt                            = transconn.prepareStatement(insertBBTV);
            stmt.setString(1, name);
            stmt.setInt(2,location);
            stmt.setString(3,emac );
            stmt.setString(4, wmac);
            stmt.setString(5, ipAddress);
            stmt.setString(6, HandlerUtils.nullToEmpty(version));
            stmt.setInt(7,tile);
            stmt.setInt(8,template);
            stmt.executeUpdate();
        
        } catch (Exception me) {
            logger.dbError("Cannot create BBTV: " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void updateBBTV(Element toHandle, Element toAppend) throws HandlerException {
        int locationId                      = HandlerUtils.getOptionalInteger(toHandle, "locationId");        
        int callerId                        = getCallerId(toHandle);
        
        String updateBBTV                   = "UPDATE  bbtvUserMac SET name = ?,emac = ?,wmac= ?,ipAddress = ?,version = ? WHERE id= ?;";

        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            Iterator bbtvs                  = toHandle.elementIterator("bbtv");
            while (bbtvs.hasNext()) {                
                Element bbtv                = (Element) bbtvs.next();
                int id                      = HandlerUtils.getRequiredInteger(bbtv, "id");
                String name                 = HandlerUtils.getOptionalString(bbtv, "name");
                String version              = HandlerUtils.getOptionalString(bbtv, "version");
                String emac                 = HandlerUtils.getOptionalString(bbtv, "emac");
                String wmac                 = HandlerUtils.getOptionalString(bbtv, "wmac");
                String ipAddress            = HandlerUtils.getOptionalString(bbtv, "ipAddress");
                if(name==null || name.equals("")){
                    name                    = "Unknown BBTV";
                }
                if(emac==null || emac.equals("")){
                    emac                    = "00.00.00.00.00.00";
                }
                if(wmac==null || wmac.equals("")){
                    wmac                    = "00.00.00.00.00.00";
                }
                if(ipAddress==null || ipAddress.equals("")){
                    ipAddress               = "0.0.0.0";
                }
                if(id > 0) {
                    stmt                    = transconn.prepareStatement(updateBBTV);
                    stmt.setString(1, name);                
                    stmt.setString(2,emac );
                    stmt.setString(3, wmac);
                    stmt.setString(4, ipAddress);
                    stmt.setString(5, HandlerUtils.nullToEmpty(version));
                    stmt.setInt(6,id);
                    stmt.executeUpdate();
                }

               
                String logMessage           = "Updating BBTV: '" + name + "'";
                logger.portalDetail(callerId, "updateBBTV", locationId, "bbtv", id, logMessage, transconn);
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
        }
    }

    
    
    private void provisionBBTV(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");
        boolean reProvision                 = HandlerUtils.getOptionalBoolean(toHandle, "reProvision");
        
        String selectBBTV                   = "SELECT id FROM bbtvUserMac WHERE id=?;";
        String checkProvision               = "SELECT id FROM bbtvUserMac WHERE provision=1;";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;        
        try {
            stmt                            = transconn.prepareStatement(checkProvision);
            rs                              = stmt.executeQuery();
            if(rs.next()) {
                stmt                            = transconn.prepareStatement("UPDATE bbtvUserMac SET provision = 0 WHERE provision = 1 ");                
                stmt.executeUpdate();
            }
            stmt                            = transconn.prepareStatement(selectBBTV);
            stmt.setInt(1, id);
            rs                              = stmt.executeQuery();
            if(rs.next()) {
                stmt                            = transconn.prepareStatement("UPDATE bbtvUserMac SET provision = 1 WHERE id= ? ");
                stmt.setInt(1, id);
                stmt.executeUpdate();
            }
        
        } catch (Exception me) {
            logger.dbError("ERROR : " + me.toString());
        } finally {
            close(rs);
            close(stmt);
        }
    }
    
    
    private void getBevManagerMobileAppReport(Element toHandle, Element toAppend) throws HandlerException {
           
           DateParameter validatedStartDate = null;
           DateParameter validatedEndDate = null;
           ReportType reportType               = ReportType.instanceOf("week");
           String reportTypeString             = HandlerUtils.getOptionalString(toHandle, "reportType");
        if (null != reportTypeString) {
            reportType                      = ReportType.instanceOf(HandlerUtils.getOptionalString(toHandle, "reportType"));
            if(HandlerUtils.getOptionalString(toHandle, "reportType").equals("SixMonth")) {
                reportType                  = ReportType.instanceOf("halfyearly");
                validatedStartDate    = new DateParameter(reportType.toStartDate());
                validatedEndDate      = new DateParameter(reportType.toEndDate());
            }else if(HandlerUtils.getOptionalString(toHandle, "reportType").equals("Custom")) {
                String start                = HandlerUtils.getRequiredString(toHandle, "startDate");
                String end                  = HandlerUtils.getRequiredString(toHandle, "endDate");
                validatedStartDate    = new DateParameter(start);
                validatedEndDate      = new DateParameter(end);
            } else {
                validatedStartDate    = new DateParameter(reportType.toStartDate());
                validatedEndDate      = new DateParameter(reportType.toEndDate());
                
            }
           
        }
        int locationId                      = HandlerUtils.getOptionalInteger(toHandle, "locationId");

        boolean newDownloads                = HandlerUtils.getOptionalBoolean(toHandle, "newDownloads");
        boolean userActivity                = HandlerUtils.getOptionalBoolean(toHandle, "userActivity");
        boolean report                      = HandlerUtils.getOptionalBoolean(toHandle, "reportAccess");
        boolean line                        = HandlerUtils.getOptionalBoolean(toHandle, "lineAccess");
        boolean cleaning                    = HandlerUtils.getOptionalBoolean(toHandle, "lineCleaning");
        
        boolean chart                       = HandlerUtils.getOptionalBoolean(toHandle, "chart");  

        try {
            if (newDownloads) {
                getMobileAppData( locationId,validatedStartDate.toString(),validatedEndDate.toString(),chart,toAppend,1);
            } else if(userActivity) {
                getMobileAppData( locationId,validatedStartDate.toString(),validatedEndDate.toString(),chart,toAppend,2);
            } else if(report) {
                getMobileAppData( locationId,validatedStartDate.toString(),validatedEndDate.toString(),chart,toAppend,3);
            } else if(line) {
                getMobileAppData( locationId,validatedStartDate.toString(),validatedEndDate.toString(),chart,toAppend,4);
            } else if(cleaning) {
                getMobileAppData( locationId,validatedStartDate.toString(),validatedEndDate.toString(),chart,toAppend,5);
            } 
            toAppend.addElement("startDate").addText(validatedStartDate.toString());
            toAppend.addElement("endDate").addText(validatedEndDate.toString());

        } catch (Exception e) {
            logger.debug("Dashboard error: " + e.getMessage());
            throw new HandlerException(e);
        } finally {
           
        }
    }
    
    
    private void getMobileAppData(  int locationId,String start,String end,boolean chart,  Element toAppend,int type) throws HandlerException {
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetails = null, productRs =null;
        Calendar currentDate                = null;
        DateParameter validatedStartDate    = new DateParameter(start);
        DateParameter validatedEndDate      = new DateParameter(end);
        String locationCondition1           = " ";
        if(locationId > 0) {
            locationCondition1              = " and uH.location = "+String.valueOf(locationId);
        }
        
        try {
            String selectNewDownloadsChart  = "SELECT DATE(registeredTime), count(id) FROM bevMobileUser b WHERE registeredTime  between ? AND ? GROUP BY DATE(registeredTime);";
            String selectNewDownloads       = "SELECT c.name, u.name, registeredTime FROM bevMobileUser b LEFT JOIN user u ON u.id = b.user " +
                                            " LEFT JOIN customer c ON c.id = u.customer WHERE u.customer > 0 AND registeredTime BETWEEN ? AND ? ORDER BY c.name;";
            String selectUserActivity       = "SELECT u.name, u.customer, IFNULL(c.name, 'Super Admin'), t.description, uH.description, uH.timeStamp FROM userHistoryMobile uH LEFT JOIN task t ON t.id = uH.task"
                                            + " LEFT JOIN user u ON u.id = uH.user LEFT JOIN customer c ON c.id = u.customer WHERE t.id=? AND uH.timestamp BETWEEN ? AND ? " + locationCondition1 + " ORDER BY c.name, u.name, uH.timestamp DESC;";
            String selectAccessGraph        = "SELECT DATE(uH.timestamp),count(uH.id) FROM userHistoryMobile  uH  WHERE uH.task=? AND timestamp between ? AND ? "+locationCondition1+" group by DATE(uH.timestamp);";
            String selectMaxLocAccess       = "SELECT 1, CONCAT(l.boardName,'-', l.name), count(uH.id) AS ucount FROM userHistoryMobile uH LEFT JOIN task t ON t.id = uH.task"
                                            + " LEFT JOIN user u ON u.id = uH.user LEFT JOIN location l ON l.id = uH.location WHERE  t.id=? AND uH.timestamp BETWEEN ? AND ?  GROUP BY uH.location ORDER BY ucount DESC limit 3;";
            String selectMaxUserAccess      = "SELECT 2, u.name, count(uH.id) AS ucount FROM userHistoryMobile uH LEFT JOIN task t ON t.id = uH.task"
                                            + " LEFT JOIN user u ON u.id = uH.user WHERE  t.id=? AND uH.timestamp BETWEEN ? AND ? "+locationCondition1+"  GROUP BY uH.user  ORDER BY ucount  DESC limit 3;";
            
            switch (type) {
                case 1:
                    if(chart){
                        stmt                = transconn.prepareStatement(selectNewDownloadsChart);
                         stmt.setString(1, validatedStartDate.toString());
                         stmt.setString(2, validatedEndDate.toString());
                         rs                 = stmt.executeQuery();
                         while(rs.next()) {
                             Element mobileChartEl
                                            = toAppend.addElement("chart");
                             mobileChartEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                             mobileChartEl.addElement("count").addText(String.valueOf(rs.getInt(2)));
                        }
                    } else {
                        stmt                = transconn.prepareStatement(selectNewDownloads);
                        stmt.setString(1, validatedStartDate.toString());
                        stmt.setString(2, validatedEndDate.toString());
                        rs                  = stmt.executeQuery();
                        while(rs.next()) {
                            Element mobileChartEl
                                            = toAppend.addElement("newDownloads");
                            mobileChartEl.addElement("customer").addText(HandlerUtils.nullToEmpty(rs.getString(1)));
                            mobileChartEl.addElement("user").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                            mobileChartEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                        }
                    }
                    break;
                case 2:
                     if(chart){
                         stmt                    = transconn.prepareStatement(selectAccessGraph);
                         stmt.setInt(1,80);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element mobileLikeEl  = toAppend.addElement("chart");
                             mobileLikeEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             mobileLikeEl.addElement("count").addText(String.valueOf(rs.getInt(2)));  
                         }
                     } else {
                         if(locationId <1){
                             stmt           = transconn.prepareStatement(selectMaxLocAccess);
                             stmt.setInt(1,80);
                             stmt.setString(2, validatedStartDate.toString());
                             stmt.setString(3, validatedEndDate.toString());
                             rs             = stmt.executeQuery();
                             while(rs.next()){
                                 Element socialEl            = toAppend.addElement("topAccess");
                                 socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                                 socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                                 socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                             }
                         }
                         stmt                            = transconn.prepareStatement(selectMaxUserAccess);
                         stmt.setInt(1,80);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                              = stmt.executeQuery();
                         while(rs.next()){
                             Element socialEl            = toAppend.addElement("topAccess");
                             socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                             socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                             socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                         }
                         
                         stmt                    = transconn.prepareStatement(selectUserActivity);
                         stmt.setInt(1,80);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element userActivityEl  = toAppend.addElement("userActivity");
                             userActivityEl.addElement("user").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             userActivityEl.addElement("locationId").addText(String.valueOf(rs.getInt(2)));
                             userActivityEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                             userActivityEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(4))); 
                             userActivityEl.addElement("time").addText(HandlerUtils.nullToEmpty(rs.getString(6)));  
                         }
                     }                    
                    break;
                    
                    
                    case 3:
                     if(chart){
                         stmt                    = transconn.prepareStatement(selectAccessGraph);
                         stmt.setInt(1,81);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element mobileLikeEl  = toAppend.addElement("chart");
                             mobileLikeEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             mobileLikeEl.addElement("count").addText(String.valueOf(rs.getInt(2)));  
                         }
                     } else {
                         if(locationId <1){
                             stmt           = transconn.prepareStatement(selectMaxLocAccess);
                             stmt.setInt(1,81);
                             stmt.setString(2, validatedStartDate.toString());
                             stmt.setString(3, validatedEndDate.toString());
                             rs             = stmt.executeQuery();
                             while(rs.next()){
                                 Element socialEl            = toAppend.addElement("topAccess");
                                 socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                                 socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                                 socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                             }
                         }
                         
                         stmt                            = transconn.prepareStatement(selectMaxUserAccess);
                         stmt.setInt(1,81);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                              = stmt.executeQuery();
                         while(rs.next()){
                             Element socialEl            = toAppend.addElement("topAccess");
                             socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                             socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                             socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                         }
                         
                         stmt                    = transconn.prepareStatement(selectUserActivity);
                         stmt.setInt(1,81);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element userActivityEl  = toAppend.addElement("userActivity");
                             userActivityEl.addElement("user").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             userActivityEl.addElement("locationId").addText(String.valueOf(rs.getInt(2)));
                             userActivityEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                             userActivityEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(4))); 
                             userActivityEl.addElement("time").addText(HandlerUtils.nullToEmpty(rs.getString(6)));  
                         }
                     }                    
                    break;
                    
                    case 4:
                     if(chart){
                         stmt                    = transconn.prepareStatement(selectAccessGraph);
                         stmt.setInt(1,82);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element mobileLikeEl  = toAppend.addElement("chart");
                             mobileLikeEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             mobileLikeEl.addElement("count").addText(String.valueOf(rs.getInt(2)));  
                         }
                     } else {
                         if(locationId <1){
                             stmt           = transconn.prepareStatement(selectMaxLocAccess);
                             stmt.setInt(1,82);
                             stmt.setString(2, validatedStartDate.toString());
                             stmt.setString(3, validatedEndDate.toString());
                             rs             = stmt.executeQuery();
                             while(rs.next()){
                                 Element socialEl            = toAppend.addElement("topAccess");
                                 socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                                 socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                                 socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                             }
                         }
                         stmt                            = transconn.prepareStatement(selectMaxUserAccess);
                         stmt.setInt(1,82);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                              = stmt.executeQuery();
                         while(rs.next()){
                             Element socialEl            = toAppend.addElement("topAccess");
                             socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                             socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                             socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                         }
                         
                         stmt                    = transconn.prepareStatement(selectUserActivity);
                         stmt.setInt(1,82);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element userActivityEl  = toAppend.addElement("userActivity");
                             userActivityEl.addElement("user").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             userActivityEl.addElement("locationId").addText(String.valueOf(rs.getInt(2)));
                             userActivityEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                             userActivityEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(4))); 
                             userActivityEl.addElement("time").addText(HandlerUtils.nullToEmpty(rs.getString(6)));  
                         }
                     }                    
                    break;
                    
                    case 5:
                     if(chart){
                         stmt                    = transconn.prepareStatement(selectAccessGraph);
                         stmt.setInt(1,83);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element mobileLikeEl  = toAppend.addElement("chart");
                             mobileLikeEl.addElement("date").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             mobileLikeEl.addElement("count").addText(String.valueOf(rs.getInt(2)));  
                         }
                     } else {
                         if(locationId <1){
                             stmt           = transconn.prepareStatement(selectMaxLocAccess);
                             stmt.setInt(1,83);
                             stmt.setString(2, validatedStartDate.toString());
                             stmt.setString(3, validatedEndDate.toString());
                             rs             = stmt.executeQuery();
                             while(rs.next()){
                                 Element socialEl            = toAppend.addElement("topAccess");
                                 socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                                 socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                                 socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                             }
                         }
                         stmt                            = transconn.prepareStatement(selectMaxUserAccess);
                         stmt.setInt(1,83);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                              = stmt.executeQuery();
                         while(rs.next()){
                             Element socialEl            = toAppend.addElement("topAccess");
                             socialEl.addElement("type").addText(String.valueOf(rs.getInt(1)));
                             socialEl.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                             socialEl.addElement("count").addText(String.valueOf(rs.getInt(3)));                           
                         }
                         
                         stmt                    = transconn.prepareStatement(selectUserActivity);
                         stmt.setInt(1,83);
                         stmt.setString(2, validatedStartDate.toString());
                         stmt.setString(3, validatedEndDate.toString());
                         rs                      = stmt.executeQuery();
                         while(rs.next()) {
                             Element userActivityEl  = toAppend.addElement("userActivity");
                             userActivityEl.addElement("user").addText(HandlerUtils.nullToEmpty(rs.getString(1)));                    
                             userActivityEl.addElement("locationId").addText(String.valueOf(rs.getInt(2)));
                             userActivityEl.addElement("locationName").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
                             userActivityEl.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(4))); 
                             userActivityEl.addElement("time").addText(HandlerUtils.nullToEmpty(rs.getString(6)));  
                         }
                     }                    
                    break;
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        }  catch(Exception e) {
            logger.debug(e.getMessage());   
        }finally {  
            close(rsDetails);
            close(rs);
            close(stmt);
            
           
        }
    }
    
    
    private void upgradeBevBox(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int locationId                      = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, systemRs = null, lineRs = null;
        logger.debug("LocationId:"+locationId);
        
        try {
            stmt                            = transconn.prepareStatement("SELECT id FROM bevBox WHERE location=? AND version < 5.0 ORDER BY startSystem;");
            stmt.setInt(1, locationId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                int bevBox                  = rs.getInt(1);
                
                //Step 1- Change  Current Version 
                stmt                        = transconn.prepareStatement("UPDATE bevBox SET version = 5.0, totalSystems = 1, systemInterval = 1 WHERE id = ?;");
                stmt.setInt(1,bevBox);
                stmt.executeUpdate();
                
                //Step 2- Change System Line Count Which is having systemId as 0 and lineCount as 16 
                stmt                        = transconn.prepareStatement("SELECT id, systemId FROM system WHERE location=? and totalLines=16 AND systemId = 0 ORDER BY systemId;");
                stmt.setInt(1, locationId);
                systemRs                    = stmt.executeQuery();
                if(systemRs.next()) {
                    int systemId            = systemRs.getInt(1);
                    logger.debug("System Id:" + systemId);

                    stmt                    = transconn.prepareStatement("UPDATE system SET totalLines = 40 WHERE id = ?;");
                    stmt.setInt(1,systemId);
                    stmt.executeUpdate();
                   
                   //Step 3- Extend the lineIndex
                   stmt                     = transconn.prepareStatement("SELECT bar, lineIndex FROM line WHERE system=? ORDER BY lineIndex DESC;");
                   stmt.setInt(1, systemId);                   
                   lineRs                   = stmt.executeQuery();
                   if (lineRs.next()) {
                       int barId            = lineRs.getInt(1);
                       int startLineIndex   = lineRs.getInt(2) + 1;
                       logger.debug("bar Id:" + barId);
                       
                       String insertLine    = "INSERT INTO line (lineIndex,system,bar) VALUES ("+startLineIndex+","+systemId+","+barId+")";
                       for(int i = startLineIndex + 1; i<40; i++) {
                           insertLine       += ",("+i+","+systemId+","+barId+")";
                       }
                       
                       stmt                 = transconn.prepareStatement(insertLine);
                       stmt.executeUpdate();
                       
                       //Step 4- Calibration the System Line 0 to 15
                       String insertCalibration            
                                            = " INSERT INTO calibration (location,system,line,value) VALUES ("+locationId+","+systemId+",0,600)";
                       for(int i=1;i<40;i++) {
                           insertCalibration
                                            += ",("+locationId+","+systemId+","+i+",600)";
                       }
                       stmt                 = transconn.prepareStatement(insertCalibration);
                       stmt.executeUpdate();
                   }
                }
            }
        } catch (Exception me) {
            logger.dbError("Cannot create paramater file: " + me.toString());
        } finally {
            close(lineRs);
            close(systemRs);
            close(rs);            
            close(stmt);
        }
    }
    
    
     private void getBOSSUnApprovedProducts(Element toHandle, Element toAppend) throws HandlerException {
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetails = null;

        String selectMap                    = "SELECT pSM.product, pS.name FROM productSetMap pSM LEFT JOIN productSet pS ON pS.id = pSM.productSet " +
                                            " WHERE pS.productSetType = ?;";
        String selectProduct                = "SELECT DISTINCT p.id, p.name, p.category, p.segment, p.isActive, pD.boardName, pD.abv, pD.category, pD.origin,  pD.seasonality, p.dateAdded "
                                            + " FROM product p LEFT JOIN productDescription pD ON pD.product = p.id  "
                                            + " WHERE p.approved = 0 ORDER BY p.dateAdded DESC;";
        String selectProductSet             = " SELECT pS.id, pS.name,(SELECT COUNT(product) FROM productSetMap WHERE productSet=pS.id),pS.productSetType  FROM productSet pS WHERE  pS.approved = 0 ORDER BY pS.name;";
        String selectUserHistory            = "SELECT uH.user,u.name FROM userHistory uH  "
                                            + " LEFT JOIN user u ON u.id= uH.user WHERE uH.target=? AND uH.description LIKE '%Added Product%' AND targetType='product';";
        
        
        try {

            HashMap<Integer, String> breweryMap
                                            = new HashMap<Integer, String>();
            HashMap<Integer, String> styleMap
                                            = new HashMap<Integer, String>();

            stmt                            = transconn.prepareStatement(selectMap);
            stmt.setInt(1, 7);
            rs                              = stmt.executeQuery();
            while(rs.next()){
                breweryMap.put(rs.getInt(1), rs.getString(2));
            }

            stmt                            = transconn.prepareStatement(selectMap);
            stmt.setInt(1, 9);
            rs                              = stmt.executeQuery();
            while(rs.next()){
                styleMap.put(rs.getInt(1), rs.getString(2));
            }

            stmt                            = transconn.prepareStatement(selectProduct);            
            rs                              = stmt.executeQuery();
            while(rs.next()){
                int colCount                    = 1;
                Element ProductE1               = toAppend.addElement("product");
                ProductE1.addElement("productId").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));            
                ProductE1.addElement("category").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("segment").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("isActive").addText(String.valueOf(rs.getBoolean(colCount++)));
                ProductE1.addElement("boardName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                ProductE1.addElement("abv").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                ProductE1.addElement("bbtvCategory").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("origin").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));            
                ProductE1.addElement("seasonality").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                ProductE1.addElement("brewery").addText(HandlerUtils.nullToEmpty(breweryMap.get(rs.getInt(1))));
                ProductE1.addElement("style").addText(HandlerUtils.nullToEmpty(styleMap.get(rs.getInt(1))));
                ProductE1.addElement("dateAdded").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                //ProductE1.addElement("userId").addText(String.valueOf(rs.getInt(colCount++)));
                //ProductE1.addElement("userName").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                //ProductE1.addElement("comment").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                
                /*stmt                            = transconn.prepareStatement(selectUserHistory);            
                stmt.setInt(1,rs.getInt(1));
               // logger.debug("Product:"+rs.getInt(1)+ " "+rs.getString(2));
                rsDetails                       = stmt.executeQuery();
                if(rsDetails.next()){
                    ProductE1.addElement("userId").addText(String.valueOf(rsDetails.getInt(1)));
                    ProductE1.addElement("userName").addText(HandlerUtils.nullToEmpty(rsDetails.getString(2)));
                } else {
                    ProductE1.addElement("userId").addText(String.valueOf(0));
                    ProductE1.addElement("userName").addText("");
                }*/
                
            }
            
            stmt                            = transconn.prepareStatement(selectProductSet);            
            rs                              = stmt.executeQuery();
            while(rs.next()){
                int colCount                    = 1;
                Element ProductE1               = toAppend.addElement("productSet");
                ProductE1.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));                            
                ProductE1.addElement("count").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("productSetType").addText(String.valueOf(rs.getInt(colCount++)));
            }
        
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
     
      private void getUnApprovedProductDetails(Element toHandle, Element toAppend) throws HandlerException {

        int productId                       = HandlerUtils.getOptionalInteger(toHandle, "productId");        
        String productName                     = HandlerUtils.nullToEmpty(HandlerUtils.getOptionalString(toHandle, "productName"));        
        int type                            = HandlerUtils.getOptionalInteger(toHandle, "type");        
        
        
        String selectUser                   = "SELECT uH.user,concat(u.name, IFNULL(concat (' - ',c.name),''), IFNULL(concat (' - ',l.name),''))  FROM userHistory uH  LEFT JOIN user u ON u.id= uH.user  "
                                            + " LEFT JOIN customer c ON c.id= u.customer LEFT JOIN location l ON l.id=uH.location "
                                            + " WHERE uH.target=? AND uH.description LIKE '%Added Product %'  AND targetType='product' ;";
        //AND targetType='product'
        String selectLineCount              ="SELECT count(id)+(SELECT count(id) FROM comingSoonProducts WHERE product=?)  FROM line WHERE product=?;";
        String selectRunning                ="SELECT count(id)+(SELECT count(id) FROM comingSoonProducts WHERE product=?) FROM line WHERE product=? AND status='RUNNING'; ";
        String selectComment                = "SELECT updateTime,comment, u.name FROM productComment p LEFT JOIN user u ON u.id=p.user WHERE product = ? ORDER BY p.id DESC";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        try {
            stmt                            = transconn.prepareStatement(selectUser);            
                stmt.setInt(1,productId);
               // logger.debug("Product:"+rs.getInt(1)+ " "+rs.getString(2));
                rs                              = stmt.executeQuery();
                if(rs.next()){
                    toAppend.addElement("userId").addText(String.valueOf(rs.getInt(1)));
                    toAppend.addElement("userName").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                } else {
                    toAppend.addElement("userId").addText(String.valueOf(0));
                    toAppend.addElement("userName").addText("Unknown");
                }
            
            if(productId > 0 && type==1){
                stmt                            = transconn.prepareStatement(selectLineCount);
                stmt.setInt(1, productId);
                stmt.setInt(2, productId);
                rs                              = stmt.executeQuery();
                if(rs.next()){
                    toAppend.addElement("lineCount").addText(String.valueOf(rs.getInt(1)));
                }
                
                stmt                            = transconn.prepareStatement(selectRunning);
                stmt.setInt(1, productId);
                stmt.setInt(2, productId);
                rs                              = stmt.executeQuery();
                if(rs.next()){
                    toAppend.addElement("runningCount").addText(String.valueOf(rs.getInt(1)));
                }
                
                
                String comment              = "";
                stmt                        = transconn.prepareStatement(selectComment);            
                stmt.setInt(1,productId);
               // logger.debug("Product:"+rs.getInt(1)+ " "+rs.getString(2));
                rs                          = stmt.executeQuery();
                while(rs.next()){                  
                    if(!comment.equals("")){
                        comment             += "-#-";
                    }
                    comment                 +=HandlerUtils.nullToEmpty(rs.getString(1)) +"-"+ HandlerUtils.nullToEmpty(rs.getString(3))+": " +HandlerUtils.nullToEmpty(rs.getString(2));
                }
                toAppend.addElement("comment").addText(comment);
                
            } else {
                String comment          = "We need clarification about the beer you've entered and unless you don't get back to us in the next couple of days - We'll remove it out of the system";
                toAppend.addElement("comment").addText(comment);
                    
                }
        
        } catch (Exception me) {
            logger.dbError("Cannot send product clarification: " + me.toString());
        } finally {           
            close(rs);            
            close(stmt);
        }
        
        
    }
    
    
    private void sendProductClarification(Element toHandle, Element toAppend) throws HandlerException {

        int userId                          = HandlerUtils.getOptionalInteger(toHandle, "userId");
        String emailAddress                 = HandlerUtils.getOptionalString(toHandle, "email");
        String emailMessage                 = HandlerUtils.getOptionalString(toHandle, "message");
        String productName                  = HandlerUtils.nullToEmpty(HandlerUtils.getOptionalString(toHandle, "productName"));
        
        String getUserInfo                  = "SELECT name, email FROM user WHERE id = ?; ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;
        StringBuilder productInformation           = new StringBuilder();
        productInformation.append("<tr><td>"+emailMessage+"</td> </tr>");
        try {
        if(userId > 0){
            stmt                            = transconn.prepareStatement(getUserInfo);
            stmt.setInt(1, userId);
            rs                              = stmt.executeQuery();
            if (rs.next()) {
                    sendMail("Need clarification about the new beer (" +productName+")", "tech@usbeveragenet.com", rs.getString(2), "support@usbeveragenet.com", "Need clarification about the new beer (" +productName+")", "sendMail", productInformation, false);
                }
        }
        if(emailAddress!=null && !emailAddress.equals("")){
            sendMail("Need clarification about the new beer (" +productName+")", "tech@usbeveragenet.com", emailAddress, "support@usbeveragenet.com", "Need clarification about the new beer (" +productName+")", "sendMail", productInformation, false);
            
        }
        } catch (Exception me) {
            logger.dbError("Cannot send product clarification: " + me.toString());
        } finally {           
            close(rs);            
            close(stmt);
        }
        
        
    }
    
    
    private void addInstallationImage(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int location                        = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        String image                        = HandlerUtils.getRequiredString(toHandle, "image");
        String caption                      = HandlerUtils.getRequiredString(toHandle, "caption");
        

        PreparedStatement stmt              = null;
        
        String insertRequest                = " INSERT INTO installationImage (location, image,caption) " + 
                                            " VALUES ( ?, ?, ?); ";

        try {
            stmt                            = transconn.prepareStatement(insertRequest);
            stmt.setInt(1, location);
            stmt.setString(2, image);            
            stmt.setString(3, HandlerUtils.nullToEmpty(caption));
            stmt.executeUpdate();
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {            
            close(stmt);
        }
    }
    
    
    private void getInstallationImage(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);
        int location                        = HandlerUtils.getRequiredInteger(toHandle, "locationId");
        String selectImage                  = "SELECT id, image,caption FROM installationImage WHERE location = ?; ";
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        try {
            stmt                            = transconn.prepareStatement(selectImage);
            stmt.setInt(1, location);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                Element imgEl              = toAppend.addElement("installationImage");
                imgEl.addElement("id").addText(String.valueOf(rs.getInt(1)));
                imgEl.addElement("image").addText(HandlerUtils.nullToEmpty(rs.getString(2)));
                imgEl.addElement("caption").addText(HandlerUtils.nullToEmpty(rs.getString(3)));
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error in getInstallationImage: " + sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }
    }
    
    
    private void sendLocationUpdateEmail(Element toHandle, Element toAppend) throws HandlerException {

        
        String emailAddress                 = "customercare@usbeveragenet.com";
        //String emailAddress                 = "sganesh@usbeveragenet.com";
        //  
        String selectChanges               = "SELECT target, count(id),DATE_FORMAT(SUBDATE(DATE(now()), INTERVAL 1 DAY),\"%b'%d, %Y\") FROM userHistory uH WHERE task IN (58,57,60) AND  uH.timestamp BETWEEN  CONCAT (SUBDATE(DATE(now()), INTERVAL 1 DAY), ' 07:00:00') AND  CONCAT (DATE(now()),' 07:00:00')   GROUP by target;";
        String selectDetails               = "SELECT BL.id,BL.location_name,BL.POS_SystemType,BL.lineCount,BL.bbtvBoxCount,lAM.monthlyDiscount, lAM.setupDiscount, iC.harpagon_required  FROM BOSS_Location BL"
                                            + " LEFT JOIN Installation_Checklist iC ON iC.location_id=BL.id  LEFT JOIN locationAccountMap lAM  ON lAM.location=BL.id WHERE BL.id=?;";
        String checkLog                     = "SELECT POSSystem,lineCount,bbtvCount,monthlyDiscount,SetupDiscount,bevBoxCount FROM locationUpdateLog WHERE date BETWEEN  CONCAT (SUBDATE(DATE(now()), INTERVAL 1 DAY), ' 07:00:00') AND  CONCAT (DATE(now()),' 07:00:00')   AND location=?;";
        boolean canSend                     = false;        
        
        StringBuilder updateList            = new StringBuilder();        
        String subjectLine                  = "Location Changes from BOSS ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetails= null;
        String updateDate                   = "";
        try {  
           updateList.append("<tr><td><table width=\"100%\" border=\"1\">"
                   + "<tr><td>Location</td>"
                   + "<td>Monthly discount</td>"
                   + "<td>Setup discount</td>"
                   + "<td>Approx Line count</td>"
                   + "<td>No. of Bevbox required</td>"
                   + "<td>No. of flow meters </td>"
                   + "<td>POS System</td>"
                   + "<td>Beerboard Quantity</td>"
                   + "<td>Other Change</td></tr> ");
           
            stmt                            = transconn.prepareStatement(selectChanges);            
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                int locationId              = rs.getInt(1);
                int count                   = rs.getInt(2);
                updateDate                  = HandlerUtils.nullToEmpty(rs.getString(3));
                if(locationId > 0 && count > 0){
                    String prePOS           = "";
                    int preLineCount        = 0, preBBTV = 0, preBox= 0;
                    double preMDiscount     =0, preSDiscount = 0;
                    stmt                    = transconn.prepareStatement(checkLog);  
                    stmt.setInt(1,locationId);
                    rsDetails               = stmt.executeQuery();
                    boolean isChange        = false;
                    if(rsDetails.next()) {
                        prePOS              = HandlerUtils.nullToEmpty(rsDetails.getString(1));
                        preLineCount        = rsDetails.getInt(2);
                        preBBTV             = rsDetails.getInt(3);
                        preMDiscount        = rsDetails.getDouble(4);
                        preSDiscount        = rsDetails.getDouble(5);
                        preBox              = rsDetails.getInt(6);
                        isChange            = true;
                    }
                    
                   /* if(isChange && preLineCount>0){
                        preBox              = 1;
                        while((preLineCount-40)>0){
                            preLineCount    = preLineCount-40;
                            preBox++;
                        }            
                    }*/
                    
                    stmt                    = transconn.prepareStatement(selectDetails);  
                    stmt.setInt(1,locationId);
                    rsDetails               = stmt.executeQuery();
                    if(rsDetails.next()) {
                        canSend             = true;
                        int lineCount=rsDetails.getInt(4);
                        int bevBox	 = rsDetails.getInt(8);
                       /* while((lineCount-40)>0){
                            lineCount 	= lineCount-40;
                            bevBox++;
                        }     */                   
                        //logger.debug("bevBox:"+bevBox);
                        updateList.append("<tr><td>"+HandlerUtils.nullToEmpty(rsDetails.getString(2))+"</td>");
                        if((isChange && preMDiscount > 0) && preMDiscount!= rsDetails.getDouble(6)){
                            updateList.append("<td> <font color=\"RED\">"+HandlerUtils.nullToEmpty(rsDetails.getString(6))+"</font></td>");
                        } else {
                            updateList.append("<td>"+HandlerUtils.nullToEmpty(rsDetails.getString(6))+"</td>");
                        }
                        
                        if((isChange && preSDiscount > 0) && preSDiscount!= rsDetails.getDouble(7)){
                            updateList.append("<td> <font color=\"RED\">"+HandlerUtils.nullToEmpty(rsDetails.getString(7))+"</font></td>");
                        } else {
                            updateList.append("<td>"+HandlerUtils.nullToEmpty(rsDetails.getString(7))+"</td>");
                        }
                        if((isChange && preLineCount > 0) && preLineCount!= rsDetails.getInt(4)){
                            updateList.append("<td> <font color=\"RED\">"+HandlerUtils.nullToEmpty(rsDetails.getString(4))+"</font></td>");
                        } else {
                            updateList.append("<td>"+HandlerUtils.nullToEmpty(rsDetails.getString(4))+"</td>");
                        }
                        if((isChange && preBox > 0) && preBox!=bevBox){
                            updateList.append("<td><font color=\"RED\">"+bevBox+"</font></td>");
                        } else {
                            updateList.append("<td>"+bevBox+"</td>");
                        }
                        
                       if((isChange && preLineCount > 0) && preLineCount!= rsDetails.getInt(4)){
                            updateList.append("<td> <font color=\"RED\">"+HandlerUtils.nullToEmpty(rsDetails.getString(4))+"</font></td>");
                        } else {
                            updateList.append("<td>"+HandlerUtils.nullToEmpty(rsDetails.getString(4))+"</td>");
                        }
                        if((isChange && !prePOS .equals("")) && !prePOS.equals(HandlerUtils.nullToEmpty(rsDetails.getString(3)))){
                            updateList.append("<td> <font color=\"RED\">"+HandlerUtils.nullToEmpty(rsDetails.getString(3))+"</font></td>");
                        } else {
                            updateList.append("<td>"+HandlerUtils.nullToEmpty(rsDetails.getString(3))+"</td>");
                        }
                       
                       if((isChange && preBBTV > 0) && preBBTV!= rsDetails.getInt(5)){
                           updateList.append("<td><font color=\"RED\">"+HandlerUtils.nullToEmpty(rsDetails.getString(5))+"</font></td>");
                        } else {
                            updateList.append("<td>"+HandlerUtils.nullToEmpty(rsDetails.getString(5))+"</td>");
                        }
                       // updateList.append("</tr> ");
                      updateList.append("<td>yes</td></tr> ");
                       /* updateList.append("<tr style=font-size:small height=30><td align=\"center\" colspan=4><strong>A  Location "+HandlerUtils.nullToEmpty(rsDetails.getString(2))+" has been updated </strong></td></tr><tr style=height: 15px><td colspan=10></td></tr>"
                                        + "<tr style=font-size:small height=10px><td colspan=\"4\">&nbsp;</td></tr>"
                                        + "<tr style=font-size:small height=10px><td colspan=\"4\"> <table width=\"100%\" border=\"1\"><tr><td colspan=\"4\">"
                                        + "<p align=\"left\">Monthly discount</p></td></tr><tr style=font-size:small height=10px><td width=\"50%\"><p>Monthly discount</p></td><td width=\"50%\" align=\"center\" colspan=3>"+HandlerUtils.nullToEmpty(rsDetails.getString(6))+"</td></tr><tr style=font-size:small height=10px><td><p>Setup discount</p></td><td  align=\"center\" colspan=3>"+HandlerUtils.nullToEmpty(rsDetails.getString(7))+"</td></tr><tr style=font-size:small height=10px><td>Approx Line count</td><td align=\"center\" colspan=3>"+HandlerUtils.nullToEmpty(rsDetails.getString(4))+"</td> </tr>"
                                        + " <tr style=font-size:small height=10px><td colspan=\"4\">&nbsp;</td></tr><tr style=font-size:small height=10px><td colspan=\"4\"><div align=\"left\">Installation Checklist</div></td></tr><tr style=font-size:small height=10px><td><p>No. of Bevbox required</p></td> <td colspan=3>&nbsp;</td></tr><tr style=font-size:small height=10px>   <td>No. of flow meters </td><td align=\"center\" colspan=3>"+HandlerUtils.nullToEmpty(rsDetails.getString(4))+"</td></tr><tr style=font-size:small height=10px><td colspan=\"4\">&nbsp;</td></tr>"
                                        + " <tr style=font-size:small height=10px><td colspan=\"4\"><p align=\"left\">Location Info</p></td></tr><tr style=font-size:small height=10px><td>POS System: </td><td align=\"center\" colspan=3>"+HandlerUtils.nullToEmpty(rsDetails.getString(3))+"</td></tr><tr style=font-size:small height=10px><td>Beerboard Quantity</td><td align=\"center\" colspan=3>"+HandlerUtils.nullToEmpty(rsDetails.getString(5))+"</td></tr><tr style=font-size:small height=10px><td align=\"center\" colspan=\"4\">&nbsp;</td></tr><tr style=font-size:small height=10px>     <td colspan=\"4\">&nbsp;</td></tr>"
                                        + " <tr style=font-size:small height=10px><td>No of times this location got updated</td><td align=\"center\" colspan=3>10 </td></tr></table></td></tr>");*/
                        
                    }
                }
                
            }
             
            
            if(canSend){ 
                updateList.append("</table></td></tr>");
                sendMail("Location Changes for " +updateDate, " tech@usbeveragenet.com",emailAddress ,  "tech@usbeveragenet.com", subjectLine, "sendMail", updateList, false);
                
            }
            
         } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetails);
            close(rs);
            close(stmt);
        }
    }
    
    
    
     private void sendWeeklyTicketSummary(Element toHandle, Element toAppend) throws HandlerException {

        
        // String emailAddress              = "customercare@usbeveragenet.com";
        String emailAddress                 = "TroubleTicketUpdates@usbeveragenet.com";
        String selectTickets                = "SELECT u.name User, c.name Customer, l.name Location, t.open Date, tC.name, tP.description, t.notes Notes, " +
                                            " CONCAT(tL.date, ' : ', tL.notes) Updates FROM ticket t LEFT JOIN user u ON u.id = t.assignedTo " +
                                            " LEFT JOIN location l ON l.id = t.location LEFT JOIN customer c ON c.id = l.customer LEFT JOIN ticketCategory tC " +
                                            " ON tC.id = t.category LEFT JOIN ticketProblem tP ON tP.id = t.problem LEFT JOIN ticketLogs tL ON tL.ticket = t.id " +
                                            " WHERE t.close IS NULL GROUP BY t.id ORDER BY u.name, c.name, l.name, t.open; ";
        boolean canSend                     = false;        
        
        StringBuilder ticketList            = new StringBuilder();        
        String subjectLine                  = "Tickets summary from US Beverage NET, Inc. ";

        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetails= null;
        String updateDate                   = "";
        
        try {  
           ticketList.append("<tr><td><table width=\"100%\" border=\"1\"><tr>"
                   + "<td width=\"10%\">User</td><td width=\"10%\">Customer</td><td width=\"10%\">Location</td><td width=\"10%\">Date</td><td width=\"5%\">Category</td><td width=\"5%\">Problem</td>"
                   + "<td width=\"20%\">Notes</td><td width=\"15%\">Updates</td></tr> ");
           
            stmt                            = transconn.prepareStatement(selectTickets);            
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                canSend                     = true;
                ticketList.append("<tr style=\"font-size:small\" ><td>"+HandlerUtils.nullToEmpty(rs.getString(1))+"</td>"
                        + "<td>"+HandlerUtils.nullToEmpty(rs.getString(2))+"</td><td>"+HandlerUtils.nullToEmpty(rs.getString(3))+"</td>"
                        + "<td align=\"center\">"+HandlerUtils.nullToEmpty(rs.getString(4))+"</td>"
                        + "<td align=\"center\">"+HandlerUtils.nullToEmpty(rs.getString(5))+"</td>"
                        + "<td align=\"center\">"+HandlerUtils.nullToEmpty(rs.getString(6))+"</td>"
                        + "<td>"+HandlerUtils.nullToEmpty(rs.getString(7))+"</td>"
                        + "<td>"+HandlerUtils.nullToEmpty(rs.getString(8))+"</td>"
                        + "</tr>");
            }
            
            if(canSend){ 
                ticketList.append("</table></td></tr>");
                sendMail("Ticket Summary ", " tech@usbeveragenet.com",emailAddress ,  "tech@usbeveragenet.com", subjectLine, "sendMailFull", ticketList, false);
                sendMail("Ticket Summary ", " tech@usbeveragenet.com","sganesh@usbeveragenet.com" ,  "tech@usbeveragenet.com", subjectLine, "sendMailFull", ticketList, false);
            }
         } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetails);
            close(rs);
            close(stmt);
        }
    }
     
     
     private void getCleanupProducts(Element toHandle, Element toAppend) throws HandlerException {
        
        PreparedStatement stmt              = null;
        ResultSet rs                        = null;

        String selectMaxId                  = "SELECT max(id) from product WHERE cleanup =1;";
        String selectProduct                = "SELECT p.id, p.name,  pD.abv, pD.ibu,pD.beerAdvocate,pD.breweryDB, pDe.description FROM product p " +
                                            " LEFT JOIN productDescription pD ON pD.product = p.id LEFT JOIN productDesc pDe ON pDe.product = p.id " +
                                            " LEFT JOIN brewStyleMap bSM ON bSM.product=p.id  WHERE  bSM.brewery NOT IN (1093,  1063,713,785) AND " +
                                            " p.cleanup = 1 AND pD.ibu = 0 AND p.approved = 1 AND p.isActive = 1 AND p.ptype = 1 ORDER BY LEFT(pD.beerAdvocate, 5) DESC, p.id LIMIT 25;";
        
        
        //1093 - custom
        //1063-Gordon Biersch
        //713-BJ's Restaurants
        //785- Heartland Brewery
        try {

           /* HashMap<Integer, String> breweryMap
                                            = new HashMap<Integer, String>();
            HashMap<Integer, String> styleMap
                                            = new HashMap<Integer, String>();

            stmt                            = transconn.prepareStatement(selectMap);
            stmt.setInt(1, 7);
            rs                              = stmt.executeQuery();
            while(rs.next()){
                breweryMap.put(rs.getInt(1), rs.getString(2));
            }

            stmt                            = transconn.prepareStatement(selectMap);
            stmt.setInt(1, 9);
            rs                              = stmt.executeQuery();
            while(rs.next()){
                styleMap.put(rs.getInt(1), rs.getString(2));
            }*/
             
                
            stmt                            = transconn.prepareStatement(selectProduct);     
            
            rs                              = stmt.executeQuery();
            while(rs.next()){
                int colCount                    = 1;
                Element ProductE1               = toAppend.addElement("product");
                ProductE1.addElement("productId").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));                            
                ProductE1.addElement("abv").addText(HandlerUtils.nullToString(rs.getString(colCount++),"0"));
                ProductE1.addElement("ibu").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("beerAdvocate").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                ProductE1.addElement("breweryDB").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                ProductE1.addElement("description").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));
                
                
            }
            
           /* stmt                            = transconn.prepareStatement(selectProductSet);            
            rs                              = stmt.executeQuery();
            while(rs.next()){
                int colCount                    = 1;
                Element ProductE1               = toAppend.addElement("productSet");
                ProductE1.addElement("id").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("name").addText(HandlerUtils.nullToEmpty(rs.getString(colCount++)));                            
                ProductE1.addElement("count").addText(String.valueOf(rs.getInt(colCount++)));
                ProductE1.addElement("productSetType").addText(String.valueOf(rs.getInt(colCount++)));
            }*/
        
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(rs);
            close(stmt);
            
        }
    }
     
     
     private void updateCleanupProduct(Element toHandle, Element toAppend) throws HandlerException {

        String name                         = HandlerUtils.getRequiredString(toHandle, "productName");        
        int id                              = HandlerUtils.getRequiredInteger(toHandle, "productId");
        String abv                          = HandlerUtils.getRequiredString(toHandle, "abv");        
        String description                  = HandlerUtils.getOptionalString(toHandle, "description");
        String bA                           = HandlerUtils.getOptionalString(toHandle, "beerAdvocate");
        String bDB                          = HandlerUtils.getOptionalString(toHandle, "breweryDB");
        int ibu                             = HandlerUtils.getOptionalInteger(toHandle, "ibu");        
        int cleanup                         = HandlerUtils.getOptionalBoolean(toHandle, "isCleanup") ?  3 : 2;

        int callerId                        = getCallerId(toHandle);

        PreparedStatement stmt              = null;
        ResultSet rs = null;
        if(cleanup == 0) {
            cleanup                      = 0;
        }

        
        String update                       = "UPDATE product SET  cleanup = ? WHERE id=?";
        String updateDescription            = "UPDATE productDescription SET  abv=?, beerAdvocate = ?, breweryDB = ? WHERE product=?";
        
        String updateIBU                    = "UPDATE productDescription SET  ibu=?  WHERE product=?";
        String selectProductDesc            = "SELECT id FROM productDesc WHERE product= ?";
        String insertProductDesc            = "INSERT INTO productDesc(product,description) VALUES(?, ?)";
        String updateProductDesc            = "UPDATE productDesc SET description = ? WHERE product= ?";
        
        try {

            String logMessage = "Changing product name to " + name + " for id" + id;
            logger.portalDetail(callerId, "updateProduct", 0, "product", id, logMessage, transconn);
            
            if(id>0) {
          
                stmt = transconn.prepareStatement(update);                
                stmt.setInt(1, cleanup);
                stmt.setInt(2, id);
                stmt.executeUpdate();
                
                stmt = transconn.prepareStatement(updateDescription);
                
                stmt.setString(1, abv);                
                stmt.setString(2, HandlerUtils.nullToEmpty(bA));
                stmt.setString(3, HandlerUtils.nullToEmpty(bDB));
                stmt.setInt(4, id);
                stmt.executeUpdate();
                
                if(ibu >0 && ibu<=100){
                stmt                        = transconn.prepareStatement(updateIBU);
                stmt.setInt(1, ibu);
                stmt.setInt(2, id);
                stmt.executeUpdate();
            }
            if(description!=null && !description.equals("")){
                stmt = transconn.prepareStatement(selectProductDesc);                
                stmt.setInt(1, id);
                rs = stmt.executeQuery();
                if(rs.next()) { 
                    stmt                        = transconn.prepareStatement(updateProductDesc);
                    stmt.setString(1, description);
                    stmt.setInt(2, id);
                    stmt.executeUpdate();
                } else {
                    stmt                        = transconn.prepareStatement(insertProductDesc);
                    stmt.setString(2, description);
                    stmt.setInt(1, id);
                    stmt.executeUpdate();

                }    
            }
            String insertLog        = "INSERT INTO productChangeLog (product,type,date) VALUES (?,2,now())";
            stmt = transconn.prepareStatement(insertLog);
            stmt.setInt(1, id);                    
            //stmt.executeUpdate();
            
            } 
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }

    }
     
    private void getKnowledgeBaseBug(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);               
        int id                              = HandlerUtils.getOptionalInteger(toHandle, "id");       
        int status                          = HandlerUtils.getOptionalInteger(toHandle, "status");  
        int category                        = HandlerUtils.getOptionalInteger(toHandle, "category");  
        int problem                         = HandlerUtils.getOptionalInteger(toHandle, "problem");  
        String searchString                 = HandlerUtils.getOptionalString(toHandle, "searchString"); 
        int export                          = HandlerUtils.getOptionalInteger(toHandle, "export"); 
           
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetail= null;

        String selectKnowledgeBase          = "SELECT k.id,kP.category,kC.name,k.problem,kP.name,k.lastUpdate,k.status,k.headLine,k.description,u.name FROM knowledgeBaseBug k  LEFT JOIN knowledgeBaseProblem kP ON kP.id=k.problem"
                                            + " LEFT JOIN knowledgeBaseCategory kC ON kC.id=kP.category LEFT JOIN user u ON u.id=k.user " ;
        
        if( id >0){
            
            selectKnowledgeBase             += " WHERE k.id = ?  ";
            selectKnowledgeBase             += "   ORDER BY kC.id, k.problem; ";
            
        } else { 
            selectKnowledgeBase             += " WHERE k.id <> 0 ";
            if(searchString!=null && !searchString.equals("")) {
                selectKnowledgeBase          += " AND ( (k.id) like '%"+searchString+"%' OR k.headLine LIKE '%"+searchString+"%' OR k.description LIKE '%"+searchString+"%'  OR k.date LIKE '%"+searchString+"%' OR kP.name LIKE '%"+searchString+"%'  OR kC.name LIKE '%"+searchString+"%'  ) ";
            } else {
             if(status >0 ) {
                selectKnowledgeBase         += " AND   k.status = ?  ";
            }
            if(category >0 ) {
                selectKnowledgeBase         += " AND   kP.category = ?  ";
            } 
            if(problem >0 ) { 
                selectKnowledgeBase         += " AND k.problem=?";
            }
            }
            
            selectKnowledgeBase             += "   ORDER BY k.problem; ";
        }
        
        try {
            int counter                     = 1;
            stmt                            = transconn.prepareStatement(selectKnowledgeBase);             
            if(id >0){                
                stmt.setInt(1, id);                
            } else {
                int colCount                = 1;
                if(searchString!=null && !searchString.equals("")) {
                    
                } else {
                if(status > 0){
                    stmt.setInt(colCount++, status);
                }
                if(category > 0){
                    stmt.setInt(colCount++, category);
                }
                 
                 if(problem > 0){
                    stmt.setInt(colCount++, problem);
                }
                }
            }
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element kBDataEl            = toAppend.addElement("bug");  
                int bug                     = rs.getInt(counter++);
                kBDataEl.addAttribute("id", String.valueOf(bug));
                kBDataEl.addAttribute("categoryId", String.valueOf(rs.getInt(counter++)));
                kBDataEl.addAttribute("category", rs.getString(counter++));
                int problemId                = rs.getInt(counter++);
                kBDataEl.addAttribute("problemId", String.valueOf(problemId));
                kBDataEl.addAttribute("problem", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                kBDataEl.addAttribute("date", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                kBDataEl.addAttribute("status", String.valueOf(rs.getInt(counter++)));
                kBDataEl.addAttribute("headLine", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                kBDataEl.addAttribute("description", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                kBDataEl.addAttribute("user", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                if(export > 0) {
                    getProblemResolution(problemId,bug,kBDataEl);
                }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetail);
            close(rs);
            close(stmt);
        }
    } 
    
    
     private void getKnowledgeBaseCategory(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);               
         
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetail= null;

        String selectcategory               = "SELECT id,name FROM knowledgeBaseCategory ORDER BY name; " ;
        String selectProblem                = "SELECT id,name FROM knowledgeBaseProblem WHERE category= ? ";
        try {            
            stmt                            = transconn.prepareStatement(selectcategory);                         
            rs                              = stmt.executeQuery();
            while (rs.next()) {                 
                Element kBDataEl       = toAppend.addElement("category");                
                kBDataEl.addAttribute("id", String.valueOf(rs.getInt(1)));
                kBDataEl.addAttribute("name", rs.getString(2));
                stmt                        = transconn.prepareStatement(selectProblem); 
                stmt.setInt(1,rs.getInt(1));
                rsDetail                    = stmt.executeQuery();
                while(rsDetail.next()) {
                    Element kBPDataEl       = kBDataEl.addElement("problem");                
                    kBPDataEl.addAttribute("problemId", String.valueOf(rsDetail.getInt(1)));
                    kBPDataEl.addAttribute("name", rsDetail.getString(2));
                }
                 
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetail);
            close(rs);
            close(stmt);
        }
    } 
    
     
     
     private void createKnowledgeBaseBug(Element toHandle, Element toAppend) throws HandlerException {
         
         int callerId                        = getCallerId(toHandle);

        String category                     = HandlerUtils.getRequiredString(toHandle, "category");        
        String problem                      = HandlerUtils.getRequiredString(toHandle, "problem"); 
        int categoryId                      = HandlerUtils.getOptionalInteger(toHandle, "categoryId");       
        int problemId                       = HandlerUtils.getOptionalInteger(toHandle, "problemId");
        int user                            = HandlerUtils.getOptionalInteger(toHandle, "user");
        String date                         = HandlerUtils.getRequiredString(toHandle, "date");  
        String headLine                     = HandlerUtils.getOptionalString(toHandle, "headLine");
        String description                  = HandlerUtils.getOptionalString(toHandle, "description");
        logger.debug("Date:"+date);
        

        PreparedStatement stmt              = null;
        ResultSet rs = null;
        
       
        String selectCategory               = "SELECT id FROM knowledgeBaseCategory WHERE name = ?";
        String insertCategory               = "INSERT INTO knowledgeBaseCategory(name) VALUES(?)";
        String selectProblem                = "SELECT id FROM knowledgeBaseProblem WHERE category=? AND name = ?";
        String insertProblem                = "INSERT INTO knowledgeBaseProblem(category,name) VALUES(?, ?)";
        String insertKB                     = "INSERT INTO knowledgeBaseBug(problem,headLine,description,user,date,lastUpdate) VALUES(?, ?, ?, ?, ?, NOW())";
        String selectKB                     = "SELECT id FROM knowledgeBaseBug WHERE  problem = ?";
        String getLastId                    = "SELECT LAST_INSERT_ID()";
        String insertLog                    = "INSERT INTO knowledgeBaseBugLogs (bug,log,user,date) VALUES(?, ?, ?, NOW())";
        
        try {
            if(categoryId == 0){
            stmt = transconn.prepareStatement(selectCategory);                
            stmt.setString(1, category);
            rs                              = stmt.executeQuery();
            if(rs.next()) {
                categoryId                  = rs.getInt(1);
            } else {
                stmt                        = transconn.prepareStatement(insertCategory);                
                stmt.setString(1, category);
                stmt.executeUpdate();
                stmt = transconn.prepareStatement(getLastId);                                
                rs                          = stmt.executeQuery();
                if(rs.next()) {
                    categoryId              = rs.getInt(1);
                }
            }
            }
            if(problemId ==0) {
            stmt                            = transconn.prepareStatement(selectProblem);                
            stmt.setInt(1, categoryId);
            stmt.setString(2, problem);
            rs                              = stmt.executeQuery();
            if(rs.next()) {
                problemId                   = rs.getInt(1);
            } else {
                stmt                        = transconn.prepareStatement(insertProblem);                
                stmt.setInt(1, categoryId);
                stmt.setString(2, problem);
                stmt.executeUpdate();
                stmt                        = transconn.prepareStatement(getLastId);                                
                rs                          = stmt.executeQuery();
                if(rs.next()) {
                    problemId               = rs.getInt(1);
                }
            }
            }

            
            
            if( problemId > 0) {
                stmt                        = transconn.prepareStatement(insertKB);                                    
                stmt.setInt(1, problemId);
                stmt.setString(2, HandlerUtils.nullToEmpty(headLine));
                stmt.setString(3, HandlerUtils.nullToEmpty(description));
                stmt.setInt(4, user);
                stmt.setString(5, HandlerUtils.nullToEmpty(date));                    
                stmt.executeUpdate();
                int bugId                   = 0;
                stmt                        = transconn.prepareStatement(getLastId); 
                rs                          = stmt.executeQuery();
                if(rs.next()) {
                    bugId                   = rs.getInt(1);
                }
                if(description!=null && !description.equals("")){
                    stmt                    = transconn.prepareStatement(insertLog);
                    stmt.setInt(1, bugId);
                    stmt.setString(2, HandlerUtils.nullToEmpty(description));
                    stmt.setInt(3, callerId);
                    stmt.executeUpdate();
                }
                
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }

    }
     
     
      private void getProblemResolution(int problem,int bug, Element toAppend) throws HandlerException {

        
           
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetail= null;

        String selectResolution             = "SELECT r.id,r.resolution, u.name,r.date FROM knowledgeBaseResolution r LEFT JOIN user u ON u.id=r.user "
                                            + " WHERE bug=? ORDER BY date DESC" ;
        String selectLog                    = "SELECT DISTINCT l.id, l.log, u.name, l.date FROM knowledgeBaseBugLogs l LEFT JOIN user u ON u.id=l.user " +
                                            " WHERE l.bug = ? ORDER BY l.date DESC" ;
        
        
        try {
            int counter                     = 1;
            if(bug > 0){
            stmt                            = transconn.prepareStatement(selectResolution);
            stmt.setInt(1, bug);            
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element kBDataEl       = toAppend.addElement("resolution");
                kBDataEl.addAttribute("id", String.valueOf(rs.getInt(counter++)));
                kBDataEl.addAttribute("description", rs.getString(counter++));
                kBDataEl.addAttribute("user", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                kBDataEl.addAttribute("date", rs.getString(counter++));
                
            }
            }
            if(bug > 0){
            stmt                            = transconn.prepareStatement(selectLog);
            stmt.setInt(1, bug);
            rs                              = stmt.executeQuery();
            while (rs.next()) {
                counter                     = 1;
                Element kBDataEl       = toAppend.addElement("log");
                kBDataEl.addAttribute("id", String.valueOf(rs.getInt(counter++)));
                kBDataEl.addAttribute("description", rs.getString(counter++));
                kBDataEl.addAttribute("user", rs.getString(counter++));
                kBDataEl.addAttribute("date", rs.getString(counter++));

            }
            }
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetail);
            close(rs);
            close(stmt);
        }
    } 
     
     private void getProblemResolution(Element toHandle, Element toAppend) throws HandlerException {

        int callerId                        = getCallerId(toHandle);                       
        int problem                         = HandlerUtils.getOptionalInteger(toHandle, "problem");
        int bug                             = HandlerUtils.getOptionalInteger(toHandle, "bugId");
           
        PreparedStatement stmt              = null;
        ResultSet rs                        = null, rsDetail= null;

        String selectResolution             = "SELECT r.id,r.resolution, u.name,r.date FROM knowledgeBaseResolution r LEFT JOIN user u ON u.id=r.user "
                                            + " WHERE bug=? ORDER BY date DESC" ;
        String selectLog                    = "SELECT DISTINCT l.id, l.log, u.name, l.date FROM knowledgeBaseBugLogs l LEFT JOIN user u ON u.id=l.user " +
                                            " WHERE l.bug = ? ORDER BY l.date DESC" ;
        
        String selectSuggestion             = "SELECT r.id,r.resolution, u.name,r.date FROM knowledgeBaseResolution r LEFT JOIN knowledgeBaseBug b ON b.id = r.bug  LEFT JOIN user u ON u.id=r.user"
                                            + " WHERE b.problem=? ORDER BY date DESC;";
        
        
        try {
            int counter                     = 1;
            if(bug > 0){
                stmt                            = transconn.prepareStatement(selectLog);
                stmt.setInt(1, bug);
                rs                              = stmt.executeQuery();
                while (rs.next()) {
                    counter                     = 1;
                    Element kBDataEl       = toAppend.addElement("log");
                    kBDataEl.addAttribute("id", String.valueOf(rs.getInt(counter++)));
                    kBDataEl.addAttribute("description", rs.getString(counter++));
                    kBDataEl.addAttribute("user", rs.getString(counter++));
                    kBDataEl.addAttribute("date", rs.getString(counter++));

                }
                stmt                            = transconn.prepareStatement(selectResolution);
                stmt.setInt(1, bug);            
                rs                              = stmt.executeQuery();
                if (rs.next()) {
                    counter                     = 1;
                    Element kBDataEl       = toAppend.addElement("resolution");
                    kBDataEl.addAttribute("id", String.valueOf(rs.getInt(counter++)));
                    kBDataEl.addAttribute("description", rs.getString(counter++));
                    kBDataEl.addAttribute("user", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                    kBDataEl.addAttribute("date", rs.getString(counter++));

                }
            } else  if(problem > 0){
                stmt                            = transconn.prepareStatement(selectSuggestion);
                stmt.setInt(1, problem);            
                rs                              = stmt.executeQuery();
                while (rs.next()) {
                    counter                     = 1;
                    Element kBDataEl       = toAppend.addElement("resolution");
                    kBDataEl.addAttribute("id", String.valueOf(rs.getInt(counter++)));
                    kBDataEl.addAttribute("description", rs.getString(counter++));
                    kBDataEl.addAttribute("user", HandlerUtils.nullToEmpty(rs.getString(counter++)));
                    kBDataEl.addAttribute("date", rs.getString(counter++));

                }
            }
            
        } catch (SQLException sqle) {
            logger.dbError("Database error: "+sqle.toString());
            throw new HandlerException(sqle);
        } finally {
            close(rsDetail);
            close(rs);
            close(stmt);
        }
    } 
    
     
     private void addProblemResolution(Element toHandle, Element toAppend) throws HandlerException {
         
         int callerId                        = getCallerId(toHandle);

        
        int problemId                       = HandlerUtils.getOptionalInteger(toHandle, "problemId");  
        String resolution                   = HandlerUtils.getOptionalString(toHandle, "resolution");
        String headLine                     = HandlerUtils.getOptionalString(toHandle, "headLine");
        int bugId                           = HandlerUtils.getOptionalInteger(toHandle, "bugId");       
        int status                          = HandlerUtils.getOptionalInteger(toHandle, "status");
        String log                          = HandlerUtils.getOptionalString(toHandle, "log");
        
        

        PreparedStatement stmt              = null;
        ResultSet rs = null;
        
       
      
        String insertResolution             = "INSERT INTO knowledgeBaseResolution(bug,resolution,user,date) VALUES(?, ?, ?, NOW())";
        String insertLog                    = "INSERT INTO knowledgeBaseBugLogs (bug,log,user,date) VALUES(?, ?, ?, NOW())";
        String updateBug                    = "UPDATE knowledgeBaseBug SET headLine = ?, status=?, lastUpdate=NOW() WHERE id= ?;";
        String selectResolution             = "SELECT id FROM knowledgeBaseResolution WHERE bug = ? ";
        
        try {

            if(bugId >0 ){
                stmt                        = transconn.prepareStatement(updateBug);
                stmt.setString(1, HandlerUtils.nullToEmpty(headLine));
                stmt.setInt(2, status);
                stmt.setInt(3, bugId);
                stmt.executeUpdate();

                if(log!=null && !log.equals("")) {
                    stmt                    = transconn.prepareStatement(insertLog);
                    stmt.setInt(1, bugId);
                    stmt.setString(2, log);
                    stmt.setInt(3, callerId);
                    stmt.executeUpdate();
                }
            }
            
            if( bugId > 0 && (resolution!=null && !resolution.equals("")) ) {
               
                stmt                            = transconn.prepareStatement(selectResolution);
                stmt.setInt(1, bugId);            
                rs                              = stmt.executeQuery();
                if (rs.next()) {
                    stmt                        = transconn.prepareStatement("UPDATE knowledgeBaseResolution SET resolution = ?, user = ?,date=now() WHERE bug = ?"); 
                    stmt.setString(1, resolution);
                    stmt.setInt(2, callerId);   
                    stmt.setInt(3, bugId);
                    stmt.executeUpdate();
                } else {
                    stmt                        = transconn.prepareStatement(insertResolution); 
                    stmt.setInt(1, bugId);
                    stmt.setString(2, resolution);
                    stmt.setInt(3, callerId);               
                    stmt.executeUpdate();
                }
                
               
            } 
        } catch (SQLException sqle) {
            logger.dbError("Database error: " + sqle.getMessage());
            throw new HandlerException(sqle);
        } finally {
            close(stmt);
            close(rs);
        }

    }
    
    
    
    
    

    
      
}
